{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"QUICKJS_MO",
				"QUICKJS_MODULE_CFLAGS"
			],
			[
				"check_cxx",
				"check_cxx_standard_flag"
			],
			[
				"check_func",
				"check_function_exists"
			],
			[
				"contour",
				"contour_proto"
			],
			[
				"dst",
				"dst_pts"
			],
			[
				"CXX_",
				"CXX_STANDARD_VALUE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"process",
				"processor_or_index"
			],
			[
				"proces",
				"processor_or_index"
			],
			[
				"w",
				"width"
			],
			[
				"FUNC_TO",
				"FUNC_TOARRAY"
			],
			[
				"JSInpu",
				"JSInputOutputArray"
			],
			[
				"JSIn",
				"JSInputOutputArray"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"typed",
				"typedarray_ctor"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"depe",
				"dependent_scope_decl_ref_expr"
			],
			[
				"com",
				"compound_stmt"
			],
			[
				"CXXConstruc",
				"CXXConstructorDecl"
			],
			[
				"refere",
				"referencedDecl"
			],
			[
				"cons",
				"console"
			],
			[
				"Acc",
				"AccessSpecDecl"
			],
			[
				"value",
				"valueCategory"
			],
			[
				"ini",
				"initializers"
			],
			[
				"res",
				"RestElement"
			],
			[
				"arg",
				"argc"
			],
			[
				"instru",
				"instrument"
			],
			[
				"defaul",
				"defaultExport"
			],
			[
				"getBy",
				"getByIdOrName"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "JSMatIteratorData\n  js_mat_free_func\n  js_mat_sizes\n  js_mat_dimensions\n  js_mat_track\n  js_mat_new\n  js_mat_wrap\n  js_mat_data\n  js_mat_print_data\n  js_mat_dump\n  js_mat_params\n  js_mat_ctor\n  js_mat_funcs\n  js_mat_expr\n  js_mat_init\n  js_mat_get\n  js_mat_get\n  js_mat_get_wh\n  js_mat_at\n  js_mat_set\n  js_mat_set_to\n  js_mat_get_props\n  js_mat_tostring\n  js_mat_inspect\n  js_mat_getrotationmatrix2d\n  js_mat_convert_to\n  js_mat_copy_to\n  js_mat_reshape\n  js_mat_getumat\n  js_mat_class_func\n  js_mat_fill\n  js_mat_class_create\n  js_mat_buffer\n  js_mat_array\n  js_mat_call\n  js_mat_finalizer\n  js_mat_iterator_new\n  js_mat_iterator_dump\n  js_mat_iterator_next\n  js_mat_iterator_finalizer\n  js_mat_iterator_dup\nJS_CGETSET_MAGIC_DEF\nJS_CGETSET_MAGIC_DEF\nJS_CGETSET_MAGIC_DEF\nJS_CGETSET_MAGIC_DEF\nJS_CGETSET_MAGIC_DEF\nJS_CGETSET_MAGIC_DEF\nJS_CGETSET_MAGIC_DEF\nJS_CGETSET_MAGIC_DEF\nJS_CGETSET_MAGIC_DEF\nJS_CGETSET_MAGIC_DEF\nJS_CGETSET_MAGIC_DEF\nJS_CGETSET_MAGIC_DEF\nJS_CGETSET_MAGIC_DEF\nJS_CGETSET_DEF\nJS_CGETSET_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_DEF\nJS_CFUNC_DEF\nJS_CFUNC_DEF\nJS_CFUNC_DEF\nJS_CFUNC_DEF\nJS_CFUNC_DEF\nJS_CFUNC_DEF\nJS_CFUNC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_ALIAS_DEF\nJS_ALIAS_DEF\nJS_PROP_STRING_DEF\nJS_ITERATOR_NEXT_DEF\nJS_PROP_STRING_DEF\nJS_CFUNC_DEF\nJS_CFUNC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_CFUNC_MAGIC_DEF\nJS_PROP_INT32_DEF\nCV_MAKETYPE\n  js_mat_init\n  js_mat_export\nJS_INIT_MODULE\nJS_INIT_MODULE\nJS_INIT_MODULE",
			"settings":
			{
				"buffer_size": 1940,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					725,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/LICENSE",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAjCAAASlNCSU5ESU5HU19IUFAKSlNSZWN0RGF0YUQKSlNNYXREYXRhCkpTVU1hdERhdGEKSlNTaXplRGF0YUQKSlNWaWRlb0NhcHR1cmVEYXRhCkpTVGlja01ldGVyRGF0YQpKU0NMQUhFRGF0YQpKU0lucHV0QXJyYXkKSlNPdXRwdXRBcnJheQpKU0lucHV0T3V0cHV0QXJyYXkKSlNMaW5lVHJhaXRzCiAgYXJyYXlfdHlwZQogIHZlY3Rvcl90eXBlCiAgc2NhbGFyX3R5cGUKVklTSUJMRQogIF9fZGVjbHNwZWMKSElEREVOClZJU0lCTEUKICBfX2F0dHJpYnV0ZV9fCkhJRERFTgogIF9fYXR0cmlidXRlX18KSlNfQ0dFVFNFVF9FTlVNRVJBQkxFX0RFRgogIGpzX2RyYXdfcwogIGpzX2RyYXdfaW5pdAogIGpzX2xpbmVfbmV3CiAganNfaW5pdF9tb2R1bGUKICBqc19pbml0X21vZHVsZV9wb2ludAogIGpzX2luaXRfbW9kdWxlX3NpemUKICBqc19pbml0X21vZHVsZV9yZWN0CiAganNfaW5pdF9tb2R1bGVfbWF0CiAganNfaW5pdF9tb2R1bGVfY29udG91cgogIGpzX2luaXRfbW9kdWxlX2xpbmUKICBqc19pbml0X21vZHVsZV9kcmF3CiAganNfaW5pdF9tb2R1bGVfY3YKICBqc19pbml0X21vZHVsZV92aWRlb19jYXB0dXJlCiAganNfdmlkZW9fY2FwdHVyZV9pbml0CiAganNfdmlkZW9fY2FwdHVyZV93cmFwCiAganNfbWF0X3dyYXAKICBqc19nbG9iYWxfZ2V0CiAganNfaXNfaXRlcmFibGUKICBqc19pdGVyYXRvcl9tZXRob2QKICBqc19pdGVyYXRvcl9uZXcKICBqc19pdGVyYXRvcl9uZXh0CiAganNfc3ltYm9sX2F0b20KICBqc19zeW1ib2xfY3RvcgogIGpzX3N5bWJvbF9nZXRfc3RhdGljCiAgY291bnRvZgogIGpzX3ZlY3Rvcl92ZWM0aV90b19hcnJheQogIGpzX2N0b3IKICBqc19wcm90bwogIGpzX25ldwogIGpzX251bWJlcl9yZWFkCiAganNfbnVtYmVyX3JlYWQ8aW50MzJfdD4KICBqc19udW1iZXJfcmVhZDx1aW50MzJfdD4KICBqc19udW1iZXJfcmVhZDxpbnQ2NF90PgogIGpzX251bWJlcl9uZXcKICBqc19udW1iZXJfbmV3PGludDMyX3Q+CiAganNfbnVtYmVyX25ldzx1aW50MzJfdD4KICBqc19udW1iZXJfbmV3PGludDY0X3Q+CiAganNfY29sb3JfcmVhZAogIGpzX2NvbG9yX3JlYWQKICBqc19jb2xvcl9yZWFkCiAganNfY29sb3JfbmV3CiAganNfcmVmCiAgcm91bmRfdG8KICBqc19hcnJheWJ1ZmZlcl9yYW5nZQogIGpzX2FycmF5YnVmZmVyX3JhbmdlCiAgdmFsdWVfdHlwZQogIGpzX2FycmF5YnVmZmVyX2Zyb20KICBqc19hcnJheWJ1ZmZlcl9mcm9tCiAganNfZ2xvYmFsX2dldAogIGpzX3N5bWJvbF9jdG9yCiAganNfc3ltYm9sX2ludm9rZV9zdGF0aWMKICBqc19zeW1ib2xfZm9yCiAganNfc3ltYm9sX2Zvcl9hdG9tCiAganNfc2V0X2luc3BlY3RfbWV0aG9kCiAganNfc3ltYm9sX2dldF9zdGF0aWMKICBqc19zeW1ib2xfYXRvbQogIGpzX2l0ZXJhdG9yX21ldGhvZAogIGpzX2lzX2l0ZXJhYmxlCiAganNfaXNfYXJyYXlfbGlrZQpBcnJheUJ1ZmZlclByb3BzCkFycmF5QnVmZmVyUHJvcHMKICBqc19pc19hcnJheWJ1ZmZlcgogIGpzX2FycmF5YnVmZmVyX3Byb3BzCiAganNfX25hbWUKICBqc19jbGFzc19uYW1lCiAganNfdHlwZWRhcnJheV9wcm90b3R5cGUKICBqc190eXBlZGFycmF5X2NvbnN0cnVjdG9yCiAganNfaXNfdHlwZWRhcnJheQpKU19Jc0FycmF5CiAganNfaXNfdHlwZWRhcnJheQogIGpzX2l0ZXJhdG9yX25ldwogIGpzX2l0ZXJhdG9yX25leHQKICBqc192YWx1ZV90bwogIGpzX3ZhbHVlX3RvCiAganNfdmFsdWVfdG8KICBqc192YWx1ZV9mcm9tCiAganNfdmFsdWVfZnJvbQogIGpzX3ZhbHVlX2Zyb20KICBqc192YWx1ZV9mcm9tCiAganNfaXRlcmFibGUKCXRvX3ZlY3RvcgoJanNfaXRlcmF0b3JfbmV3CgljbGVhcgoJanNfaXRlcmF0b3JfbmV4dAoJanNfdmFsdWVfdG8KCXB1c2hfYmFjawpKU19GcmVlVmFsdWUKSlNfRnJlZVZhbHVlCglzaXplCgl0b19hcnJheQoJanNfaXRlcmF0b3JfbmV3Cglqc19pdGVyYXRvcl9uZXh0Cglqc192YWx1ZV90bwpKU19GcmVlVmFsdWUKSlNfRnJlZVZhbHVlCgl0b19zY2FsYXIKCXRvX2FycmF5CiAganNfaXRlcmFibGVfdG8KICBqc19pdGVyYWJsZV90bwogIGFycmF5X3R5cGUKICBqc19pdGVyYWJsZV90bwAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					726,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_array.hpp",
						"symkeys":
						[
							[
								29,
								41
							],
							[
								187,
								202
							],
							[
								477,
								499
							],
							[
								582,
								599
							],
							[
								977,
								994
							],
							[
								1064,
								1081
							],
							[
								1217,
								1237
							],
							[
								1759,
								1767
							],
							[
								1879,
								1885
							],
							[
								2009,
								2017
							],
							[
								2047,
								2056
							],
							[
								2157,
								2168
							],
							[
								2207,
								2224
							],
							[
								2250,
								2260
							],
							[
								2284,
								2291
							],
							[
								2296,
								2300
							],
							[
								2379,
								2399
							],
							[
								2433,
								2445
							],
							[
								2482,
								2494
							],
							[
								2519,
								2524
							],
							[
								2565,
								2574
							],
							[
								2589,
								2601
							],
							[
								2686,
								2690
							],
							[
								2799,
								2804
							],
							[
								2811,
								2814
							],
							[
								2843,
								2854
							],
							[
								2910,
								2923
							],
							[
								2932,
								2937
							],
							[
								2944,
								2947
							],
							[
								3003,
								3016
							],
							[
								3187,
								3198
							],
							[
								3292,
								3305
							],
							[
								3323,
								3343
							],
							[
								3438,
								3446
							],
							[
								3522,
								3531
							],
							[
								3637,
								3658
							],
							[
								3894,
								3916
							],
							[
								4163,
								4171
							],
							[
								4211,
								4220
							],
							[
								4328,
								4339
							],
							[
								4378,
								4395
							],
							[
								4421,
								4431
							],
							[
								4455,
								4462
							],
							[
								4467,
								4471
							],
							[
								4531,
								4551
							],
							[
								4600,
								4611
							],
							[
								4639,
								4648
							],
							[
								4724,
								4737
							],
							[
								4818,
								4829
							],
							[
								4932,
								4952
							],
							[
								4966,
								4978
							],
							[
								5063,
								5071
							],
							[
								5168,
								5196
							],
							[
								5513,
								5521
							],
							[
								5560,
								5569
							],
							[
								5676,
								5687
							],
							[
								5726,
								5743
							],
							[
								5769,
								5779
							],
							[
								5803,
								5810
							],
							[
								5815,
								5819
							],
							[
								5879,
								5899
							],
							[
								5934,
								5943
							],
							[
								6023,
								6036
							],
							[
								6117,
								6128
							],
							[
								6207,
								6227
							],
							[
								6321,
								6329
							],
							[
								6425,
								6452
							],
							[
								6730,
								6738
							],
							[
								6784,
								6793
							],
							[
								6907,
								6918
							],
							[
								6957,
								6974
							],
							[
								7000,
								7010
							],
							[
								7034,
								7041
							],
							[
								7046,
								7050
							],
							[
								7137,
								7157
							],
							[
								7192,
								7205
							],
							[
								7236,
								7248
							],
							[
								7273,
								7278
							],
							[
								7319,
								7328
							],
							[
								7343,
								7355
							],
							[
								7439,
								7452
							],
							[
								7533,
								7544
							],
							[
								7623,
								7643
							],
							[
								7657,
								7669
							],
							[
								7756,
								7764
							],
							[
								8012,
								8023
							],
							[
								8097,
								8117
							],
							[
								8136,
								8149
							],
							[
								8240,
								8248
							],
							[
								8294,
								8303
							],
							[
								8406,
								8417
							],
							[
								8456,
								8473
							],
							[
								8499,
								8509
							],
							[
								8533,
								8540
							],
							[
								8545,
								8549
							],
							[
								8641,
								8661
							],
							[
								8696,
								8709
							],
							[
								8740,
								8752
							],
							[
								8777,
								8782
							],
							[
								8823,
								8832
							],
							[
								8847,
								8859
							],
							[
								8943,
								8956
							],
							[
								9037,
								9048
							],
							[
								9127,
								9147
							],
							[
								9161,
								9174
							],
							[
								9261,
								9269
							],
							[
								9362,
								9370
							],
							[
								9415,
								9424
							],
							[
								9537,
								9548
							],
							[
								9587,
								9604
							],
							[
								9630,
								9640
							],
							[
								9664,
								9671
							],
							[
								9676,
								9680
							],
							[
								9766,
								9786
							],
							[
								9821,
								9833
							],
							[
								9864,
								9876
							],
							[
								9901,
								9906
							],
							[
								9947,
								9956
							],
							[
								9971,
								9983
							],
							[
								10067,
								10080
							],
							[
								10161,
								10172
							],
							[
								10251,
								10271
							],
							[
								10285,
								10297
							],
							[
								10384,
								10392
							],
							[
								10484,
								10492
							],
							[
								10530,
								10539
							],
							[
								10645,
								10656
							],
							[
								10695,
								10712
							],
							[
								10738,
								10748
							],
							[
								10772,
								10779
							],
							[
								10784,
								10788
							],
							[
								10867,
								10887
							],
							[
								10921,
								10933
							],
							[
								10964,
								10976
							],
							[
								11001,
								11006
							],
							[
								11047,
								11056
							],
							[
								11071,
								11083
							],
							[
								11167,
								11180
							],
							[
								11261,
								11272
							],
							[
								11366,
								11379
							],
							[
								11397,
								11417
							],
							[
								11495,
								11504
							],
							[
								11614,
								11623
							],
							[
								11652,
								11656
							],
							[
								11771,
								11779
							],
							[
								11877,
								11886
							],
							[
								11994,
								12002
							],
							[
								12041,
								12050
							],
							[
								12157,
								12168
							],
							[
								12207,
								12224
							],
							[
								12250,
								12260
							],
							[
								12284,
								12291
							],
							[
								12296,
								12300
							],
							[
								12383,
								12403
							],
							[
								12442,
								12453
							],
							[
								12503,
								12515
							],
							[
								12540,
								12545
							],
							[
								12586,
								12595
							],
							[
								12611,
								12623
							],
							[
								12697,
								12705
							],
							[
								12798,
								12806
							],
							[
								12862,
								12874
							],
							[
								12901,
								12911
							],
							[
								12933,
								12942
							],
							[
								13054,
								13065
							],
							[
								13104,
								13121
							],
							[
								13147,
								13157
							],
							[
								13181,
								13188
							],
							[
								13193,
								13197
							],
							[
								13318,
								13338
							],
							[
								13379,
								13394
							],
							[
								13456,
								13468
							],
							[
								13537,
								13546
							],
							[
								13586,
								13595
							],
							[
								13612,
								13624
							],
							[
								13708,
								13721
							],
							[
								13802,
								13813
							],
							[
								13907,
								13921
							],
							[
								13939,
								13959
							],
							[
								14065,
								14069
							],
							[
								14178,
								14183
							],
							[
								14190,
								14193
							],
							[
								14230,
								14238
							],
							[
								14284,
								14293
							],
							[
								14407,
								14418
							],
							[
								14457,
								14474
							],
							[
								14500,
								14510
							],
							[
								14534,
								14541
							],
							[
								14546,
								14550
							],
							[
								14637,
								14657
							],
							[
								14704,
								14713
							],
							[
								14748,
								14760
							],
							[
								14785,
								14790
							],
							[
								14831,
								14840
							],
							[
								14855,
								14867
							],
							[
								14951,
								14964
							],
							[
								15045,
								15056
							],
							[
								15150,
								15163
							],
							[
								15181,
								15201
							],
							[
								15296,
								15304
							],
							[
								15420,
								15431
							],
							[
								15590,
								15601
							],
							[
								15683,
								15693
							],
							[
								15784,
								15795
							],
							[
								16016,
								16029
							],
							[
								16292,
								16305
							],
							[
								16501,
								16514
							],
							[
								16653,
								16662
							],
							[
								16712,
								16718
							],
							[
								16856,
								16878
							],
							[
								17028,
								17042
							],
							[
								17085,
								17096
							],
							[
								17215,
								17223
							],
							[
								17316,
								17326
							],
							[
								17346,
								17358
							],
							[
								17434,
								17451
							],
							[
								17474,
								17479
							],
							[
								17484,
								17497
							]
						],
						"symlist":
						[
							"JS_ARRAY_HPP",
							"js_array_length",
							"JS_DeletePropertyInt64",
							"js_array_truncate",
							"js_array_iterator",
							" js_array_iterator",
							" JS_GetPropertyUint32",
							"js_begin",
							"js_end",
							"js_array",
							" to_vector",
							" js_is_array",
							" JS_GetPropertyStr",
							" JS_ToInt64",
							" reserve",
							" size",
							" JS_GetPropertyUint32",
							" JS_ToFloat64",
							" JS_FreeValue",
							" clear",
							" push_back",
							" JS_FreeValue",
							" from",
							" begin",
							" end",
							" from_vector",
							" from_sequence",
							" begin",
							" end",
							" from_sequence",
							" JS_NewArray",
							" js_value_from",
							" JS_SetPropertyUint32",
							" to_array",
							" to_scalar",
							"js_array<T>::to_array",
							"js_array<T>::to_scalar",
							"js_array",
							" to_vector",
							" js_is_array",
							" JS_GetPropertyStr",
							" JS_ToInt64",
							" reserve",
							" size",
							" JS_GetPropertyUint32",
							" JS_ToUint32",
							" push_back",
							" from_sequence",
							" JS_NewArray",
							" JS_SetPropertyUint32",
							" JS_NewUint32",
							" to_array",
							"js_array<uint32_t>::to_array",
							"js_array",
							" to_vector",
							" js_is_array",
							" JS_GetPropertyStr",
							" JS_ToInt64",
							" reserve",
							" size",
							" JS_GetPropertyUint32",
							" push_back",
							" from_sequence",
							" JS_NewArray",
							" JS_SetPropertyUint32",
							" to_array",
							"js_array<JSValue>::to_array",
							"js_array",
							" to_vector",
							" js_is_array",
							" JS_GetPropertyStr",
							" JS_ToInt64",
							" reserve",
							" size",
							" JS_GetPropertyUint32",
							" js_color_read",
							" JS_FreeValue",
							" clear",
							" push_back",
							" JS_FreeValue",
							" from_sequence",
							" JS_NewArray",
							" JS_SetPropertyUint32",
							" js_color_new",
							" to_array",
							"js_is_array",
							"JS_GetPropertyUint32",
							"js_color_read",
							"js_array",
							" to_vector",
							" js_is_array",
							" JS_GetPropertyStr",
							" JS_ToInt64",
							" reserve",
							" size",
							" JS_GetPropertyUint32",
							" js_point_read",
							" JS_FreeValue",
							" clear",
							" push_back",
							" JS_FreeValue",
							" from_sequence",
							" JS_NewArray",
							" JS_SetPropertyUint32",
							" js_point_wrap",
							" to_array",
							"js_array",
							" to_vector",
							" js_is_array",
							" JS_GetPropertyStr",
							" JS_ToInt64",
							" reserve",
							" size",
							" JS_GetPropertyUint32",
							" js_rect_read",
							" JS_FreeValue",
							" clear",
							" push_back",
							" JS_FreeValue",
							" from_sequence",
							" JS_NewArray",
							" JS_SetPropertyUint32",
							" js_rect_wrap",
							" to_array",
							"js_array",
							" to_vector",
							" js_is_array",
							" JS_GetPropertyStr",
							" JS_ToInt64",
							" reserve",
							" size",
							" JS_GetPropertyUint32",
							" JS_ToFloat64",
							" JS_FreeValue",
							" clear",
							" push_back",
							" JS_FreeValue",
							" from_sequence",
							" JS_NewArray",
							" JS_NewFloat64",
							" JS_SetPropertyUint32",
							" to_scalar",
							" to_vector",
							" size",
							" to_array",
							" to_vector",
							"js_array",
							" to_vector",
							" js_is_array",
							" JS_GetPropertyStr",
							" JS_ToInt64",
							" reserve",
							" size",
							" JS_GetPropertyUint32",
							" js_mat_data",
							" JS_FreeValue",
							" clear",
							" push_back",
							" JS_FreeValue",
							" to_array",
							"js_array",
							"contour_type",
							"point_type",
							" to_vector",
							" js_is_array",
							" JS_GetPropertyStr",
							" JS_ToInt64",
							" reserve",
							" size",
							" JS_GetPropertyUint32",
							" js_contour_data",
							" emplace_back",
							" to_vector",
							" push_back",
							" JS_FreeValue",
							" from_sequence",
							" JS_NewArray",
							" js_contour_new",
							" JS_SetPropertyUint32",
							" from",
							" begin",
							" end",
							"js_array",
							" to_vector",
							" js_is_array",
							" JS_GetPropertyStr",
							" JS_ToInt64",
							" reserve",
							" size",
							" JS_GetPropertyUint32",
							" to_vector",
							" JS_FreeValue",
							" clear",
							" push_back",
							" JS_FreeValue",
							" from_sequence",
							" JS_NewArray",
							" js_array_from",
							" JS_SetPropertyUint32",
							" to_array",
							"js_array_to",
							"js_array_to",
							"array_type",
							"js_array_to",
							"js_array_from",
							"js_array_from",
							"js_array_from",
							"js_object",
							" to_map",
							" JS_GetOwnPropertyNames",
							" JS_GetProperty",
							" js_value_to",
							" from_map",
							"entry_type",
							" JS_NewObject",
							" JS_SetPropertyStr",
							" c_str",
							" js_value_from"
						]
					},
					"AQAAAAAAAAAAAAAAKgsAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					727,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_alloc.hpp",
						"symkeys":
						[
							[
								29,
								41
							],
							[
								194,
								207
							],
							[
								265,
								283
							],
							[
								516,
								524
							],
							[
								603,
								607
							],
							[
								715,
								725
							],
							[
								756,
								762
							],
							[
								829,
								839
							],
							[
								869,
								875
							],
							[
								1028,
								1041
							],
							[
								1121,
								1129
							],
							[
								1211,
								1221
							],
							[
								1283,
								1293
							],
							[
								1367,
								1383
							],
							[
								1463,
								1471
							],
							[
								1517,
								1527
							],
							[
								1562,
								1572
							],
							[
								1603,
								1610
							],
							[
								1642,
								1652
							],
							[
								1682,
								1692
							],
							[
								1736,
								1748
							],
							[
								1827,
								1835
							],
							[
								1869,
								1870
							],
							[
								1894,
								1904
							],
							[
								1967,
								1977
							],
							[
								2123,
								2134
							],
							[
								2234,
								2247
							],
							[
								2276,
								2303
							],
							[
								2355,
								2368
							],
							[
								2396,
								2423
							]
						],
						"symlist":
						[
							"JS_ALLOC_HPP",
							"js_alloc_mmap",
							" round_to_page_size",
							" allocate",
							" mmap",
							" deallocate",
							" munmap",
							" deallocate",
							" munmap",
							"js_alloc_libc",
							" allocate",
							" deallocate",
							" deallocate",
							"js_alloc_quickjs",
							" allocate",
							" js_mallocz",
							" deallocate",
							" js_free",
							" deallocate",
							" js_free_rt",
							"js_alloc_cxx",
							" allocate",
							" T",
							" deallocate",
							" deallocate",
							"js_allocate",
							"js_deallocate",
							"js_allocator<T>::deallocate",
							"js_deallocate",
							"js_allocator<T>::deallocate"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAqCwAASlNfQVJSQVlfSFBQCiAganNfYXJyYXlfbGVuZ3RoCkpTX0RlbGV0ZVByb3BlcnR5SW50NjQKICBqc19hcnJheV90cnVuY2F0ZQogIGpzX2FycmF5X2l0ZXJhdG9yCglqc19hcnJheV9pdGVyYXRvcgpKU19HZXRQcm9wZXJ0eVVpbnQzMgogIGpzX2JlZ2luCiAganNfZW5kCiAganNfYXJyYXkKCXRvX3ZlY3RvcgoJanNfaXNfYXJyYXkKSlNfR2V0UHJvcGVydHlTdHIKSlNfVG9JbnQ2NAoJcmVzZXJ2ZQoJc2l6ZQpKU19HZXRQcm9wZXJ0eVVpbnQzMgpKU19Ub0Zsb2F0NjQKSlNfRnJlZVZhbHVlCgljbGVhcgoJcHVzaF9iYWNrCkpTX0ZyZWVWYWx1ZQoJZnJvbQoJYmVnaW4KCWVuZAoJZnJvbV92ZWN0b3IKCWZyb21fc2VxdWVuY2UKCWJlZ2luCgllbmQKCWZyb21fc2VxdWVuY2UKSlNfTmV3QXJyYXkKCWpzX3ZhbHVlX2Zyb20KSlNfU2V0UHJvcGVydHlVaW50MzIKCXRvX2FycmF5Cgl0b19zY2FsYXIKICBqc19hcnJheTxUPjo6dG9fYXJyYXkKICBqc19hcnJheTxUPjo6dG9fc2NhbGFyCiAganNfYXJyYXkKCXRvX3ZlY3RvcgoJanNfaXNfYXJyYXkKSlNfR2V0UHJvcGVydHlTdHIKSlNfVG9JbnQ2NAoJcmVzZXJ2ZQoJc2l6ZQpKU19HZXRQcm9wZXJ0eVVpbnQzMgpKU19Ub1VpbnQzMgoJcHVzaF9iYWNrCglmcm9tX3NlcXVlbmNlCkpTX05ld0FycmF5CkpTX1NldFByb3BlcnR5VWludDMyCkpTX05ld1VpbnQzMgoJdG9fYXJyYXkKICBqc19hcnJheTx1aW50MzJfdD46OnRvX2FycmF5CiAganNfYXJyYXkKCXRvX3ZlY3RvcgoJanNfaXNfYXJyYXkKSlNfR2V0UHJvcGVydHlTdHIKSlNfVG9JbnQ2NAoJcmVzZXJ2ZQoJc2l6ZQpKU19HZXRQcm9wZXJ0eVVpbnQzMgoJcHVzaF9iYWNrCglmcm9tX3NlcXVlbmNlCkpTX05ld0FycmF5CkpTX1NldFByb3BlcnR5VWludDMyCgl0b19hcnJheQogIGpzX2FycmF5PEpTVmFsdWU+Ojp0b19hcnJheQogIGpzX2FycmF5Cgl0b192ZWN0b3IKCWpzX2lzX2FycmF5CkpTX0dldFByb3BlcnR5U3RyCkpTX1RvSW50NjQKCXJlc2VydmUKCXNpemUKSlNfR2V0UHJvcGVydHlVaW50MzIKCWpzX2NvbG9yX3JlYWQKSlNfRnJlZVZhbHVlCgljbGVhcgoJcHVzaF9iYWNrCkpTX0ZyZWVWYWx1ZQoJZnJvbV9zZXF1ZW5jZQpKU19OZXdBcnJheQpKU19TZXRQcm9wZXJ0eVVpbnQzMgoJanNfY29sb3JfbmV3Cgl0b19hcnJheQogIGpzX2lzX2FycmF5CkpTX0dldFByb3BlcnR5VWludDMyCiAganNfY29sb3JfcmVhZAogIGpzX2FycmF5Cgl0b192ZWN0b3IKCWpzX2lzX2FycmF5CkpTX0dldFByb3BlcnR5U3RyCkpTX1RvSW50NjQKCXJlc2VydmUKCXNpemUKSlNfR2V0UHJvcGVydHlVaW50MzIKCWpzX3BvaW50X3JlYWQKSlNfRnJlZVZhbHVlCgljbGVhcgoJcHVzaF9iYWNrCkpTX0ZyZWVWYWx1ZQoJZnJvbV9zZXF1ZW5jZQpKU19OZXdBcnJheQpKU19TZXRQcm9wZXJ0eVVpbnQzMgoJanNfcG9pbnRfd3JhcAoJdG9fYXJyYXkKICBqc19hcnJheQoJdG9fdmVjdG9yCglqc19pc19hcnJheQpKU19HZXRQcm9wZXJ0eVN0cgpKU19Ub0ludDY0CglyZXNlcnZlCglzaXplCkpTX0dldFByb3BlcnR5VWludDMyCglqc19yZWN0X3JlYWQKSlNfRnJlZVZhbHVlCgljbGVhcgoJcHVzaF9iYWNrCkpTX0ZyZWVWYWx1ZQoJZnJvbV9zZXF1ZW5jZQpKU19OZXdBcnJheQpKU19TZXRQcm9wZXJ0eVVpbnQzMgoJanNfcmVjdF93cmFwCgl0b19hcnJheQogIGpzX2FycmF5Cgl0b192ZWN0b3IKCWpzX2lzX2FycmF5CkpTX0dldFByb3BlcnR5U3RyCkpTX1RvSW50NjQKCXJlc2VydmUKCXNpemUKSlNfR2V0UHJvcGVydHlVaW50MzIKSlNfVG9GbG9hdDY0CkpTX0ZyZWVWYWx1ZQoJY2xlYXIKCXB1c2hfYmFjawpKU19GcmVlVmFsdWUKCWZyb21fc2VxdWVuY2UKSlNfTmV3QXJyYXkKSlNfTmV3RmxvYXQ2NApKU19TZXRQcm9wZXJ0eVVpbnQzMgoJdG9fc2NhbGFyCgl0b192ZWN0b3IKCXNpemUKCXRvX2FycmF5Cgl0b192ZWN0b3IKICBqc19hcnJheQoJdG9fdmVjdG9yCglqc19pc19hcnJheQpKU19HZXRQcm9wZXJ0eVN0cgpKU19Ub0ludDY0CglyZXNlcnZlCglzaXplCkpTX0dldFByb3BlcnR5VWludDMyCglqc19tYXRfZGF0YQpKU19GcmVlVmFsdWUKCWNsZWFyCglwdXNoX2JhY2sKSlNfRnJlZVZhbHVlCgl0b19hcnJheQogIGpzX2FycmF5CiAgY29udG91cl90eXBlCiAgcG9pbnRfdHlwZQoJdG9fdmVjdG9yCglqc19pc19hcnJheQpKU19HZXRQcm9wZXJ0eVN0cgpKU19Ub0ludDY0CglyZXNlcnZlCglzaXplCkpTX0dldFByb3BlcnR5VWludDMyCglqc19jb250b3VyX2RhdGEKCWVtcGxhY2VfYmFjawoJdG9fdmVjdG9yCglwdXNoX2JhY2sKSlNfRnJlZVZhbHVlCglmcm9tX3NlcXVlbmNlCkpTX05ld0FycmF5Cglqc19jb250b3VyX25ldwpKU19TZXRQcm9wZXJ0eVVpbnQzMgoJZnJvbQoJYmVnaW4KCWVuZAogIGpzX2FycmF5Cgl0b192ZWN0b3IKCWpzX2lzX2FycmF5CkpTX0dldFByb3BlcnR5U3RyCkpTX1RvSW50NjQKCXJlc2VydmUKCXNpemUKSlNfR2V0UHJvcGVydHlVaW50MzIKCXRvX3ZlY3RvcgpKU19GcmVlVmFsdWUKCWNsZWFyCglwdXNoX2JhY2sKSlNfRnJlZVZhbHVlCglmcm9tX3NlcXVlbmNlCkpTX05ld0FycmF5Cglqc19hcnJheV9mcm9tCkpTX1NldFByb3BlcnR5VWludDMyCgl0b19hcnJheQogIGpzX2FycmF5X3RvCiAganNfYXJyYXlfdG8KICBhcnJheV90eXBlCiAganNfYXJyYXlfdG8KICBqc19hcnJheV9mcm9tCiAganNfYXJyYXlfZnJvbQogIGpzX2FycmF5X2Zyb20KICBqc19vYmplY3QKCXRvX21hcApKU19HZXRPd25Qcm9wZXJ0eU5hbWVzCkpTX0dldFByb3BlcnR5Cglqc192YWx1ZV90bwoJZnJvbV9tYXAKICBlbnRyeV90eXBlCkpTX05ld09iamVjdApKU19TZXRQcm9wZXJ0eVN0cgoJY19zdHIKCWpzX3ZhbHVlX2Zyb20AAAAAAAAAAIsBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					728,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/init_module.cpp",
						"symkeys":
						[
							[
								65,
								78
							],
							[
								121,
								136
							],
							[
								179,
								189
							],
							[
								232,
								244
							],
							[
								287,
								299
							],
							[
								342,
								353
							],
							[
								396,
								409
							],
							[
								452,
								474
							],
							[
								517,
								529
							],
							[
								572,
								584
							],
							[
								627,
								649
							],
							[
								692,
								708
							],
							[
								751,
								763
							],
							[
								806,
								821
							],
							[
								864,
								885
							],
							[
								930,
								942
							],
							[
								975,
								989
							],
							[
								1470,
								1484
							],
							[
								1514,
								1528
							],
							[
								1591,
								1605
							]
						],
						"symlist":
						[
							"js_clahe_init",
							"js_contour_init",
							"js_cv_init",
							"js_draw_init",
							"js_line_init",
							"js_mat_init",
							"js_point_init",
							"js_point_iterator_init",
							"js_rect_init",
							"js_size_init",
							"js_slice_iterator_init",
							"js_subdiv2d_init",
							"js_umat_init",
							"js_utility_init",
							"js_video_capture_init",
							"js_cv_export",
							"js_opencv_init",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACLAQAASlNfQUxMT0NfSFBQCiAganNfYWxsb2NfbW1hcAoJcm91bmRfdG9fcGFnZV9zaXplCglhbGxvY2F0ZQoJbW1hcAoJZGVhbGxvY2F0ZQoJbXVubWFwCglkZWFsbG9jYXRlCgltdW5tYXAKICBqc19hbGxvY19saWJjCglhbGxvY2F0ZQoJZGVhbGxvY2F0ZQoJZGVhbGxvY2F0ZQogIGpzX2FsbG9jX3F1aWNranMKCWFsbG9jYXRlCglqc19tYWxsb2N6CglkZWFsbG9jYXRlCglqc19mcmVlCglkZWFsbG9jYXRlCglqc19mcmVlX3J0CiAganNfYWxsb2NfY3h4CglhbGxvY2F0ZQoJZGVhbGxvY2F0ZQoJZGVhbGxvY2F0ZQogIGpzX2FsbG9jYXRlCiAganNfZGVhbGxvY2F0ZQogIGpzX2FsbG9jYXRvcjxUPjo6ZGVhbGxvY2F0ZQogIGpzX2RlYWxsb2NhdGUKICBqc19hbGxvY2F0b3I8VD46OmRlYWxsb2NhdGUAAAAAAAAAAFMBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					729,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/CMakeLists.txt",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABTAQAAICBqc19jbGFoZV9pbml0CiAganNfY29udG91cl9pbml0CiAganNfY3ZfaW5pdAogIGpzX2RyYXdfaW5pdAogIGpzX2xpbmVfaW5pdAogIGpzX21hdF9pbml0CiAganNfcG9pbnRfaW5pdAogIGpzX3BvaW50X2l0ZXJhdG9yX2luaXQKICBqc19yZWN0X2luaXQKICBqc19zaXplX2luaXQKICBqc19zbGljZV9pdGVyYXRvcl9pbml0CiAganNfc3ViZGl2MmRfaW5pdAogIGpzX3VtYXRfaW5pdAogIGpzX3V0aWxpdHlfaW5pdAogIGpzX3ZpZGVvX2NhcHR1cmVfaW5pdAogIGpzX2N2X2V4cG9ydAogIGpzX29wZW5jdl9pbml0CkpTX0lOSVRfTU9EVUxFCkpTX0lOSVRfTU9EVUxFCkpTX0lOSVRfTU9EVUxFAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					730,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/CMakeLists.txt",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					731,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/cmake/CheckFlags.cmake",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					732,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/cmake/FindQuickJS.cmake",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					733,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/cmake/JSBindings.cmake",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					734,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_alloc.hpp",
						"symkeys":
						[
							[
								29,
								41
							],
							[
								194,
								207
							],
							[
								265,
								283
							],
							[
								516,
								524
							],
							[
								603,
								607
							],
							[
								715,
								725
							],
							[
								756,
								762
							],
							[
								829,
								839
							],
							[
								869,
								875
							],
							[
								1028,
								1041
							],
							[
								1121,
								1129
							],
							[
								1211,
								1221
							],
							[
								1283,
								1293
							],
							[
								1367,
								1383
							],
							[
								1463,
								1471
							],
							[
								1517,
								1527
							],
							[
								1562,
								1572
							],
							[
								1603,
								1610
							],
							[
								1642,
								1652
							],
							[
								1682,
								1692
							],
							[
								1736,
								1748
							],
							[
								1827,
								1835
							],
							[
								1869,
								1870
							],
							[
								1894,
								1904
							],
							[
								1967,
								1977
							],
							[
								2123,
								2134
							],
							[
								2234,
								2247
							],
							[
								2276,
								2303
							],
							[
								2355,
								2368
							],
							[
								2396,
								2423
							]
						],
						"symlist":
						[
							"JS_ALLOC_HPP",
							"js_alloc_mmap",
							" round_to_page_size",
							" allocate",
							" mmap",
							" deallocate",
							" munmap",
							" deallocate",
							" munmap",
							"js_alloc_libc",
							" allocate",
							" deallocate",
							" deallocate",
							"js_alloc_quickjs",
							" allocate",
							" js_mallocz",
							" deallocate",
							" js_free",
							" deallocate",
							" js_free_rt",
							"js_alloc_cxx",
							" allocate",
							" T",
							" deallocate",
							" deallocate",
							"js_allocate",
							"js_deallocate",
							"js_allocator<T>::deallocate",
							"js_deallocate",
							"js_allocator<T>::deallocate"
						]
					},
					"AQAAAAAAAAAAAAAAiwEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					735,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/init_module.cpp",
						"symkeys":
						[
							[
								65,
								78
							],
							[
								121,
								136
							],
							[
								179,
								189
							],
							[
								232,
								244
							],
							[
								287,
								299
							],
							[
								342,
								353
							],
							[
								396,
								409
							],
							[
								452,
								474
							],
							[
								517,
								529
							],
							[
								572,
								584
							],
							[
								627,
								649
							],
							[
								692,
								708
							],
							[
								751,
								763
							],
							[
								806,
								821
							],
							[
								864,
								885
							],
							[
								930,
								942
							],
							[
								975,
								989
							],
							[
								1470,
								1484
							],
							[
								1514,
								1528
							],
							[
								1591,
								1605
							]
						],
						"symlist":
						[
							"js_clahe_init",
							"js_contour_init",
							"js_cv_init",
							"js_draw_init",
							"js_line_init",
							"js_mat_init",
							"js_point_init",
							"js_point_iterator_init",
							"js_rect_init",
							"js_size_init",
							"js_slice_iterator_init",
							"js_subdiv2d_init",
							"js_umat_init",
							"js_utility_init",
							"js_video_capture_init",
							"js_cv_export",
							"js_opencv_init",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACLAQAASlNfQUxMT0NfSFBQCiAganNfYWxsb2NfbW1hcAoJcm91bmRfdG9fcGFnZV9zaXplCglhbGxvY2F0ZQoJbW1hcAoJZGVhbGxvY2F0ZQoJbXVubWFwCglkZWFsbG9jYXRlCgltdW5tYXAKICBqc19hbGxvY19saWJjCglhbGxvY2F0ZQoJZGVhbGxvY2F0ZQoJZGVhbGxvY2F0ZQogIGpzX2FsbG9jX3F1aWNranMKCWFsbG9jYXRlCglqc19tYWxsb2N6CglkZWFsbG9jYXRlCglqc19mcmVlCglkZWFsbG9jYXRlCglqc19mcmVlX3J0CiAganNfYWxsb2NfY3h4CglhbGxvY2F0ZQoJZGVhbGxvY2F0ZQoJZGVhbGxvY2F0ZQogIGpzX2FsbG9jYXRlCiAganNfZGVhbGxvY2F0ZQogIGpzX2FsbG9jYXRvcjxUPjo6ZGVhbGxvY2F0ZQogIGpzX2RlYWxsb2NhdGUKICBqc19hbGxvY2F0b3I8VD46OmRlYWxsb2NhdGUAAAAAAAAAAFMBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					736,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/cmake/JSBindings.cmake",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABTAQAAICBqc19jbGFoZV9pbml0CiAganNfY29udG91cl9pbml0CiAganNfY3ZfaW5pdAogIGpzX2RyYXdfaW5pdAogIGpzX2xpbmVfaW5pdAogIGpzX21hdF9pbml0CiAganNfcG9pbnRfaW5pdAogIGpzX3BvaW50X2l0ZXJhdG9yX2luaXQKICBqc19yZWN0X2luaXQKICBqc19zaXplX2luaXQKICBqc19zbGljZV9pdGVyYXRvcl9pbml0CiAganNfc3ViZGl2MmRfaW5pdAogIGpzX3VtYXRfaW5pdAogIGpzX3V0aWxpdHlfaW5pdAogIGpzX3ZpZGVvX2NhcHR1cmVfaW5pdAogIGpzX2N2X2V4cG9ydAogIGpzX29wZW5jdl9pbml0CkpTX0lOSVRfTU9EVUxFCkpTX0lOSVRfTU9EVUxFCkpTX0lOSVRfTU9EVUxFAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					737,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/cmake/JSBindings.cmake",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					738,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_mat.cpp",
						"symkeys":
						[
							[
								1280,
								1297
							],
							[
								1411,
								1427
							],
							[
								1634,
								1646
							],
							[
								1962,
								1979
							],
							[
								2322,
								2334
							],
							[
								2957,
								2967
							],
							[
								3546,
								3557
							],
							[
								4389,
								4400
							],
							[
								4822,
								4839
							],
							[
								5342,
								5353
							],
							[
								6385,
								6398
							],
							[
								6900,
								6911
							],
							[
								7123,
								7135
							],
							[
								9523,
								9534
							],
							[
								12790,
								12801
							],
							[
								13653,
								13663
							],
							[
								13871,
								13881
							],
							[
								15447,
								15460
							],
							[
								15669,
								15678
							],
							[
								16440,
								16450
							],
							[
								19907,
								19920
							],
							[
								21695,
								21711
							],
							[
								23100,
								23115
							],
							[
								24759,
								24773
							],
							[
								25378,
								25404
							],
							[
								25911,
								25928
							],
							[
								26449,
								26463
							],
							[
								27027,
								27041
							],
							[
								28022,
								28036
							],
							[
								28598,
								28615
							],
							[
								29505,
								29516
							],
							[
								30056,
								30075
							],
							[
								30967,
								30980
							],
							[
								31751,
								31763
							],
							[
								32445,
								32456
							],
							[
								32959,
								32975
							],
							[
								34440,
								34459
							],
							[
								35543,
								35563
							],
							[
								35760,
								35780
							],
							[
								38040,
								38065
							],
							[
								38243,
								38262
							],
							[
								38660,
								38680
							],
							[
								38776,
								38796
							],
							[
								38892,
								38912
							],
							[
								39016,
								39036
							],
							[
								39132,
								39152
							],
							[
								39250,
								39270
							],
							[
								39368,
								39388
							],
							[
								39486,
								39506
							],
							[
								39602,
								39622
							],
							[
								39730,
								39750
							],
							[
								39856,
								39876
							],
							[
								39972,
								39992
							],
							[
								40096,
								40116
							],
							[
								40222,
								40236
							],
							[
								40320,
								40334
							],
							[
								40416,
								40434
							],
							[
								40523,
								40541
							],
							[
								40630,
								40648
							],
							[
								40748,
								40766
							],
							[
								40866,
								40884
							],
							[
								40977,
								40995
							],
							[
								41084,
								41102
							],
							[
								41199,
								41217
							],
							[
								41306,
								41324
							],
							[
								41417,
								41435
							],
							[
								41528,
								41546
							],
							[
								41641,
								41659
							],
							[
								41752,
								41770
							],
							[
								41872,
								41890
							],
							[
								41980,
								41998
							],
							[
								42088,
								42106
							],
							[
								42194,
								42212
							],
							[
								42302,
								42320
							],
							[
								42411,
								42429
							],
							[
								42509,
								42527
							],
							[
								42607,
								42619
							],
							[
								42704,
								42716
							],
							[
								42789,
								42801
							],
							[
								42876,
								42888
							],
							[
								42968,
								42980
							],
							[
								43068,
								43080
							],
							[
								43162,
								43174
							],
							[
								43257,
								43269
							],
							[
								43352,
								43370
							],
							[
								43474,
								43492
							],
							[
								43600,
								43618
							],
							[
								43728,
								43740
							],
							[
								43824,
								43836
							],
							[
								43926,
								43944
							],
							[
								44068,
								44088
							],
							[
								44130,
								44148
							],
							[
								44215,
								44227
							],
							[
								44336,
								44348
							],
							[
								44408,
								44426
							],
							[
								44464,
								44482
							],
							[
								44520,
								44538
							],
							[
								44576,
								44594
							],
							[
								44632,
								44650
							],
							[
								44688,
								44706
							],
							[
								44743,
								44761
							],
							[
								44799,
								44817
							],
							[
								44859,
								44877
							],
							[
								44918,
								44935
							],
							[
								44945,
								44956
							],
							[
								44997,
								45008
							],
							[
								46435,
								46448
							],
							[
								46558,
								46572
							],
							[
								46614,
								46628
							],
							[
								46700,
								46714
							]
						],
						"symlist":
						[
							"JSMatIteratorData",
							"js_mat_free_func",
							"js_mat_sizes",
							"js_mat_dimensions",
							"js_mat_track",
							"js_mat_new",
							"js_mat_wrap",
							"js_mat_data",
							"js_mat_print_data",
							"js_mat_dump",
							"js_mat_params",
							"js_mat_ctor",
							"js_mat_funcs",
							"js_mat_expr",
							"js_mat_init",
							"js_mat_get",
							"js_mat_get",
							"js_mat_get_wh",
							"js_mat_at",
							"js_mat_set",
							"js_mat_set_to",
							"js_mat_get_props",
							"js_mat_tostring",
							"js_mat_inspect",
							"js_mat_getrotationmatrix2d",
							"js_mat_convert_to",
							"js_mat_copy_to",
							"js_mat_reshape",
							"js_mat_getumat",
							"js_mat_class_func",
							"js_mat_fill",
							"js_mat_class_create",
							"js_mat_buffer",
							"js_mat_array",
							"js_mat_call",
							"js_mat_finalizer",
							"js_mat_iterator_new",
							"js_mat_iterator_dump",
							"js_mat_iterator_next",
							"js_mat_iterator_finalizer",
							"js_mat_iterator_dup",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_DEF",
							"JS_CGETSET_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_ALIAS_DEF",
							"JS_ALIAS_DEF",
							"JS_PROP_STRING_DEF",
							"JS_ITERATOR_NEXT_DEF",
							"JS_PROP_STRING_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_PROP_INT32_DEF",
							"CV_MAKETYPE",
							"js_mat_init",
							"js_mat_export",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"AQAAAAAAAAAAAAAAlAcAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					739,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_mat.cpp",
						"symkeys":
						[
							[
								1280,
								1297
							],
							[
								1411,
								1427
							],
							[
								1634,
								1646
							],
							[
								1962,
								1979
							],
							[
								2322,
								2334
							],
							[
								2957,
								2967
							],
							[
								3546,
								3557
							],
							[
								4389,
								4400
							],
							[
								4822,
								4839
							],
							[
								5342,
								5353
							],
							[
								6385,
								6398
							],
							[
								6900,
								6911
							],
							[
								7123,
								7135
							],
							[
								9523,
								9534
							],
							[
								12790,
								12801
							],
							[
								13653,
								13663
							],
							[
								13871,
								13881
							],
							[
								15447,
								15460
							],
							[
								15669,
								15678
							],
							[
								16440,
								16450
							],
							[
								19907,
								19920
							],
							[
								21695,
								21711
							],
							[
								23100,
								23115
							],
							[
								24759,
								24773
							],
							[
								25378,
								25404
							],
							[
								25911,
								25928
							],
							[
								26449,
								26463
							],
							[
								27027,
								27041
							],
							[
								28022,
								28036
							],
							[
								28598,
								28615
							],
							[
								29505,
								29516
							],
							[
								30056,
								30075
							],
							[
								30967,
								30980
							],
							[
								31751,
								31763
							],
							[
								32445,
								32456
							],
							[
								32959,
								32975
							],
							[
								34440,
								34459
							],
							[
								35543,
								35563
							],
							[
								35760,
								35780
							],
							[
								38040,
								38065
							],
							[
								38243,
								38262
							],
							[
								38660,
								38680
							],
							[
								38776,
								38796
							],
							[
								38892,
								38912
							],
							[
								39016,
								39036
							],
							[
								39132,
								39152
							],
							[
								39250,
								39270
							],
							[
								39368,
								39388
							],
							[
								39486,
								39506
							],
							[
								39602,
								39622
							],
							[
								39730,
								39750
							],
							[
								39856,
								39876
							],
							[
								39972,
								39992
							],
							[
								40096,
								40116
							],
							[
								40222,
								40236
							],
							[
								40320,
								40334
							],
							[
								40416,
								40434
							],
							[
								40523,
								40541
							],
							[
								40630,
								40648
							],
							[
								40748,
								40766
							],
							[
								40866,
								40884
							],
							[
								40977,
								40995
							],
							[
								41084,
								41102
							],
							[
								41199,
								41217
							],
							[
								41306,
								41324
							],
							[
								41417,
								41435
							],
							[
								41528,
								41546
							],
							[
								41641,
								41659
							],
							[
								41752,
								41770
							],
							[
								41872,
								41890
							],
							[
								41980,
								41998
							],
							[
								42088,
								42106
							],
							[
								42194,
								42212
							],
							[
								42302,
								42320
							],
							[
								42411,
								42429
							],
							[
								42509,
								42527
							],
							[
								42607,
								42619
							],
							[
								42704,
								42716
							],
							[
								42789,
								42801
							],
							[
								42876,
								42888
							],
							[
								42968,
								42980
							],
							[
								43068,
								43080
							],
							[
								43162,
								43174
							],
							[
								43257,
								43269
							],
							[
								43352,
								43370
							],
							[
								43474,
								43492
							],
							[
								43600,
								43618
							],
							[
								43728,
								43740
							],
							[
								43824,
								43836
							],
							[
								43926,
								43944
							],
							[
								44068,
								44088
							],
							[
								44130,
								44148
							],
							[
								44215,
								44227
							],
							[
								44336,
								44348
							],
							[
								44408,
								44426
							],
							[
								44464,
								44482
							],
							[
								44520,
								44538
							],
							[
								44576,
								44594
							],
							[
								44632,
								44650
							],
							[
								44688,
								44706
							],
							[
								44743,
								44761
							],
							[
								44799,
								44817
							],
							[
								44859,
								44877
							],
							[
								44918,
								44935
							],
							[
								44945,
								44956
							],
							[
								44997,
								45008
							],
							[
								46435,
								46448
							],
							[
								46558,
								46572
							],
							[
								46610,
								46624
							],
							[
								46677,
								46691
							]
						],
						"symlist":
						[
							"JSMatIteratorData",
							"js_mat_free_func",
							"js_mat_sizes",
							"js_mat_dimensions",
							"js_mat_track",
							"js_mat_new",
							"js_mat_wrap",
							"js_mat_data",
							"js_mat_print_data",
							"js_mat_dump",
							"js_mat_params",
							"js_mat_ctor",
							"js_mat_funcs",
							"js_mat_expr",
							"js_mat_init",
							"js_mat_get",
							"js_mat_get",
							"js_mat_get_wh",
							"js_mat_at",
							"js_mat_set",
							"js_mat_set_to",
							"js_mat_get_props",
							"js_mat_tostring",
							"js_mat_inspect",
							"js_mat_getrotationmatrix2d",
							"js_mat_convert_to",
							"js_mat_copy_to",
							"js_mat_reshape",
							"js_mat_getumat",
							"js_mat_class_func",
							"js_mat_fill",
							"js_mat_class_create",
							"js_mat_buffer",
							"js_mat_array",
							"js_mat_call",
							"js_mat_finalizer",
							"js_mat_iterator_new",
							"js_mat_iterator_dump",
							"js_mat_iterator_next",
							"js_mat_iterator_finalizer",
							"js_mat_iterator_dup",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_DEF",
							"JS_CGETSET_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_ALIAS_DEF",
							"JS_ALIAS_DEF",
							"JS_PROP_STRING_DEF",
							"JS_ITERATOR_NEXT_DEF",
							"JS_PROP_STRING_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_PROP_INT32_DEF",
							"CV_MAKETYPE",
							"js_mat_init",
							"js_mat_export",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACUBwAASlNNYXRJdGVyYXRvckRhdGEKICBqc19tYXRfZnJlZV9mdW5jCiAganNfbWF0X3NpemVzCiAganNfbWF0X2RpbWVuc2lvbnMKICBqc19tYXRfdHJhY2sKICBqc19tYXRfbmV3CiAganNfbWF0X3dyYXAKICBqc19tYXRfZGF0YQogIGpzX21hdF9wcmludF9kYXRhCiAganNfbWF0X2R1bXAKICBqc19tYXRfcGFyYW1zCiAganNfbWF0X2N0b3IKICBqc19tYXRfZnVuY3MKICBqc19tYXRfZXhwcgogIGpzX21hdF9pbml0CiAganNfbWF0X2dldAogIGpzX21hdF9nZXQKICBqc19tYXRfZ2V0X3doCiAganNfbWF0X2F0CiAganNfbWF0X3NldAogIGpzX21hdF9zZXRfdG8KICBqc19tYXRfZ2V0X3Byb3BzCiAganNfbWF0X3Rvc3RyaW5nCiAganNfbWF0X2luc3BlY3QKICBqc19tYXRfZ2V0cm90YXRpb25tYXRyaXgyZAogIGpzX21hdF9jb252ZXJ0X3RvCiAganNfbWF0X2NvcHlfdG8KICBqc19tYXRfcmVzaGFwZQogIGpzX21hdF9nZXR1bWF0CiAganNfbWF0X2NsYXNzX2Z1bmMKICBqc19tYXRfZmlsbAogIGpzX21hdF9jbGFzc19jcmVhdGUKICBqc19tYXRfYnVmZmVyCiAganNfbWF0X2FycmF5CiAganNfbWF0X2NhbGwKICBqc19tYXRfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX25ldwogIGpzX21hdF9pdGVyYXRvcl9kdW1wCiAganNfbWF0X2l0ZXJhdG9yX25leHQKICBqc19tYXRfaXRlcmF0b3JfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX2R1cApKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQUxJQVNfREVGCkpTX0FMSUFTX0RFRgpKU19QUk9QX1NUUklOR19ERUYKSlNfSVRFUkFUT1JfTkVYVF9ERUYKSlNfUFJPUF9TVFJJTkdfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfUFJPUF9JTlQzMl9ERUYKQ1ZfTUFLRVRZUEUKICBqc19tYXRfaW5pdAogIGpzX21hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAAJQHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACUBwAASlNNYXRJdGVyYXRvckRhdGEKICBqc19tYXRfZnJlZV9mdW5jCiAganNfbWF0X3NpemVzCiAganNfbWF0X2RpbWVuc2lvbnMKICBqc19tYXRfdHJhY2sKICBqc19tYXRfbmV3CiAganNfbWF0X3dyYXAKICBqc19tYXRfZGF0YQogIGpzX21hdF9wcmludF9kYXRhCiAganNfbWF0X2R1bXAKICBqc19tYXRfcGFyYW1zCiAganNfbWF0X2N0b3IKICBqc19tYXRfZnVuY3MKICBqc19tYXRfZXhwcgogIGpzX21hdF9pbml0CiAganNfbWF0X2dldAogIGpzX21hdF9nZXQKICBqc19tYXRfZ2V0X3doCiAganNfbWF0X2F0CiAganNfbWF0X3NldAogIGpzX21hdF9zZXRfdG8KICBqc19tYXRfZ2V0X3Byb3BzCiAganNfbWF0X3Rvc3RyaW5nCiAganNfbWF0X2luc3BlY3QKICBqc19tYXRfZ2V0cm90YXRpb25tYXRyaXgyZAogIGpzX21hdF9jb252ZXJ0X3RvCiAganNfbWF0X2NvcHlfdG8KICBqc19tYXRfcmVzaGFwZQogIGpzX21hdF9nZXR1bWF0CiAganNfbWF0X2NsYXNzX2Z1bmMKICBqc19tYXRfZmlsbAogIGpzX21hdF9jbGFzc19jcmVhdGUKICBqc19tYXRfYnVmZmVyCiAganNfbWF0X2FycmF5CiAganNfbWF0X2NhbGwKICBqc19tYXRfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX25ldwogIGpzX21hdF9pdGVyYXRvcl9kdW1wCiAganNfbWF0X2l0ZXJhdG9yX25leHQKICBqc19tYXRfaXRlcmF0b3JfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX2R1cApKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQUxJQVNfREVGCkpTX0FMSUFTX0RFRgpKU19QUk9QX1NUUklOR19ERUYKSlNfSVRFUkFUT1JfTkVYVF9ERUYKSlNfUFJPUF9TVFJJTkdfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfUFJPUF9JTlQzMl9ERUYKQ1ZfTUFLRVRZUEUKICBqc19tYXRfaW5pdAogIGpzX21hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAAJQHAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					740,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_mat.cpp",
						"symkeys":
						[
							[
								1280,
								1297
							],
							[
								1411,
								1427
							],
							[
								1634,
								1646
							],
							[
								1962,
								1979
							],
							[
								2322,
								2334
							],
							[
								2957,
								2967
							],
							[
								3546,
								3557
							],
							[
								4389,
								4400
							],
							[
								4822,
								4839
							],
							[
								5342,
								5353
							],
							[
								6385,
								6398
							],
							[
								6900,
								6911
							],
							[
								7123,
								7135
							],
							[
								9523,
								9534
							],
							[
								12790,
								12801
							],
							[
								13653,
								13663
							],
							[
								13871,
								13881
							],
							[
								15447,
								15460
							],
							[
								15669,
								15678
							],
							[
								16440,
								16450
							],
							[
								19907,
								19920
							],
							[
								21695,
								21711
							],
							[
								23100,
								23115
							],
							[
								24759,
								24773
							],
							[
								25378,
								25404
							],
							[
								25911,
								25928
							],
							[
								26449,
								26463
							],
							[
								27027,
								27041
							],
							[
								28022,
								28036
							],
							[
								28598,
								28615
							],
							[
								29505,
								29516
							],
							[
								30056,
								30075
							],
							[
								30967,
								30980
							],
							[
								31751,
								31763
							],
							[
								32445,
								32456
							],
							[
								32959,
								32975
							],
							[
								34440,
								34459
							],
							[
								35543,
								35563
							],
							[
								35760,
								35780
							],
							[
								38040,
								38065
							],
							[
								38243,
								38262
							],
							[
								38660,
								38680
							],
							[
								38776,
								38796
							],
							[
								38892,
								38912
							],
							[
								39016,
								39036
							],
							[
								39132,
								39152
							],
							[
								39250,
								39270
							],
							[
								39368,
								39388
							],
							[
								39486,
								39506
							],
							[
								39602,
								39622
							],
							[
								39730,
								39750
							],
							[
								39856,
								39876
							],
							[
								39972,
								39992
							],
							[
								40096,
								40116
							],
							[
								40222,
								40236
							],
							[
								40320,
								40334
							],
							[
								40416,
								40434
							],
							[
								40523,
								40541
							],
							[
								40630,
								40648
							],
							[
								40748,
								40766
							],
							[
								40866,
								40884
							],
							[
								40977,
								40995
							],
							[
								41084,
								41102
							],
							[
								41199,
								41217
							],
							[
								41306,
								41324
							],
							[
								41417,
								41435
							],
							[
								41528,
								41546
							],
							[
								41641,
								41659
							],
							[
								41752,
								41770
							],
							[
								41872,
								41890
							],
							[
								41980,
								41998
							],
							[
								42088,
								42106
							],
							[
								42194,
								42212
							],
							[
								42302,
								42320
							],
							[
								42411,
								42429
							],
							[
								42509,
								42527
							],
							[
								42607,
								42619
							],
							[
								42704,
								42716
							],
							[
								42789,
								42801
							],
							[
								42876,
								42888
							],
							[
								42968,
								42980
							],
							[
								43068,
								43080
							],
							[
								43162,
								43174
							],
							[
								43257,
								43269
							],
							[
								43352,
								43370
							],
							[
								43474,
								43492
							],
							[
								43600,
								43618
							],
							[
								43728,
								43740
							],
							[
								43824,
								43836
							],
							[
								43926,
								43944
							],
							[
								44068,
								44088
							],
							[
								44130,
								44148
							],
							[
								44215,
								44227
							],
							[
								44336,
								44348
							],
							[
								44408,
								44426
							],
							[
								44464,
								44482
							],
							[
								44520,
								44538
							],
							[
								44576,
								44594
							],
							[
								44632,
								44650
							],
							[
								44688,
								44706
							],
							[
								44743,
								44761
							],
							[
								44799,
								44817
							],
							[
								44859,
								44877
							],
							[
								44918,
								44935
							],
							[
								44945,
								44956
							],
							[
								44997,
								45008
							],
							[
								46435,
								46448
							],
							[
								46558,
								46572
							],
							[
								46610,
								46624
							],
							[
								46677,
								46691
							]
						],
						"symlist":
						[
							"JSMatIteratorData",
							"js_mat_free_func",
							"js_mat_sizes",
							"js_mat_dimensions",
							"js_mat_track",
							"js_mat_new",
							"js_mat_wrap",
							"js_mat_data",
							"js_mat_print_data",
							"js_mat_dump",
							"js_mat_params",
							"js_mat_ctor",
							"js_mat_funcs",
							"js_mat_expr",
							"js_mat_init",
							"js_mat_get",
							"js_mat_get",
							"js_mat_get_wh",
							"js_mat_at",
							"js_mat_set",
							"js_mat_set_to",
							"js_mat_get_props",
							"js_mat_tostring",
							"js_mat_inspect",
							"js_mat_getrotationmatrix2d",
							"js_mat_convert_to",
							"js_mat_copy_to",
							"js_mat_reshape",
							"js_mat_getumat",
							"js_mat_class_func",
							"js_mat_fill",
							"js_mat_class_create",
							"js_mat_buffer",
							"js_mat_array",
							"js_mat_call",
							"js_mat_finalizer",
							"js_mat_iterator_new",
							"js_mat_iterator_dump",
							"js_mat_iterator_next",
							"js_mat_iterator_finalizer",
							"js_mat_iterator_dup",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_DEF",
							"JS_CGETSET_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_ALIAS_DEF",
							"JS_ALIAS_DEF",
							"JS_PROP_STRING_DEF",
							"JS_ITERATOR_NEXT_DEF",
							"JS_PROP_STRING_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_PROP_INT32_DEF",
							"CV_MAKETYPE",
							"js_mat_init",
							"js_mat_export",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACUBwAASlNNYXRJdGVyYXRvckRhdGEKICBqc19tYXRfZnJlZV9mdW5jCiAganNfbWF0X3NpemVzCiAganNfbWF0X2RpbWVuc2lvbnMKICBqc19tYXRfdHJhY2sKICBqc19tYXRfbmV3CiAganNfbWF0X3dyYXAKICBqc19tYXRfZGF0YQogIGpzX21hdF9wcmludF9kYXRhCiAganNfbWF0X2R1bXAKICBqc19tYXRfcGFyYW1zCiAganNfbWF0X2N0b3IKICBqc19tYXRfZnVuY3MKICBqc19tYXRfZXhwcgogIGpzX21hdF9pbml0CiAganNfbWF0X2dldAogIGpzX21hdF9nZXQKICBqc19tYXRfZ2V0X3doCiAganNfbWF0X2F0CiAganNfbWF0X3NldAogIGpzX21hdF9zZXRfdG8KICBqc19tYXRfZ2V0X3Byb3BzCiAganNfbWF0X3Rvc3RyaW5nCiAganNfbWF0X2luc3BlY3QKICBqc19tYXRfZ2V0cm90YXRpb25tYXRyaXgyZAogIGpzX21hdF9jb252ZXJ0X3RvCiAganNfbWF0X2NvcHlfdG8KICBqc19tYXRfcmVzaGFwZQogIGpzX21hdF9nZXR1bWF0CiAganNfbWF0X2NsYXNzX2Z1bmMKICBqc19tYXRfZmlsbAogIGpzX21hdF9jbGFzc19jcmVhdGUKICBqc19tYXRfYnVmZmVyCiAganNfbWF0X2FycmF5CiAganNfbWF0X2NhbGwKICBqc19tYXRfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX25ldwogIGpzX21hdF9pdGVyYXRvcl9kdW1wCiAganNfbWF0X2l0ZXJhdG9yX25leHQKICBqc19tYXRfaXRlcmF0b3JfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX2R1cApKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQUxJQVNfREVGCkpTX0FMSUFTX0RFRgpKU19QUk9QX1NUUklOR19ERUYKSlNfSVRFUkFUT1JfTkVYVF9ERUYKSlNfUFJPUF9TVFJJTkdfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfUFJPUF9JTlQzMl9ERUYKQ1ZfTUFLRVRZUEUKICBqc19tYXRfaW5pdAogIGpzX21hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAAJQHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACUBwAASlNNYXRJdGVyYXRvckRhdGEKICBqc19tYXRfZnJlZV9mdW5jCiAganNfbWF0X3NpemVzCiAganNfbWF0X2RpbWVuc2lvbnMKICBqc19tYXRfdHJhY2sKICBqc19tYXRfbmV3CiAganNfbWF0X3dyYXAKICBqc19tYXRfZGF0YQogIGpzX21hdF9wcmludF9kYXRhCiAganNfbWF0X2R1bXAKICBqc19tYXRfcGFyYW1zCiAganNfbWF0X2N0b3IKICBqc19tYXRfZnVuY3MKICBqc19tYXRfZXhwcgogIGpzX21hdF9pbml0CiAganNfbWF0X2dldAogIGpzX21hdF9nZXQKICBqc19tYXRfZ2V0X3doCiAganNfbWF0X2F0CiAganNfbWF0X3NldAogIGpzX21hdF9zZXRfdG8KICBqc19tYXRfZ2V0X3Byb3BzCiAganNfbWF0X3Rvc3RyaW5nCiAganNfbWF0X2luc3BlY3QKICBqc19tYXRfZ2V0cm90YXRpb25tYXRyaXgyZAogIGpzX21hdF9jb252ZXJ0X3RvCiAganNfbWF0X2NvcHlfdG8KICBqc19tYXRfcmVzaGFwZQogIGpzX21hdF9nZXR1bWF0CiAganNfbWF0X2NsYXNzX2Z1bmMKICBqc19tYXRfZmlsbAogIGpzX21hdF9jbGFzc19jcmVhdGUKICBqc19tYXRfYnVmZmVyCiAganNfbWF0X2FycmF5CiAganNfbWF0X2NhbGwKICBqc19tYXRfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX25ldwogIGpzX21hdF9pdGVyYXRvcl9kdW1wCiAganNfbWF0X2l0ZXJhdG9yX25leHQKICBqc19tYXRfaXRlcmF0b3JfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX2R1cApKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQUxJQVNfREVGCkpTX0FMSUFTX0RFRgpKU19QUk9QX1NUUklOR19ERUYKSlNfSVRFUkFUT1JfTkVYVF9ERUYKSlNfUFJPUF9TVFJJTkdfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfUFJPUF9JTlQzMl9ERUYKQ1ZfTUFLRVRZUEUKICBqc19tYXRfaW5pdAogIGpzX21hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAAJQHAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					741,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_mat.cpp",
						"symkeys":
						[
							[
								1280,
								1297
							],
							[
								1411,
								1427
							],
							[
								1634,
								1646
							],
							[
								1962,
								1979
							],
							[
								2322,
								2334
							],
							[
								2957,
								2967
							],
							[
								3546,
								3557
							],
							[
								4389,
								4400
							],
							[
								4822,
								4839
							],
							[
								5342,
								5353
							],
							[
								6385,
								6398
							],
							[
								6900,
								6911
							],
							[
								7123,
								7135
							],
							[
								9523,
								9534
							],
							[
								12790,
								12801
							],
							[
								13653,
								13663
							],
							[
								13871,
								13881
							],
							[
								15447,
								15460
							],
							[
								15669,
								15678
							],
							[
								16440,
								16450
							],
							[
								19907,
								19920
							],
							[
								21695,
								21711
							],
							[
								23100,
								23115
							],
							[
								24759,
								24773
							],
							[
								25378,
								25404
							],
							[
								25911,
								25928
							],
							[
								26449,
								26463
							],
							[
								27027,
								27041
							],
							[
								28022,
								28036
							],
							[
								28598,
								28615
							],
							[
								29505,
								29516
							],
							[
								30056,
								30075
							],
							[
								30967,
								30980
							],
							[
								31751,
								31763
							],
							[
								32445,
								32456
							],
							[
								32959,
								32975
							],
							[
								34440,
								34459
							],
							[
								35543,
								35563
							],
							[
								35760,
								35780
							],
							[
								38040,
								38065
							],
							[
								38243,
								38262
							],
							[
								38660,
								38680
							],
							[
								38776,
								38796
							],
							[
								38892,
								38912
							],
							[
								39016,
								39036
							],
							[
								39132,
								39152
							],
							[
								39250,
								39270
							],
							[
								39368,
								39388
							],
							[
								39486,
								39506
							],
							[
								39602,
								39622
							],
							[
								39730,
								39750
							],
							[
								39856,
								39876
							],
							[
								39972,
								39992
							],
							[
								40096,
								40116
							],
							[
								40222,
								40236
							],
							[
								40320,
								40334
							],
							[
								40416,
								40434
							],
							[
								40523,
								40541
							],
							[
								40630,
								40648
							],
							[
								40748,
								40766
							],
							[
								40866,
								40884
							],
							[
								40977,
								40995
							],
							[
								41084,
								41102
							],
							[
								41199,
								41217
							],
							[
								41306,
								41324
							],
							[
								41417,
								41435
							],
							[
								41528,
								41546
							],
							[
								41641,
								41659
							],
							[
								41752,
								41770
							],
							[
								41872,
								41890
							],
							[
								41980,
								41998
							],
							[
								42088,
								42106
							],
							[
								42194,
								42212
							],
							[
								42302,
								42320
							],
							[
								42411,
								42429
							],
							[
								42509,
								42527
							],
							[
								42607,
								42619
							],
							[
								42704,
								42716
							],
							[
								42789,
								42801
							],
							[
								42876,
								42888
							],
							[
								42968,
								42980
							],
							[
								43068,
								43080
							],
							[
								43162,
								43174
							],
							[
								43257,
								43269
							],
							[
								43352,
								43370
							],
							[
								43474,
								43492
							],
							[
								43600,
								43618
							],
							[
								43728,
								43740
							],
							[
								43824,
								43836
							],
							[
								43926,
								43944
							],
							[
								44068,
								44088
							],
							[
								44130,
								44148
							],
							[
								44215,
								44227
							],
							[
								44336,
								44348
							],
							[
								44408,
								44426
							],
							[
								44464,
								44482
							],
							[
								44520,
								44538
							],
							[
								44576,
								44594
							],
							[
								44632,
								44650
							],
							[
								44688,
								44706
							],
							[
								44743,
								44761
							],
							[
								44799,
								44817
							],
							[
								44859,
								44877
							],
							[
								44918,
								44935
							],
							[
								44945,
								44956
							],
							[
								44997,
								45008
							],
							[
								46435,
								46448
							],
							[
								46558,
								46572
							],
							[
								46610,
								46624
							],
							[
								46677,
								46691
							]
						],
						"symlist":
						[
							"JSMatIteratorData",
							"js_mat_free_func",
							"js_mat_sizes",
							"js_mat_dimensions",
							"js_mat_track",
							"js_mat_new",
							"js_mat_wrap",
							"js_mat_data",
							"js_mat_print_data",
							"js_mat_dump",
							"js_mat_params",
							"js_mat_ctor",
							"js_mat_funcs",
							"js_mat_expr",
							"js_mat_init",
							"js_mat_get",
							"js_mat_get",
							"js_mat_get_wh",
							"js_mat_at",
							"js_mat_set",
							"js_mat_set_to",
							"js_mat_get_props",
							"js_mat_tostring",
							"js_mat_inspect",
							"js_mat_getrotationmatrix2d",
							"js_mat_convert_to",
							"js_mat_copy_to",
							"js_mat_reshape",
							"js_mat_getumat",
							"js_mat_class_func",
							"js_mat_fill",
							"js_mat_class_create",
							"js_mat_buffer",
							"js_mat_array",
							"js_mat_call",
							"js_mat_finalizer",
							"js_mat_iterator_new",
							"js_mat_iterator_dump",
							"js_mat_iterator_next",
							"js_mat_iterator_finalizer",
							"js_mat_iterator_dup",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_DEF",
							"JS_CGETSET_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_ALIAS_DEF",
							"JS_ALIAS_DEF",
							"JS_PROP_STRING_DEF",
							"JS_ITERATOR_NEXT_DEF",
							"JS_PROP_STRING_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_PROP_INT32_DEF",
							"CV_MAKETYPE",
							"js_mat_init",
							"js_mat_export",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACUBwAASlNNYXRJdGVyYXRvckRhdGEKICBqc19tYXRfZnJlZV9mdW5jCiAganNfbWF0X3NpemVzCiAganNfbWF0X2RpbWVuc2lvbnMKICBqc19tYXRfdHJhY2sKICBqc19tYXRfbmV3CiAganNfbWF0X3dyYXAKICBqc19tYXRfZGF0YQogIGpzX21hdF9wcmludF9kYXRhCiAganNfbWF0X2R1bXAKICBqc19tYXRfcGFyYW1zCiAganNfbWF0X2N0b3IKICBqc19tYXRfZnVuY3MKICBqc19tYXRfZXhwcgogIGpzX21hdF9pbml0CiAganNfbWF0X2dldAogIGpzX21hdF9nZXQKICBqc19tYXRfZ2V0X3doCiAganNfbWF0X2F0CiAganNfbWF0X3NldAogIGpzX21hdF9zZXRfdG8KICBqc19tYXRfZ2V0X3Byb3BzCiAganNfbWF0X3Rvc3RyaW5nCiAganNfbWF0X2luc3BlY3QKICBqc19tYXRfZ2V0cm90YXRpb25tYXRyaXgyZAogIGpzX21hdF9jb252ZXJ0X3RvCiAganNfbWF0X2NvcHlfdG8KICBqc19tYXRfcmVzaGFwZQogIGpzX21hdF9nZXR1bWF0CiAganNfbWF0X2NsYXNzX2Z1bmMKICBqc19tYXRfZmlsbAogIGpzX21hdF9jbGFzc19jcmVhdGUKICBqc19tYXRfYnVmZmVyCiAganNfbWF0X2FycmF5CiAganNfbWF0X2NhbGwKICBqc19tYXRfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX25ldwogIGpzX21hdF9pdGVyYXRvcl9kdW1wCiAganNfbWF0X2l0ZXJhdG9yX25leHQKICBqc19tYXRfaXRlcmF0b3JfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX2R1cApKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQUxJQVNfREVGCkpTX0FMSUFTX0RFRgpKU19QUk9QX1NUUklOR19ERUYKSlNfSVRFUkFUT1JfTkVYVF9ERUYKSlNfUFJPUF9TVFJJTkdfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfUFJPUF9JTlQzMl9ERUYKQ1ZfTUFLRVRZUEUKICBqc19tYXRfaW5pdAogIGpzX21hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAAJQHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACUBwAASlNNYXRJdGVyYXRvckRhdGEKICBqc19tYXRfZnJlZV9mdW5jCiAganNfbWF0X3NpemVzCiAganNfbWF0X2RpbWVuc2lvbnMKICBqc19tYXRfdHJhY2sKICBqc19tYXRfbmV3CiAganNfbWF0X3dyYXAKICBqc19tYXRfZGF0YQogIGpzX21hdF9wcmludF9kYXRhCiAganNfbWF0X2R1bXAKICBqc19tYXRfcGFyYW1zCiAganNfbWF0X2N0b3IKICBqc19tYXRfZnVuY3MKICBqc19tYXRfZXhwcgogIGpzX21hdF9pbml0CiAganNfbWF0X2dldAogIGpzX21hdF9nZXQKICBqc19tYXRfZ2V0X3doCiAganNfbWF0X2F0CiAganNfbWF0X3NldAogIGpzX21hdF9zZXRfdG8KICBqc19tYXRfZ2V0X3Byb3BzCiAganNfbWF0X3Rvc3RyaW5nCiAganNfbWF0X2luc3BlY3QKICBqc19tYXRfZ2V0cm90YXRpb25tYXRyaXgyZAogIGpzX21hdF9jb252ZXJ0X3RvCiAganNfbWF0X2NvcHlfdG8KICBqc19tYXRfcmVzaGFwZQogIGpzX21hdF9nZXR1bWF0CiAganNfbWF0X2NsYXNzX2Z1bmMKICBqc19tYXRfZmlsbAogIGpzX21hdF9jbGFzc19jcmVhdGUKICBqc19tYXRfYnVmZmVyCiAganNfbWF0X2FycmF5CiAganNfbWF0X2NhbGwKICBqc19tYXRfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX25ldwogIGpzX21hdF9pdGVyYXRvcl9kdW1wCiAganNfbWF0X2l0ZXJhdG9yX25leHQKICBqc19tYXRfaXRlcmF0b3JfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX2R1cApKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQUxJQVNfREVGCkpTX0FMSUFTX0RFRgpKU19QUk9QX1NUUklOR19ERUYKSlNfSVRFUkFUT1JfTkVYVF9ERUYKSlNfUFJPUF9TVFJJTkdfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfUFJPUF9JTlQzMl9ERUYKQ1ZfTUFLRVRZUEUKICBqc19tYXRfaW5pdAogIGpzX21hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAAJQHAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					742,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_umat.cpp",
						"symkeys":
						[
							[
								978,
								995
							],
							[
								1105,
								1123
							],
							[
								1223,
								1235
							],
							[
								1384,
								1397
							],
							[
								1719,
								1737
							],
							[
								2133,
								2145
							],
							[
								2574,
								2592
							],
							[
								3097,
								3109
							],
							[
								4122,
								4133
							],
							[
								4764,
								4778
							],
							[
								5280,
								5292
							],
							[
								5496,
								5513
							],
							[
								5738,
								5751
							],
							[
								7573,
								7585
							],
							[
								8457,
								8468
							],
							[
								8684,
								8695
							],
							[
								10070,
								10084
							],
							[
								10299,
								10309
							],
							[
								11105,
								11116
							],
							[
								11824,
								11837
							],
							[
								12080,
								12095
							],
							[
								12194,
								12210
							],
							[
								12307,
								12319
							],
							[
								12515,
								12533
							],
							[
								12995,
								13013
							],
							[
								13489,
								13507
							],
							[
								14188,
								14206
							],
							[
								14545,
								14554
							],
							[
								14632,
								14646
							],
							[
								15222,
								15239
							],
							[
								16246,
								16262
							],
							[
								17946,
								17961
							],
							[
								19318,
								19336
							],
							[
								19864,
								19879
							],
							[
								20404,
								20419
							],
							[
								21436,
								21450
							],
							[
								21889,
								21901
							],
							[
								22462,
								22482
							],
							[
								23382,
								23396
							],
							[
								23854,
								23867
							],
							[
								24813,
								24825
							],
							[
								25507,
								25527
							],
							[
								25577,
								25597
							],
							[
								25647,
								25667
							],
							[
								25725,
								25745
							],
							[
								25795,
								25815
							],
							[
								25867,
								25887
							],
							[
								25939,
								25959
							],
							[
								26011,
								26031
							],
							[
								26081,
								26101
							],
							[
								26163,
								26183
							],
							[
								26243,
								26263
							],
							[
								26313,
								26333
							],
							[
								26391,
								26411
							],
							[
								26471,
								26485
							],
							[
								26523,
								26537
							],
							[
								26573,
								26591
							],
							[
								26634,
								26652
							],
							[
								26695,
								26713
							],
							[
								26767,
								26785
							],
							[
								26839,
								26857
							],
							[
								26904,
								26922
							],
							[
								26965,
								26983
							],
							[
								27034,
								27052
							],
							[
								27095,
								27113
							],
							[
								27160,
								27178
							],
							[
								27225,
								27243
							],
							[
								27290,
								27308
							],
							[
								27365,
								27383
							],
							[
								27417,
								27435
							],
							[
								27469,
								27481
							],
							[
								27520,
								27532
							],
							[
								27569,
								27581
							],
							[
								27608,
								27620
							],
							[
								27649,
								27661
							],
							[
								27695,
								27707
							],
							[
								27749,
								27761
							],
							[
								27797,
								27809
							],
							[
								27846,
								27858
							],
							[
								27893,
								27905
							],
							[
								27948,
								27966
							],
							[
								28084,
								28102
							],
							[
								28145,
								28163
							],
							[
								28205,
								28222
							],
							[
								28232,
								28243
							],
							[
								28284,
								28296
							],
							[
								29306,
								29320
							],
							[
								29432,
								29446
							],
							[
								29488,
								29502
							],
							[
								29575,
								29589
							]
						],
						"symlist":
						[
							"js_umat_free_func",
							"JSUMatIteratorData",
							"js_umat_data",
							"js_umat_sizes",
							"js_umat_dimensions",
							"js_umat_data",
							"js_umat_print_data",
							"js_umat_dump",
							"js_umat_new",
							"js_umat_params",
							"js_umat_ctor",
							"js_umat_finalizer",
							"js_umat_funcs",
							"js_umat_init",
							"js_umat_get",
							"js_umat_get",
							"js_umat_get_wh",
							"js_umat_at",
							"js_umat_set",
							"mat_at<float>",
							"mat_at<uint8_t>",
							"mat_at<uint16_t>",
							"mat_at<uint>",
							"js_umat_vector_get",
							"js_umat_vector_get",
							"js_umat_vector_get",
							"js_umat_set_vector",
							"mat_at<T>",
							"js_umat_set_to",
							"js_umat_get_props",
							"js_umat_tostring",
							"js_umat_inspect",
							"js_umat_convert_to",
							"js_umat_copy_to",
							"js_umat_reshape",
							"js_umat_getmat",
							"js_umat_fill",
							"js_umat_class_create",
							"js_umat_buffer",
							"js_umat_array",
							"js_umat_call",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_DEF",
							"JS_CGETSET_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_ALIAS_DEF",
							"JS_PROP_STRING_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_PROP_INT32_DEF",
							"CV_MAKETYPE",
							"js_umat_init",
							"js_umat_export",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACUBwAASlNNYXRJdGVyYXRvckRhdGEKICBqc19tYXRfZnJlZV9mdW5jCiAganNfbWF0X3NpemVzCiAganNfbWF0X2RpbWVuc2lvbnMKICBqc19tYXRfdHJhY2sKICBqc19tYXRfbmV3CiAganNfbWF0X3dyYXAKICBqc19tYXRfZGF0YQogIGpzX21hdF9wcmludF9kYXRhCiAganNfbWF0X2R1bXAKICBqc19tYXRfcGFyYW1zCiAganNfbWF0X2N0b3IKICBqc19tYXRfZnVuY3MKICBqc19tYXRfZXhwcgogIGpzX21hdF9pbml0CiAganNfbWF0X2dldAogIGpzX21hdF9nZXQKICBqc19tYXRfZ2V0X3doCiAganNfbWF0X2F0CiAganNfbWF0X3NldAogIGpzX21hdF9zZXRfdG8KICBqc19tYXRfZ2V0X3Byb3BzCiAganNfbWF0X3Rvc3RyaW5nCiAganNfbWF0X2luc3BlY3QKICBqc19tYXRfZ2V0cm90YXRpb25tYXRyaXgyZAogIGpzX21hdF9jb252ZXJ0X3RvCiAganNfbWF0X2NvcHlfdG8KICBqc19tYXRfcmVzaGFwZQogIGpzX21hdF9nZXR1bWF0CiAganNfbWF0X2NsYXNzX2Z1bmMKICBqc19tYXRfZmlsbAogIGpzX21hdF9jbGFzc19jcmVhdGUKICBqc19tYXRfYnVmZmVyCiAganNfbWF0X2FycmF5CiAganNfbWF0X2NhbGwKICBqc19tYXRfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX25ldwogIGpzX21hdF9pdGVyYXRvcl9kdW1wCiAganNfbWF0X2l0ZXJhdG9yX25leHQKICBqc19tYXRfaXRlcmF0b3JfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX2R1cApKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQUxJQVNfREVGCkpTX0FMSUFTX0RFRgpKU19QUk9QX1NUUklOR19ERUYKSlNfSVRFUkFUT1JfTkVYVF9ERUYKSlNfUFJPUF9TVFJJTkdfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfUFJPUF9JTlQzMl9ERUYKQ1ZfTUFLRVRZUEUKICBqc19tYXRfaW5pdAogIGpzX21hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAACMGAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					743,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_umat.cpp",
						"symkeys":
						[
							[
								978,
								995
							],
							[
								1105,
								1123
							],
							[
								1223,
								1235
							],
							[
								1384,
								1397
							],
							[
								1719,
								1737
							],
							[
								2133,
								2145
							],
							[
								2574,
								2592
							],
							[
								3097,
								3109
							],
							[
								4122,
								4133
							],
							[
								4764,
								4778
							],
							[
								5280,
								5292
							],
							[
								5496,
								5513
							],
							[
								5738,
								5751
							],
							[
								7573,
								7585
							],
							[
								8457,
								8468
							],
							[
								8684,
								8695
							],
							[
								10070,
								10084
							],
							[
								10299,
								10309
							],
							[
								11105,
								11116
							],
							[
								11824,
								11837
							],
							[
								12080,
								12095
							],
							[
								12194,
								12210
							],
							[
								12307,
								12319
							],
							[
								12515,
								12533
							],
							[
								12995,
								13013
							],
							[
								13489,
								13507
							],
							[
								14188,
								14206
							],
							[
								14545,
								14554
							],
							[
								14632,
								14646
							],
							[
								15222,
								15239
							],
							[
								16246,
								16262
							],
							[
								17946,
								17961
							],
							[
								19318,
								19336
							],
							[
								19864,
								19879
							],
							[
								20404,
								20419
							],
							[
								21436,
								21450
							],
							[
								21889,
								21901
							],
							[
								22462,
								22482
							],
							[
								23382,
								23396
							],
							[
								23854,
								23867
							],
							[
								24813,
								24825
							],
							[
								25507,
								25527
							],
							[
								25577,
								25597
							],
							[
								25647,
								25667
							],
							[
								25725,
								25745
							],
							[
								25795,
								25815
							],
							[
								25867,
								25887
							],
							[
								25939,
								25959
							],
							[
								26011,
								26031
							],
							[
								26081,
								26101
							],
							[
								26163,
								26183
							],
							[
								26243,
								26263
							],
							[
								26313,
								26333
							],
							[
								26391,
								26411
							],
							[
								26471,
								26485
							],
							[
								26523,
								26537
							],
							[
								26573,
								26591
							],
							[
								26634,
								26652
							],
							[
								26695,
								26713
							],
							[
								26767,
								26785
							],
							[
								26839,
								26857
							],
							[
								26904,
								26922
							],
							[
								26965,
								26983
							],
							[
								27034,
								27052
							],
							[
								27095,
								27113
							],
							[
								27160,
								27178
							],
							[
								27225,
								27243
							],
							[
								27290,
								27308
							],
							[
								27365,
								27383
							],
							[
								27417,
								27435
							],
							[
								27469,
								27481
							],
							[
								27520,
								27532
							],
							[
								27569,
								27581
							],
							[
								27608,
								27620
							],
							[
								27649,
								27661
							],
							[
								27695,
								27707
							],
							[
								27749,
								27761
							],
							[
								27797,
								27809
							],
							[
								27846,
								27858
							],
							[
								27893,
								27905
							],
							[
								27948,
								27966
							],
							[
								28084,
								28102
							],
							[
								28145,
								28163
							],
							[
								28205,
								28222
							],
							[
								28232,
								28243
							],
							[
								28284,
								28296
							],
							[
								29306,
								29320
							],
							[
								29432,
								29446
							],
							[
								29484,
								29498
							],
							[
								29553,
								29567
							]
						],
						"symlist":
						[
							"js_umat_free_func",
							"JSUMatIteratorData",
							"js_umat_data",
							"js_umat_sizes",
							"js_umat_dimensions",
							"js_umat_data",
							"js_umat_print_data",
							"js_umat_dump",
							"js_umat_new",
							"js_umat_params",
							"js_umat_ctor",
							"js_umat_finalizer",
							"js_umat_funcs",
							"js_umat_init",
							"js_umat_get",
							"js_umat_get",
							"js_umat_get_wh",
							"js_umat_at",
							"js_umat_set",
							"mat_at<float>",
							"mat_at<uint8_t>",
							"mat_at<uint16_t>",
							"mat_at<uint>",
							"js_umat_vector_get",
							"js_umat_vector_get",
							"js_umat_vector_get",
							"js_umat_set_vector",
							"mat_at<T>",
							"js_umat_set_to",
							"js_umat_get_props",
							"js_umat_tostring",
							"js_umat_inspect",
							"js_umat_convert_to",
							"js_umat_copy_to",
							"js_umat_reshape",
							"js_umat_getmat",
							"js_umat_fill",
							"js_umat_class_create",
							"js_umat_buffer",
							"js_umat_array",
							"js_umat_call",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_DEF",
							"JS_CGETSET_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_ALIAS_DEF",
							"JS_PROP_STRING_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_PROP_INT32_DEF",
							"CV_MAKETYPE",
							"js_umat_init",
							"js_umat_export",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAAjBgAAICBqc191bWF0X2ZyZWVfZnVuYwpKU1VNYXRJdGVyYXRvckRhdGEKICBqc191bWF0X2RhdGEKICBqc191bWF0X3NpemVzCiAganNfdW1hdF9kaW1lbnNpb25zCiAganNfdW1hdF9kYXRhCiAganNfdW1hdF9wcmludF9kYXRhCiAganNfdW1hdF9kdW1wCiAganNfdW1hdF9uZXcKICBqc191bWF0X3BhcmFtcwogIGpzX3VtYXRfY3RvcgogIGpzX3VtYXRfZmluYWxpemVyCiAganNfdW1hdF9mdW5jcwogIGpzX3VtYXRfaW5pdAogIGpzX3VtYXRfZ2V0CiAganNfdW1hdF9nZXQKICBqc191bWF0X2dldF93aAogIGpzX3VtYXRfYXQKICBqc191bWF0X3NldAogIG1hdF9hdDxmbG9hdD4KICBtYXRfYXQ8dWludDhfdD4KICBtYXRfYXQ8dWludDE2X3Q+CiAgbWF0X2F0PHVpbnQ+CiAganNfdW1hdF92ZWN0b3JfZ2V0CiAganNfdW1hdF92ZWN0b3JfZ2V0CiAganNfdW1hdF92ZWN0b3JfZ2V0CiAganNfdW1hdF9zZXRfdmVjdG9yCiAgbWF0X2F0PFQ+CiAganNfdW1hdF9zZXRfdG8KICBqc191bWF0X2dldF9wcm9wcwogIGpzX3VtYXRfdG9zdHJpbmcKICBqc191bWF0X2luc3BlY3QKICBqc191bWF0X2NvbnZlcnRfdG8KICBqc191bWF0X2NvcHlfdG8KICBqc191bWF0X3Jlc2hhcGUKICBqc191bWF0X2dldG1hdAogIGpzX3VtYXRfZmlsbAogIGpzX3VtYXRfY2xhc3NfY3JlYXRlCiAganNfdW1hdF9idWZmZXIKICBqc191bWF0X2FycmF5CiAganNfdW1hdF9jYWxsCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfREVGCkpTX0NHRVRTRVRfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQUxJQVNfREVGCkpTX1BST1BfU1RSSU5HX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX1BST1BfSU5UMzJfREVGCkNWX01BS0VUWVBFCiAganNfdW1hdF9pbml0CiAganNfdW1hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAACMGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjBgAAICBqc191bWF0X2ZyZWVfZnVuYwpKU1VNYXRJdGVyYXRvckRhdGEKICBqc191bWF0X2RhdGEKICBqc191bWF0X3NpemVzCiAganNfdW1hdF9kaW1lbnNpb25zCiAganNfdW1hdF9kYXRhCiAganNfdW1hdF9wcmludF9kYXRhCiAganNfdW1hdF9kdW1wCiAganNfdW1hdF9uZXcKICBqc191bWF0X3BhcmFtcwogIGpzX3VtYXRfY3RvcgogIGpzX3VtYXRfZmluYWxpemVyCiAganNfdW1hdF9mdW5jcwogIGpzX3VtYXRfaW5pdAogIGpzX3VtYXRfZ2V0CiAganNfdW1hdF9nZXQKICBqc191bWF0X2dldF93aAogIGpzX3VtYXRfYXQKICBqc191bWF0X3NldAogIG1hdF9hdDxmbG9hdD4KICBtYXRfYXQ8dWludDhfdD4KICBtYXRfYXQ8dWludDE2X3Q+CiAgbWF0X2F0PHVpbnQ+CiAganNfdW1hdF92ZWN0b3JfZ2V0CiAganNfdW1hdF92ZWN0b3JfZ2V0CiAganNfdW1hdF92ZWN0b3JfZ2V0CiAganNfdW1hdF9zZXRfdmVjdG9yCiAgbWF0X2F0PFQ+CiAganNfdW1hdF9zZXRfdG8KICBqc191bWF0X2dldF9wcm9wcwogIGpzX3VtYXRfdG9zdHJpbmcKICBqc191bWF0X2luc3BlY3QKICBqc191bWF0X2NvbnZlcnRfdG8KICBqc191bWF0X2NvcHlfdG8KICBqc191bWF0X3Jlc2hhcGUKICBqc191bWF0X2dldG1hdAogIGpzX3VtYXRfZmlsbAogIGpzX3VtYXRfY2xhc3NfY3JlYXRlCiAganNfdW1hdF9idWZmZXIKICBqc191bWF0X2FycmF5CiAganNfdW1hdF9jYWxsCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfREVGCkpTX0NHRVRTRVRfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQUxJQVNfREVGCkpTX1BST1BfU1RSSU5HX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX1BST1BfSU5UMzJfREVGCkNWX01BS0VUWVBFCiAganNfdW1hdF9pbml0CiAganNfdW1hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAACMGAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					744,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_size.cpp",
						"symkeys":
						[
							[
								386,
								397
							],
							[
								798,
								809
							],
							[
								1321,
								1333
							],
							[
								2341,
								2353
							],
							[
								2494,
								2505
							],
							[
								3008,
								3019
							],
							[
								3411,
								3423
							],
							[
								3538,
								3549
							],
							[
								3881,
								3898
							],
							[
								4341,
								4358
							],
							[
								4743,
								4758
							],
							[
								5168,
								5181
							],
							[
								6883,
								6894
							],
							[
								7463,
								7474
							],
							[
								8043,
								8054
							],
							[
								8359,
								8370
							],
							[
								9297,
								9320
							],
							[
								9714,
								9726
							],
							[
								10249,
								10271
							],
							[
								10403,
								10420
							],
							[
								10800,
								10825
							],
							[
								10917,
								10942
							],
							[
								11035,
								11060
							],
							[
								11143,
								11168
							],
							[
								11250,
								11275
							],
							[
								11356,
								11374
							],
							[
								11459,
								11477
							],
							[
								11561,
								11579
							],
							[
								11666,
								11684
							],
							[
								11770,
								11788
							],
							[
								11875,
								11893
							],
							[
								11981,
								11999
							],
							[
								12087,
								12105
							],
							[
								12194,
								12206
							],
							[
								12294,
								12306
							],
							[
								12394,
								12406
							],
							[
								12483,
								12495
							],
							[
								12572,
								12584
							],
							[
								12661,
								12673
							],
							[
								12750,
								12762
							],
							[
								12837,
								12849
							],
							[
								12952,
								12970
							],
							[
								13081,
								13093
							],
							[
								13126,
								13138
							],
							[
								14086,
								14100
							],
							[
								14181,
								14200
							],
							[
								14414,
								14428
							],
							[
								14470,
								14484
							],
							[
								14549,
								14563
							]
						],
						"symlist":
						[
							"js_size_fit",
							"js_size_fit",
							"js_size_ctor",
							"js_size_data",
							"js_size_get",
							"js_size_new",
							"js_size_wrap",
							"js_size_set",
							"js_size_to_string",
							"js_size_to_source",
							"js_size_inspect",
							"js_size_funcs",
							"js_size_add",
							"js_size_sub",
							"js_size_mul",
							"js_size_div",
							"js_size_symbol_iterator",
							"js_size_from",
							"js_array_to<double, 2>",
							"js_size_finalizer",
							"JS_CGETSET_ENUMERABLE_DEF",
							"JS_CGETSET_ENUMERABLE_DEF",
							"JS_CGETSET_ENUMERABLE_DEF",
							"JS_CGETSET_ENUMERABLE_DEF",
							"JS_CGETSET_ENUMERABLE_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_ALIAS_DEF",
							"JS_CFUNC_DEF",
							"JS_PROP_STRING_DEF",
							"JS_CFUNC_DEF",
							"js_size_init",
							"js_size_export",
							"js_size_constructor",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAjBgAAICBqc191bWF0X2ZyZWVfZnVuYwpKU1VNYXRJdGVyYXRvckRhdGEKICBqc191bWF0X2RhdGEKICBqc191bWF0X3NpemVzCiAganNfdW1hdF9kaW1lbnNpb25zCiAganNfdW1hdF9kYXRhCiAganNfdW1hdF9wcmludF9kYXRhCiAganNfdW1hdF9kdW1wCiAganNfdW1hdF9uZXcKICBqc191bWF0X3BhcmFtcwogIGpzX3VtYXRfY3RvcgogIGpzX3VtYXRfZmluYWxpemVyCiAganNfdW1hdF9mdW5jcwogIGpzX3VtYXRfaW5pdAogIGpzX3VtYXRfZ2V0CiAganNfdW1hdF9nZXQKICBqc191bWF0X2dldF93aAogIGpzX3VtYXRfYXQKICBqc191bWF0X3NldAogIG1hdF9hdDxmbG9hdD4KICBtYXRfYXQ8dWludDhfdD4KICBtYXRfYXQ8dWludDE2X3Q+CiAgbWF0X2F0PHVpbnQ+CiAganNfdW1hdF92ZWN0b3JfZ2V0CiAganNfdW1hdF92ZWN0b3JfZ2V0CiAganNfdW1hdF92ZWN0b3JfZ2V0CiAganNfdW1hdF9zZXRfdmVjdG9yCiAgbWF0X2F0PFQ+CiAganNfdW1hdF9zZXRfdG8KICBqc191bWF0X2dldF9wcm9wcwogIGpzX3VtYXRfdG9zdHJpbmcKICBqc191bWF0X2luc3BlY3QKICBqc191bWF0X2NvbnZlcnRfdG8KICBqc191bWF0X2NvcHlfdG8KICBqc191bWF0X3Jlc2hhcGUKICBqc191bWF0X2dldG1hdAogIGpzX3VtYXRfZmlsbAogIGpzX3VtYXRfY2xhc3NfY3JlYXRlCiAganNfdW1hdF9idWZmZXIKICBqc191bWF0X2FycmF5CiAganNfdW1hdF9jYWxsCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfTUFHSUNfREVGCkpTX0NHRVRTRVRfREVGCkpTX0NHRVRTRVRfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQUxJQVNfREVGCkpTX1BST1BfU1RSSU5HX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX1BST1BfSU5UMzJfREVGCkNWX01BS0VUWVBFCiAganNfdW1hdF9pbml0CiAganNfdW1hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAAE8DAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					745,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_line.cpp",
						"symkeys":
						[
							[
								488,
								499
							],
							[
								923,
								935
							],
							[
								2135,
								2147
							],
							[
								2288,
								2304
							],
							[
								2826,
								2840
							],
							[
								3257,
								3268
							],
							[
								4128,
								4139
							],
							[
								4743,
								4759
							],
							[
								5257,
								5271
							],
							[
								5741,
								5755
							],
							[
								6034,
								6049
							],
							[
								6634,
								6649
							],
							[
								8489,
								8504
							],
							[
								8778,
								8792
							],
							[
								9045,
								9062
							],
							[
								9076,
								9093
							],
							[
								9108,
								9128
							],
							[
								9142,
								9159
							],
							[
								9181,
								9197
							],
							[
								9886,
								9898
							],
							[
								10605,
								10622
							],
							[
								11016,
								11041
							],
							[
								11092,
								11117
							],
							[
								11168,
								11193
							],
							[
								11244,
								11269
							],
							[
								11320,
								11340
							],
							[
								11386,
								11406
							],
							[
								11452,
								11472
							],
							[
								11518,
								11538
							],
							[
								11584,
								11604
							],
							[
								11647,
								11667
							],
							[
								11710,
								11730
							],
							[
								11775,
								11795
							],
							[
								11848,
								11868
							],
							[
								11915,
								11933
							],
							[
								11980,
								11998
							],
							[
								12041,
								12059
							],
							[
								12116,
								12134
							],
							[
								12208,
								12226
							],
							[
								12281,
								12293
							],
							[
								12330,
								12348
							],
							[
								12406,
								12424
							],
							[
								12502,
								12520
							],
							[
								12599,
								12611
							],
							[
								12635,
								12647
							],
							[
								12666,
								12678
							],
							[
								12715,
								12733
							],
							[
								12846,
								12858
							],
							[
								12891,
								12903
							],
							[
								13767,
								13781
							],
							[
								13862,
								13881
							],
							[
								14095,
								14109
							],
							[
								14147,
								14161
							],
							[
								14203,
								14217
							]
						],
						"symlist":
						[
							"js_line_new",
							"js_line_ctor",
							"js_line_data",
							"js_line_get_xy12",
							"js_line_get_ab",
							"js_line_get",
							"js_line_set",
							"js_line_set_xy12",
							"js_line_set_ab",
							"js_line_points",
							"js_line_inspect",
							"js_line_methods",
							"js_line_toarray",
							"js_call_method",
							"JS_LINE_AS_POINTS",
							"JS_LINE_AS_VECTOR",
							"JS_LINE_GET_ITERATOR",
							"JS_LINE_TO_STRING",
							"js_line_iterator",
							"js_line_from",
							"js_line_finalizer",
							"JS_CGETSET_ENUMERABLE_DEF",
							"JS_CGETSET_ENUMERABLE_DEF",
							"JS_CGETSET_ENUMERABLE_DEF",
							"JS_CGETSET_ENUMERABLE_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_ALIAS_DEF",
							"JS_ALIAS_DEF",
							"JS_ALIAS_DEF",
							"JS_PROP_STRING_DEF",
							"JS_CFUNC_DEF",
							"js_line_init",
							"js_line_export",
							"js_line_constructor",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABPAwAAICBqc19zaXplX2ZpdAogIGpzX3NpemVfZml0CiAganNfc2l6ZV9jdG9yCiAganNfc2l6ZV9kYXRhCiAganNfc2l6ZV9nZXQKICBqc19zaXplX25ldwogIGpzX3NpemVfd3JhcAogIGpzX3NpemVfc2V0CiAganNfc2l6ZV90b19zdHJpbmcKICBqc19zaXplX3RvX3NvdXJjZQogIGpzX3NpemVfaW5zcGVjdAogIGpzX3NpemVfZnVuY3MKICBqc19zaXplX2FkZAogIGpzX3NpemVfc3ViCiAganNfc2l6ZV9tdWwKICBqc19zaXplX2RpdgogIGpzX3NpemVfc3ltYm9sX2l0ZXJhdG9yCiAganNfc2l6ZV9mcm9tCiAganNfYXJyYXlfdG88ZG91YmxlLCAyPgogIGpzX3NpemVfZmluYWxpemVyCkpTX0NHRVRTRVRfRU5VTUVSQUJMRV9ERUYKSlNfQ0dFVFNFVF9FTlVNRVJBQkxFX0RFRgpKU19DR0VUU0VUX0VOVU1FUkFCTEVfREVGCkpTX0NHRVRTRVRfRU5VTUVSQUJMRV9ERUYKSlNfQ0dFVFNFVF9FTlVNRVJBQkxFX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0FMSUFTX0RFRgpKU19DRlVOQ19ERUYKSlNfUFJPUF9TVFJJTkdfREVGCkpTX0NGVU5DX0RFRgogIGpzX3NpemVfaW5pdAogIGpzX3NpemVfZXhwb3J0CiAganNfc2l6ZV9jb25zdHJ1Y3RvcgpKU19JTklUX01PRFVMRQpKU19JTklUX01PRFVMRQpKU19JTklUX01PRFVMRQAAAAAAAAAA3AMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					746,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_draw.cpp",
						"symkeys":
						[
							[
								297,
								309
							],
							[
								470,
								484
							],
							[
								1780,
								1795
							],
							[
								3143,
								3159
							],
							[
								4019,
								4037
							],
							[
								4747,
								4759
							],
							[
								5854,
								5869
							],
							[
								7106,
								7118
							],
							[
								8372,
								8383
							],
							[
								10069,
								10085
							],
							[
								11603,
								11632
							],
							[
								12047,
								12059
							],
							[
								12638,
								12656
							],
							[
								12774,
								12786
							],
							[
								12822,
								12834
							],
							[
								12872,
								12884
							],
							[
								12924,
								12936
							],
							[
								12968,
								12980
							],
							[
								13018,
								13030
							],
							[
								13062,
								13074
							],
							[
								13105,
								13117
							],
							[
								13157,
								13169
							],
							[
								13233,
								13245
							],
							[
								13339,
								13351
							],
							[
								13391,
								13403
							],
							[
								13445,
								13457
							],
							[
								13493,
								13505
							],
							[
								13547,
								13559
							],
							[
								13595,
								13607
							],
							[
								13641,
								13653
							],
							[
								13696,
								13708
							],
							[
								13775,
								13787
							],
							[
								13838,
								13850
							],
							[
								14373,
								14385
							],
							[
								15372,
								15386
							],
							[
								15585,
								15599
							],
							[
								15637,
								15651
							],
							[
								15693,
								15707
							],
							[
								15894,
								15913
							]
						],
						"symlist":
						[
							"js_draw_init",
							"js_draw_circle",
							"js_draw_contour",
							"js_draw_contours",
							"js_point_read<int>",
							"js_draw_line",
							"js_draw_polygon",
							"js_draw_rect",
							"js_put_text",
							"js_get_text_size",
							"js_get_font_scale_from_height",
							"js_load_font",
							"JS_PROP_STRING_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"js_draw_ctor",
							"js_draw_init",
							"js_draw_export",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"js_draw_constructor"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADcAwAAICBqc19saW5lX25ldwogIGpzX2xpbmVfY3RvcgogIGpzX2xpbmVfZGF0YQogIGpzX2xpbmVfZ2V0X3h5MTIKICBqc19saW5lX2dldF9hYgogIGpzX2xpbmVfZ2V0CiAganNfbGluZV9zZXQKICBqc19saW5lX3NldF94eTEyCiAganNfbGluZV9zZXRfYWIKICBqc19saW5lX3BvaW50cwogIGpzX2xpbmVfaW5zcGVjdAogIGpzX2xpbmVfbWV0aG9kcwogIGpzX2xpbmVfdG9hcnJheQogIGpzX2NhbGxfbWV0aG9kCkpTX0xJTkVfQVNfUE9JTlRTCkpTX0xJTkVfQVNfVkVDVE9SCkpTX0xJTkVfR0VUX0lURVJBVE9SCkpTX0xJTkVfVE9fU1RSSU5HCiAganNfbGluZV9pdGVyYXRvcgogIGpzX2xpbmVfZnJvbQogIGpzX2xpbmVfZmluYWxpemVyCkpTX0NHRVRTRVRfRU5VTUVSQUJMRV9ERUYKSlNfQ0dFVFNFVF9FTlVNRVJBQkxFX0RFRgpKU19DR0VUU0VUX0VOVU1FUkFCTEVfREVGCkpTX0NHRVRTRVRfRU5VTUVSQUJMRV9ERUYKSlNfQ0dFVFNFVF9NQUdJQ19ERUYKSlNfQ0dFVFNFVF9NQUdJQ19ERUYKSlNfQ0dFVFNFVF9NQUdJQ19ERUYKSlNfQ0dFVFNFVF9NQUdJQ19ERUYKSlNfQ0dFVFNFVF9NQUdJQ19ERUYKSlNfQ0dFVFNFVF9NQUdJQ19ERUYKSlNfQ0dFVFNFVF9NQUdJQ19ERUYKSlNfQ0dFVFNFVF9NQUdJQ19ERUYKSlNfQ0dFVFNFVF9NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQUxJQVNfREVGCkpTX0FMSUFTX0RFRgpKU19BTElBU19ERUYKSlNfUFJPUF9TVFJJTkdfREVGCkpTX0NGVU5DX0RFRgogIGpzX2xpbmVfaW5pdAogIGpzX2xpbmVfZXhwb3J0CiAganNfbGluZV9jb25zdHJ1Y3RvcgpKU19JTklUX01PRFVMRQpKU19JTklUX01PRFVMRQpKU19JTklUX01PRFVMRQAAAAAAAAAAVQIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					747,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_mat.cpp",
						"symkeys":
						[
							[
								1280,
								1297
							],
							[
								1411,
								1427
							],
							[
								1634,
								1646
							],
							[
								1962,
								1979
							],
							[
								2322,
								2334
							],
							[
								2957,
								2967
							],
							[
								3546,
								3557
							],
							[
								4389,
								4400
							],
							[
								4822,
								4839
							],
							[
								5342,
								5353
							],
							[
								6385,
								6398
							],
							[
								6900,
								6911
							],
							[
								7123,
								7135
							],
							[
								9523,
								9534
							],
							[
								12790,
								12801
							],
							[
								13653,
								13663
							],
							[
								13871,
								13881
							],
							[
								15447,
								15460
							],
							[
								15669,
								15678
							],
							[
								16440,
								16450
							],
							[
								19907,
								19920
							],
							[
								21695,
								21711
							],
							[
								23100,
								23115
							],
							[
								24759,
								24773
							],
							[
								25378,
								25404
							],
							[
								25911,
								25928
							],
							[
								26449,
								26463
							],
							[
								27027,
								27041
							],
							[
								28022,
								28036
							],
							[
								28598,
								28615
							],
							[
								29505,
								29516
							],
							[
								30056,
								30075
							],
							[
								30967,
								30980
							],
							[
								31751,
								31763
							],
							[
								32445,
								32456
							],
							[
								32959,
								32975
							],
							[
								34440,
								34459
							],
							[
								35543,
								35563
							],
							[
								35760,
								35780
							],
							[
								38040,
								38065
							],
							[
								38243,
								38262
							],
							[
								38660,
								38680
							],
							[
								38776,
								38796
							],
							[
								38892,
								38912
							],
							[
								39016,
								39036
							],
							[
								39132,
								39152
							],
							[
								39250,
								39270
							],
							[
								39368,
								39388
							],
							[
								39486,
								39506
							],
							[
								39602,
								39622
							],
							[
								39730,
								39750
							],
							[
								39856,
								39876
							],
							[
								39972,
								39992
							],
							[
								40096,
								40116
							],
							[
								40222,
								40236
							],
							[
								40320,
								40334
							],
							[
								40416,
								40434
							],
							[
								40523,
								40541
							],
							[
								40630,
								40648
							],
							[
								40748,
								40766
							],
							[
								40866,
								40884
							],
							[
								40977,
								40995
							],
							[
								41084,
								41102
							],
							[
								41199,
								41217
							],
							[
								41306,
								41324
							],
							[
								41417,
								41435
							],
							[
								41528,
								41546
							],
							[
								41641,
								41659
							],
							[
								41752,
								41770
							],
							[
								41872,
								41890
							],
							[
								41980,
								41998
							],
							[
								42088,
								42106
							],
							[
								42194,
								42212
							],
							[
								42302,
								42320
							],
							[
								42411,
								42429
							],
							[
								42509,
								42527
							],
							[
								42607,
								42619
							],
							[
								42704,
								42716
							],
							[
								42789,
								42801
							],
							[
								42876,
								42888
							],
							[
								42968,
								42980
							],
							[
								43068,
								43080
							],
							[
								43162,
								43174
							],
							[
								43257,
								43269
							],
							[
								43352,
								43370
							],
							[
								43474,
								43492
							],
							[
								43600,
								43618
							],
							[
								43728,
								43740
							],
							[
								43824,
								43836
							],
							[
								43926,
								43944
							],
							[
								44068,
								44088
							],
							[
								44130,
								44148
							],
							[
								44215,
								44227
							],
							[
								44336,
								44348
							],
							[
								44408,
								44426
							],
							[
								44464,
								44482
							],
							[
								44520,
								44538
							],
							[
								44576,
								44594
							],
							[
								44632,
								44650
							],
							[
								44688,
								44706
							],
							[
								44743,
								44761
							],
							[
								44799,
								44817
							],
							[
								44859,
								44877
							],
							[
								44918,
								44935
							],
							[
								44945,
								44956
							],
							[
								44997,
								45008
							],
							[
								46435,
								46448
							],
							[
								46558,
								46572
							],
							[
								46610,
								46624
							],
							[
								46676,
								46690
							]
						],
						"symlist":
						[
							"JSMatIteratorData",
							"js_mat_free_func",
							"js_mat_sizes",
							"js_mat_dimensions",
							"js_mat_track",
							"js_mat_new",
							"js_mat_wrap",
							"js_mat_data",
							"js_mat_print_data",
							"js_mat_dump",
							"js_mat_params",
							"js_mat_ctor",
							"js_mat_funcs",
							"js_mat_expr",
							"js_mat_init",
							"js_mat_get",
							"js_mat_get",
							"js_mat_get_wh",
							"js_mat_at",
							"js_mat_set",
							"js_mat_set_to",
							"js_mat_get_props",
							"js_mat_tostring",
							"js_mat_inspect",
							"js_mat_getrotationmatrix2d",
							"js_mat_convert_to",
							"js_mat_copy_to",
							"js_mat_reshape",
							"js_mat_getumat",
							"js_mat_class_func",
							"js_mat_fill",
							"js_mat_class_create",
							"js_mat_buffer",
							"js_mat_array",
							"js_mat_call",
							"js_mat_finalizer",
							"js_mat_iterator_new",
							"js_mat_iterator_dump",
							"js_mat_iterator_next",
							"js_mat_iterator_finalizer",
							"js_mat_iterator_dup",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_DEF",
							"JS_CGETSET_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_ALIAS_DEF",
							"JS_ALIAS_DEF",
							"JS_PROP_STRING_DEF",
							"JS_ITERATOR_NEXT_DEF",
							"JS_PROP_STRING_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_PROP_INT32_DEF",
							"CV_MAKETYPE",
							"js_mat_init",
							"js_mat_export",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABVAgAAICBqc19kcmF3X2luaXQKICBqc19kcmF3X2NpcmNsZQogIGpzX2RyYXdfY29udG91cgogIGpzX2RyYXdfY29udG91cnMKICBqc19wb2ludF9yZWFkPGludD4KICBqc19kcmF3X2xpbmUKICBqc19kcmF3X3BvbHlnb24KICBqc19kcmF3X3JlY3QKICBqc19wdXRfdGV4dAogIGpzX2dldF90ZXh0X3NpemUKICBqc19nZXRfZm9udF9zY2FsZV9mcm9tX2hlaWdodAogIGpzX2xvYWRfZm9udApKU19QUk9QX1NUUklOR19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCiAganNfZHJhd19jdG9yCiAganNfZHJhd19pbml0CiAganNfZHJhd19leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKICBqc19kcmF3X2NvbnN0cnVjdG9yAAAAAAAAAACUBwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					756,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_mat.cpp",
						"symkeys":
						[
							[
								1280,
								1297
							],
							[
								1411,
								1427
							],
							[
								1634,
								1646
							],
							[
								1962,
								1979
							],
							[
								2322,
								2334
							],
							[
								2957,
								2967
							],
							[
								3546,
								3557
							],
							[
								4389,
								4400
							],
							[
								4822,
								4839
							],
							[
								5342,
								5353
							],
							[
								6385,
								6398
							],
							[
								6900,
								6911
							],
							[
								7123,
								7135
							],
							[
								9523,
								9534
							],
							[
								12790,
								12801
							],
							[
								13653,
								13663
							],
							[
								13871,
								13881
							],
							[
								15447,
								15460
							],
							[
								15669,
								15678
							],
							[
								16440,
								16450
							],
							[
								19907,
								19920
							],
							[
								21695,
								21711
							],
							[
								23100,
								23115
							],
							[
								24759,
								24773
							],
							[
								25378,
								25404
							],
							[
								25911,
								25928
							],
							[
								26449,
								26463
							],
							[
								27070,
								27084
							],
							[
								28065,
								28079
							],
							[
								28641,
								28658
							],
							[
								29548,
								29559
							],
							[
								30099,
								30118
							],
							[
								31010,
								31023
							],
							[
								31794,
								31806
							],
							[
								32488,
								32499
							],
							[
								33002,
								33018
							],
							[
								34483,
								34502
							],
							[
								35586,
								35606
							],
							[
								35803,
								35823
							],
							[
								38083,
								38108
							],
							[
								38286,
								38305
							],
							[
								38703,
								38723
							],
							[
								38819,
								38839
							],
							[
								38935,
								38955
							],
							[
								39059,
								39079
							],
							[
								39175,
								39195
							],
							[
								39293,
								39313
							],
							[
								39411,
								39431
							],
							[
								39529,
								39549
							],
							[
								39645,
								39665
							],
							[
								39773,
								39793
							],
							[
								39899,
								39919
							],
							[
								40015,
								40035
							],
							[
								40139,
								40159
							],
							[
								40265,
								40279
							],
							[
								40363,
								40377
							],
							[
								40459,
								40477
							],
							[
								40566,
								40584
							],
							[
								40673,
								40691
							],
							[
								40791,
								40809
							],
							[
								40909,
								40927
							],
							[
								41020,
								41038
							],
							[
								41127,
								41145
							],
							[
								41242,
								41260
							],
							[
								41349,
								41367
							],
							[
								41460,
								41478
							],
							[
								41571,
								41589
							],
							[
								41684,
								41702
							],
							[
								41795,
								41813
							],
							[
								41915,
								41933
							],
							[
								42023,
								42041
							],
							[
								42131,
								42149
							],
							[
								42237,
								42255
							],
							[
								42345,
								42363
							],
							[
								42454,
								42472
							],
							[
								42552,
								42570
							],
							[
								42650,
								42662
							],
							[
								42747,
								42759
							],
							[
								42832,
								42844
							],
							[
								42919,
								42931
							],
							[
								43011,
								43023
							],
							[
								43111,
								43123
							],
							[
								43205,
								43217
							],
							[
								43300,
								43312
							],
							[
								43395,
								43413
							],
							[
								43517,
								43535
							],
							[
								43643,
								43661
							],
							[
								43771,
								43783
							],
							[
								43867,
								43879
							],
							[
								43969,
								43987
							],
							[
								44111,
								44131
							],
							[
								44173,
								44191
							],
							[
								44258,
								44270
							],
							[
								44379,
								44391
							],
							[
								44451,
								44469
							],
							[
								44507,
								44525
							],
							[
								44563,
								44581
							],
							[
								44619,
								44637
							],
							[
								44675,
								44693
							],
							[
								44731,
								44749
							],
							[
								44786,
								44804
							],
							[
								44842,
								44860
							],
							[
								44902,
								44920
							],
							[
								44961,
								44978
							],
							[
								44988,
								44999
							],
							[
								45040,
								45051
							],
							[
								46478,
								46491
							],
							[
								46601,
								46615
							],
							[
								46653,
								46667
							],
							[
								46719,
								46733
							]
						],
						"symlist":
						[
							"JSMatIteratorData",
							"js_mat_free_func",
							"js_mat_sizes",
							"js_mat_dimensions",
							"js_mat_track",
							"js_mat_new",
							"js_mat_wrap",
							"js_mat_data",
							"js_mat_print_data",
							"js_mat_dump",
							"js_mat_params",
							"js_mat_ctor",
							"js_mat_funcs",
							"js_mat_expr",
							"js_mat_init",
							"js_mat_get",
							"js_mat_get",
							"js_mat_get_wh",
							"js_mat_at",
							"js_mat_set",
							"js_mat_set_to",
							"js_mat_get_props",
							"js_mat_tostring",
							"js_mat_inspect",
							"js_mat_getrotationmatrix2d",
							"js_mat_convert_to",
							"js_mat_copy_to",
							"js_mat_reshape",
							"js_mat_getumat",
							"js_mat_class_func",
							"js_mat_fill",
							"js_mat_class_create",
							"js_mat_buffer",
							"js_mat_array",
							"js_mat_call",
							"js_mat_finalizer",
							"js_mat_iterator_new",
							"js_mat_iterator_dump",
							"js_mat_iterator_next",
							"js_mat_iterator_finalizer",
							"js_mat_iterator_dup",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_DEF",
							"JS_CGETSET_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_ALIAS_DEF",
							"JS_ALIAS_DEF",
							"JS_PROP_STRING_DEF",
							"JS_ITERATOR_NEXT_DEF",
							"JS_PROP_STRING_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_PROP_INT32_DEF",
							"CV_MAKETYPE",
							"js_mat_init",
							"js_mat_export",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACUBwAASlNNYXRJdGVyYXRvckRhdGEKICBqc19tYXRfZnJlZV9mdW5jCiAganNfbWF0X3NpemVzCiAganNfbWF0X2RpbWVuc2lvbnMKICBqc19tYXRfdHJhY2sKICBqc19tYXRfbmV3CiAganNfbWF0X3dyYXAKICBqc19tYXRfZGF0YQogIGpzX21hdF9wcmludF9kYXRhCiAganNfbWF0X2R1bXAKICBqc19tYXRfcGFyYW1zCiAganNfbWF0X2N0b3IKICBqc19tYXRfZnVuY3MKICBqc19tYXRfZXhwcgogIGpzX21hdF9pbml0CiAganNfbWF0X2dldAogIGpzX21hdF9nZXQKICBqc19tYXRfZ2V0X3doCiAganNfbWF0X2F0CiAganNfbWF0X3NldAogIGpzX21hdF9zZXRfdG8KICBqc19tYXRfZ2V0X3Byb3BzCiAganNfbWF0X3Rvc3RyaW5nCiAganNfbWF0X2luc3BlY3QKICBqc19tYXRfZ2V0cm90YXRpb25tYXRyaXgyZAogIGpzX21hdF9jb252ZXJ0X3RvCiAganNfbWF0X2NvcHlfdG8KICBqc19tYXRfcmVzaGFwZQogIGpzX21hdF9nZXR1bWF0CiAganNfbWF0X2NsYXNzX2Z1bmMKICBqc19tYXRfZmlsbAogIGpzX21hdF9jbGFzc19jcmVhdGUKICBqc19tYXRfYnVmZmVyCiAganNfbWF0X2FycmF5CiAganNfbWF0X2NhbGwKICBqc19tYXRfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX25ldwogIGpzX21hdF9pdGVyYXRvcl9kdW1wCiAganNfbWF0X2l0ZXJhdG9yX25leHQKICBqc19tYXRfaXRlcmF0b3JfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX2R1cApKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQUxJQVNfREVGCkpTX0FMSUFTX0RFRgpKU19QUk9QX1NUUklOR19ERUYKSlNfSVRFUkFUT1JfTkVYVF9ERUYKSlNfUFJPUF9TVFJJTkdfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfUFJPUF9JTlQzMl9ERUYKQ1ZfTUFLRVRZUEUKICBqc19tYXRfaW5pdAogIGpzX21hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAAJQHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgEAAAAAAAClAQAAAAAAAAAAAAAAAPC/"
				],
				[
					757,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_mat.cpp",
						"symkeys":
						[
							[
								1280,
								1297
							],
							[
								1411,
								1427
							],
							[
								1634,
								1646
							],
							[
								1962,
								1979
							],
							[
								2322,
								2334
							],
							[
								2957,
								2967
							],
							[
								3546,
								3557
							],
							[
								4389,
								4400
							],
							[
								4822,
								4839
							],
							[
								5342,
								5353
							],
							[
								6385,
								6398
							],
							[
								6900,
								6911
							],
							[
								7123,
								7135
							],
							[
								9523,
								9534
							],
							[
								12790,
								12801
							],
							[
								13653,
								13663
							],
							[
								13871,
								13881
							],
							[
								15447,
								15460
							],
							[
								15669,
								15678
							],
							[
								16440,
								16450
							],
							[
								19907,
								19920
							],
							[
								21695,
								21711
							],
							[
								23100,
								23115
							],
							[
								24759,
								24773
							],
							[
								25378,
								25404
							],
							[
								25911,
								25928
							],
							[
								26449,
								26463
							],
							[
								27074,
								27088
							],
							[
								28069,
								28083
							],
							[
								28645,
								28662
							],
							[
								29552,
								29563
							],
							[
								30103,
								30122
							],
							[
								31014,
								31027
							],
							[
								31798,
								31810
							],
							[
								32492,
								32503
							],
							[
								33006,
								33022
							],
							[
								34487,
								34506
							],
							[
								35590,
								35610
							],
							[
								35807,
								35827
							],
							[
								38087,
								38112
							],
							[
								38290,
								38309
							],
							[
								38707,
								38727
							],
							[
								38823,
								38843
							],
							[
								38939,
								38959
							],
							[
								39063,
								39083
							],
							[
								39179,
								39199
							],
							[
								39297,
								39317
							],
							[
								39415,
								39435
							],
							[
								39533,
								39553
							],
							[
								39649,
								39669
							],
							[
								39777,
								39797
							],
							[
								39903,
								39923
							],
							[
								40019,
								40039
							],
							[
								40143,
								40163
							],
							[
								40269,
								40283
							],
							[
								40367,
								40381
							],
							[
								40463,
								40481
							],
							[
								40570,
								40588
							],
							[
								40677,
								40695
							],
							[
								40795,
								40813
							],
							[
								40913,
								40931
							],
							[
								41024,
								41042
							],
							[
								41131,
								41149
							],
							[
								41246,
								41264
							],
							[
								41353,
								41371
							],
							[
								41464,
								41482
							],
							[
								41575,
								41593
							],
							[
								41688,
								41706
							],
							[
								41799,
								41817
							],
							[
								41919,
								41937
							],
							[
								42027,
								42045
							],
							[
								42135,
								42153
							],
							[
								42241,
								42259
							],
							[
								42349,
								42367
							],
							[
								42458,
								42476
							],
							[
								42556,
								42574
							],
							[
								42654,
								42666
							],
							[
								42751,
								42763
							],
							[
								42836,
								42848
							],
							[
								42923,
								42935
							],
							[
								43015,
								43027
							],
							[
								43115,
								43127
							],
							[
								43209,
								43221
							],
							[
								43304,
								43316
							],
							[
								43399,
								43417
							],
							[
								43521,
								43539
							],
							[
								43647,
								43665
							],
							[
								43775,
								43787
							],
							[
								43871,
								43883
							],
							[
								43973,
								43991
							],
							[
								44115,
								44135
							],
							[
								44177,
								44195
							],
							[
								44262,
								44274
							],
							[
								44383,
								44395
							],
							[
								44455,
								44473
							],
							[
								44511,
								44529
							],
							[
								44567,
								44585
							],
							[
								44623,
								44641
							],
							[
								44679,
								44697
							],
							[
								44735,
								44753
							],
							[
								44790,
								44808
							],
							[
								44846,
								44864
							],
							[
								44906,
								44924
							],
							[
								44965,
								44982
							],
							[
								44992,
								45003
							],
							[
								45044,
								45055
							],
							[
								46482,
								46495
							],
							[
								46605,
								46619
							],
							[
								46657,
								46671
							],
							[
								46723,
								46737
							]
						],
						"symlist":
						[
							"JSMatIteratorData",
							"js_mat_free_func",
							"js_mat_sizes",
							"js_mat_dimensions",
							"js_mat_track",
							"js_mat_new",
							"js_mat_wrap",
							"js_mat_data",
							"js_mat_print_data",
							"js_mat_dump",
							"js_mat_params",
							"js_mat_ctor",
							"js_mat_funcs",
							"js_mat_expr",
							"js_mat_init",
							"js_mat_get",
							"js_mat_get",
							"js_mat_get_wh",
							"js_mat_at",
							"js_mat_set",
							"js_mat_set_to",
							"js_mat_get_props",
							"js_mat_tostring",
							"js_mat_inspect",
							"js_mat_getrotationmatrix2d",
							"js_mat_convert_to",
							"js_mat_copy_to",
							"js_mat_reshape",
							"js_mat_getumat",
							"js_mat_class_func",
							"js_mat_fill",
							"js_mat_class_create",
							"js_mat_buffer",
							"js_mat_array",
							"js_mat_call",
							"js_mat_finalizer",
							"js_mat_iterator_new",
							"js_mat_iterator_dump",
							"js_mat_iterator_next",
							"js_mat_iterator_finalizer",
							"js_mat_iterator_dup",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_DEF",
							"JS_CGETSET_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_ALIAS_DEF",
							"JS_ALIAS_DEF",
							"JS_PROP_STRING_DEF",
							"JS_ITERATOR_NEXT_DEF",
							"JS_PROP_STRING_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_PROP_INT32_DEF",
							"CV_MAKETYPE",
							"js_mat_init",
							"js_mat_export",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACUBwAASlNNYXRJdGVyYXRvckRhdGEKICBqc19tYXRfZnJlZV9mdW5jCiAganNfbWF0X3NpemVzCiAganNfbWF0X2RpbWVuc2lvbnMKICBqc19tYXRfdHJhY2sKICBqc19tYXRfbmV3CiAganNfbWF0X3dyYXAKICBqc19tYXRfZGF0YQogIGpzX21hdF9wcmludF9kYXRhCiAganNfbWF0X2R1bXAKICBqc19tYXRfcGFyYW1zCiAganNfbWF0X2N0b3IKICBqc19tYXRfZnVuY3MKICBqc19tYXRfZXhwcgogIGpzX21hdF9pbml0CiAganNfbWF0X2dldAogIGpzX21hdF9nZXQKICBqc19tYXRfZ2V0X3doCiAganNfbWF0X2F0CiAganNfbWF0X3NldAogIGpzX21hdF9zZXRfdG8KICBqc19tYXRfZ2V0X3Byb3BzCiAganNfbWF0X3Rvc3RyaW5nCiAganNfbWF0X2luc3BlY3QKICBqc19tYXRfZ2V0cm90YXRpb25tYXRyaXgyZAogIGpzX21hdF9jb252ZXJ0X3RvCiAganNfbWF0X2NvcHlfdG8KICBqc19tYXRfcmVzaGFwZQogIGpzX21hdF9nZXR1bWF0CiAganNfbWF0X2NsYXNzX2Z1bmMKICBqc19tYXRfZmlsbAogIGpzX21hdF9jbGFzc19jcmVhdGUKICBqc19tYXRfYnVmZmVyCiAganNfbWF0X2FycmF5CiAganNfbWF0X2NhbGwKICBqc19tYXRfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX25ldwogIGpzX21hdF9pdGVyYXRvcl9kdW1wCiAganNfbWF0X2l0ZXJhdG9yX25leHQKICBqc19tYXRfaXRlcmF0b3JfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX2R1cApKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQUxJQVNfREVGCkpTX0FMSUFTX0RFRgpKU19QUk9QX1NUUklOR19ERUYKSlNfSVRFUkFUT1JfTkVYVF9ERUYKSlNfUFJPUF9TVFJJTkdfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfUFJPUF9JTlQzMl9ERUYKQ1ZfTUFLRVRZUEUKICBqc19tYXRfaW5pdAogIGpzX21hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAAJQHAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					758,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_mat.cpp",
						"symkeys":
						[
							[
								1280,
								1297
							],
							[
								1411,
								1427
							],
							[
								1634,
								1646
							],
							[
								1962,
								1979
							],
							[
								2322,
								2334
							],
							[
								2957,
								2967
							],
							[
								3546,
								3557
							],
							[
								4389,
								4400
							],
							[
								4822,
								4839
							],
							[
								5342,
								5353
							],
							[
								6385,
								6398
							],
							[
								6900,
								6911
							],
							[
								7123,
								7135
							],
							[
								9523,
								9534
							],
							[
								12790,
								12801
							],
							[
								13653,
								13663
							],
							[
								13871,
								13881
							],
							[
								15447,
								15460
							],
							[
								15669,
								15678
							],
							[
								16440,
								16450
							],
							[
								19907,
								19920
							],
							[
								21695,
								21711
							],
							[
								23100,
								23115
							],
							[
								24759,
								24773
							],
							[
								25378,
								25404
							],
							[
								25911,
								25928
							],
							[
								26449,
								26463
							],
							[
								27144,
								27158
							],
							[
								28139,
								28153
							],
							[
								28715,
								28732
							],
							[
								29622,
								29633
							],
							[
								30173,
								30192
							],
							[
								31084,
								31097
							],
							[
								31868,
								31880
							],
							[
								32562,
								32573
							],
							[
								33076,
								33092
							],
							[
								34557,
								34576
							],
							[
								35660,
								35680
							],
							[
								35877,
								35897
							],
							[
								38157,
								38182
							],
							[
								38360,
								38379
							],
							[
								38777,
								38797
							],
							[
								38893,
								38913
							],
							[
								39009,
								39029
							],
							[
								39133,
								39153
							],
							[
								39249,
								39269
							],
							[
								39367,
								39387
							],
							[
								39485,
								39505
							],
							[
								39603,
								39623
							],
							[
								39719,
								39739
							],
							[
								39847,
								39867
							],
							[
								39973,
								39993
							],
							[
								40089,
								40109
							],
							[
								40213,
								40233
							],
							[
								40339,
								40353
							],
							[
								40437,
								40451
							],
							[
								40533,
								40551
							],
							[
								40640,
								40658
							],
							[
								40747,
								40765
							],
							[
								40865,
								40883
							],
							[
								40983,
								41001
							],
							[
								41094,
								41112
							],
							[
								41201,
								41219
							],
							[
								41316,
								41334
							],
							[
								41423,
								41441
							],
							[
								41534,
								41552
							],
							[
								41645,
								41663
							],
							[
								41758,
								41776
							],
							[
								41869,
								41887
							],
							[
								41989,
								42007
							],
							[
								42097,
								42115
							],
							[
								42205,
								42223
							],
							[
								42311,
								42329
							],
							[
								42419,
								42437
							],
							[
								42528,
								42546
							],
							[
								42626,
								42644
							],
							[
								42724,
								42736
							],
							[
								42821,
								42833
							],
							[
								42906,
								42918
							],
							[
								42993,
								43005
							],
							[
								43085,
								43097
							],
							[
								43185,
								43197
							],
							[
								43279,
								43291
							],
							[
								43374,
								43386
							],
							[
								43469,
								43487
							],
							[
								43591,
								43609
							],
							[
								43717,
								43735
							],
							[
								43845,
								43857
							],
							[
								43941,
								43953
							],
							[
								44043,
								44061
							],
							[
								44185,
								44205
							],
							[
								44247,
								44265
							],
							[
								44332,
								44344
							],
							[
								44453,
								44465
							],
							[
								44525,
								44543
							],
							[
								44581,
								44599
							],
							[
								44637,
								44655
							],
							[
								44693,
								44711
							],
							[
								44749,
								44767
							],
							[
								44805,
								44823
							],
							[
								44860,
								44878
							],
							[
								44916,
								44934
							],
							[
								44976,
								44994
							],
							[
								45035,
								45052
							],
							[
								45062,
								45073
							],
							[
								45114,
								45125
							],
							[
								46552,
								46565
							],
							[
								46675,
								46689
							],
							[
								46727,
								46741
							],
							[
								46793,
								46807
							]
						],
						"symlist":
						[
							"JSMatIteratorData",
							"js_mat_free_func",
							"js_mat_sizes",
							"js_mat_dimensions",
							"js_mat_track",
							"js_mat_new",
							"js_mat_wrap",
							"js_mat_data",
							"js_mat_print_data",
							"js_mat_dump",
							"js_mat_params",
							"js_mat_ctor",
							"js_mat_funcs",
							"js_mat_expr",
							"js_mat_init",
							"js_mat_get",
							"js_mat_get",
							"js_mat_get_wh",
							"js_mat_at",
							"js_mat_set",
							"js_mat_set_to",
							"js_mat_get_props",
							"js_mat_tostring",
							"js_mat_inspect",
							"js_mat_getrotationmatrix2d",
							"js_mat_convert_to",
							"js_mat_copy_to",
							"js_mat_reshape",
							"js_mat_getumat",
							"js_mat_class_func",
							"js_mat_fill",
							"js_mat_class_create",
							"js_mat_buffer",
							"js_mat_array",
							"js_mat_call",
							"js_mat_finalizer",
							"js_mat_iterator_new",
							"js_mat_iterator_dump",
							"js_mat_iterator_next",
							"js_mat_iterator_finalizer",
							"js_mat_iterator_dup",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_DEF",
							"JS_CGETSET_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_ALIAS_DEF",
							"JS_ALIAS_DEF",
							"JS_PROP_STRING_DEF",
							"JS_ITERATOR_NEXT_DEF",
							"JS_PROP_STRING_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_PROP_INT32_DEF",
							"CV_MAKETYPE",
							"js_mat_init",
							"js_mat_export",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACUBwAASlNNYXRJdGVyYXRvckRhdGEKICBqc19tYXRfZnJlZV9mdW5jCiAganNfbWF0X3NpemVzCiAganNfbWF0X2RpbWVuc2lvbnMKICBqc19tYXRfdHJhY2sKICBqc19tYXRfbmV3CiAganNfbWF0X3dyYXAKICBqc19tYXRfZGF0YQogIGpzX21hdF9wcmludF9kYXRhCiAganNfbWF0X2R1bXAKICBqc19tYXRfcGFyYW1zCiAganNfbWF0X2N0b3IKICBqc19tYXRfZnVuY3MKICBqc19tYXRfZXhwcgogIGpzX21hdF9pbml0CiAganNfbWF0X2dldAogIGpzX21hdF9nZXQKICBqc19tYXRfZ2V0X3doCiAganNfbWF0X2F0CiAganNfbWF0X3NldAogIGpzX21hdF9zZXRfdG8KICBqc19tYXRfZ2V0X3Byb3BzCiAganNfbWF0X3Rvc3RyaW5nCiAganNfbWF0X2luc3BlY3QKICBqc19tYXRfZ2V0cm90YXRpb25tYXRyaXgyZAogIGpzX21hdF9jb252ZXJ0X3RvCiAganNfbWF0X2NvcHlfdG8KICBqc19tYXRfcmVzaGFwZQogIGpzX21hdF9nZXR1bWF0CiAganNfbWF0X2NsYXNzX2Z1bmMKICBqc19tYXRfZmlsbAogIGpzX21hdF9jbGFzc19jcmVhdGUKICBqc19tYXRfYnVmZmVyCiAganNfbWF0X2FycmF5CiAganNfbWF0X2NhbGwKICBqc19tYXRfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX25ldwogIGpzX21hdF9pdGVyYXRvcl9kdW1wCiAganNfbWF0X2l0ZXJhdG9yX25leHQKICBqc19tYXRfaXRlcmF0b3JfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX2R1cApKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQUxJQVNfREVGCkpTX0FMSUFTX0RFRgpKU19QUk9QX1NUUklOR19ERUYKSlNfSVRFUkFUT1JfTkVYVF9ERUYKSlNfUFJPUF9TVFJJTkdfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfUFJPUF9JTlQzMl9ERUYKQ1ZfTUFLRVRZUEUKICBqc19tYXRfaW5pdAogIGpzX21hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAAJQHAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					759,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_mat.cpp",
						"symkeys":
						[
							[
								1280,
								1297
							],
							[
								1411,
								1427
							],
							[
								1634,
								1646
							],
							[
								1962,
								1979
							],
							[
								2322,
								2334
							],
							[
								2957,
								2967
							],
							[
								3546,
								3557
							],
							[
								4389,
								4400
							],
							[
								4822,
								4839
							],
							[
								5342,
								5353
							],
							[
								6385,
								6398
							],
							[
								6900,
								6911
							],
							[
								7123,
								7135
							],
							[
								9523,
								9534
							],
							[
								12790,
								12801
							],
							[
								13653,
								13663
							],
							[
								13871,
								13881
							],
							[
								15447,
								15460
							],
							[
								15669,
								15678
							],
							[
								16440,
								16450
							],
							[
								19907,
								19920
							],
							[
								21695,
								21711
							],
							[
								23100,
								23115
							],
							[
								24759,
								24773
							],
							[
								25378,
								25404
							],
							[
								25911,
								25928
							],
							[
								26449,
								26463
							],
							[
								27155,
								27169
							],
							[
								28150,
								28164
							],
							[
								28726,
								28743
							],
							[
								29633,
								29644
							],
							[
								30184,
								30203
							],
							[
								31095,
								31108
							],
							[
								31879,
								31891
							],
							[
								32573,
								32584
							],
							[
								33087,
								33103
							],
							[
								34568,
								34587
							],
							[
								35671,
								35691
							],
							[
								35888,
								35908
							],
							[
								38168,
								38193
							],
							[
								38371,
								38390
							],
							[
								38788,
								38808
							],
							[
								38904,
								38924
							],
							[
								39020,
								39040
							],
							[
								39144,
								39164
							],
							[
								39260,
								39280
							],
							[
								39378,
								39398
							],
							[
								39496,
								39516
							],
							[
								39614,
								39634
							],
							[
								39730,
								39750
							],
							[
								39858,
								39878
							],
							[
								39984,
								40004
							],
							[
								40100,
								40120
							],
							[
								40224,
								40244
							],
							[
								40350,
								40364
							],
							[
								40448,
								40462
							],
							[
								40544,
								40562
							],
							[
								40651,
								40669
							],
							[
								40758,
								40776
							],
							[
								40876,
								40894
							],
							[
								40994,
								41012
							],
							[
								41105,
								41123
							],
							[
								41212,
								41230
							],
							[
								41327,
								41345
							],
							[
								41434,
								41452
							],
							[
								41545,
								41563
							],
							[
								41656,
								41674
							],
							[
								41769,
								41787
							],
							[
								41880,
								41898
							],
							[
								42000,
								42018
							],
							[
								42108,
								42126
							],
							[
								42216,
								42234
							],
							[
								42322,
								42340
							],
							[
								42430,
								42448
							],
							[
								42539,
								42557
							],
							[
								42637,
								42655
							],
							[
								42735,
								42747
							],
							[
								42832,
								42844
							],
							[
								42917,
								42929
							],
							[
								43004,
								43016
							],
							[
								43096,
								43108
							],
							[
								43196,
								43208
							],
							[
								43290,
								43302
							],
							[
								43385,
								43397
							],
							[
								43480,
								43498
							],
							[
								43602,
								43620
							],
							[
								43728,
								43746
							],
							[
								43856,
								43868
							],
							[
								43952,
								43964
							],
							[
								44054,
								44072
							],
							[
								44196,
								44216
							],
							[
								44258,
								44276
							],
							[
								44343,
								44355
							],
							[
								44464,
								44476
							],
							[
								44536,
								44554
							],
							[
								44592,
								44610
							],
							[
								44648,
								44666
							],
							[
								44704,
								44722
							],
							[
								44760,
								44778
							],
							[
								44816,
								44834
							],
							[
								44871,
								44889
							],
							[
								44927,
								44945
							],
							[
								44987,
								45005
							],
							[
								45046,
								45063
							],
							[
								45073,
								45084
							],
							[
								45125,
								45136
							],
							[
								46563,
								46576
							],
							[
								46686,
								46700
							],
							[
								46738,
								46752
							],
							[
								46804,
								46818
							]
						],
						"symlist":
						[
							"JSMatIteratorData",
							"js_mat_free_func",
							"js_mat_sizes",
							"js_mat_dimensions",
							"js_mat_track",
							"js_mat_new",
							"js_mat_wrap",
							"js_mat_data",
							"js_mat_print_data",
							"js_mat_dump",
							"js_mat_params",
							"js_mat_ctor",
							"js_mat_funcs",
							"js_mat_expr",
							"js_mat_init",
							"js_mat_get",
							"js_mat_get",
							"js_mat_get_wh",
							"js_mat_at",
							"js_mat_set",
							"js_mat_set_to",
							"js_mat_get_props",
							"js_mat_tostring",
							"js_mat_inspect",
							"js_mat_getrotationmatrix2d",
							"js_mat_convert_to",
							"js_mat_copy_to",
							"js_mat_reshape",
							"js_mat_getumat",
							"js_mat_class_func",
							"js_mat_fill",
							"js_mat_class_create",
							"js_mat_buffer",
							"js_mat_array",
							"js_mat_call",
							"js_mat_finalizer",
							"js_mat_iterator_new",
							"js_mat_iterator_dump",
							"js_mat_iterator_next",
							"js_mat_iterator_finalizer",
							"js_mat_iterator_dup",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_DEF",
							"JS_CGETSET_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_ALIAS_DEF",
							"JS_ALIAS_DEF",
							"JS_PROP_STRING_DEF",
							"JS_ITERATOR_NEXT_DEF",
							"JS_PROP_STRING_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_PROP_INT32_DEF",
							"CV_MAKETYPE",
							"js_mat_init",
							"js_mat_export",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACUBwAASlNNYXRJdGVyYXRvckRhdGEKICBqc19tYXRfZnJlZV9mdW5jCiAganNfbWF0X3NpemVzCiAganNfbWF0X2RpbWVuc2lvbnMKICBqc19tYXRfdHJhY2sKICBqc19tYXRfbmV3CiAganNfbWF0X3dyYXAKICBqc19tYXRfZGF0YQogIGpzX21hdF9wcmludF9kYXRhCiAganNfbWF0X2R1bXAKICBqc19tYXRfcGFyYW1zCiAganNfbWF0X2N0b3IKICBqc19tYXRfZnVuY3MKICBqc19tYXRfZXhwcgogIGpzX21hdF9pbml0CiAganNfbWF0X2dldAogIGpzX21hdF9nZXQKICBqc19tYXRfZ2V0X3doCiAganNfbWF0X2F0CiAganNfbWF0X3NldAogIGpzX21hdF9zZXRfdG8KICBqc19tYXRfZ2V0X3Byb3BzCiAganNfbWF0X3Rvc3RyaW5nCiAganNfbWF0X2luc3BlY3QKICBqc19tYXRfZ2V0cm90YXRpb25tYXRyaXgyZAogIGpzX21hdF9jb252ZXJ0X3RvCiAganNfbWF0X2NvcHlfdG8KICBqc19tYXRfcmVzaGFwZQogIGpzX21hdF9nZXR1bWF0CiAganNfbWF0X2NsYXNzX2Z1bmMKICBqc19tYXRfZmlsbAogIGpzX21hdF9jbGFzc19jcmVhdGUKICBqc19tYXRfYnVmZmVyCiAganNfbWF0X2FycmF5CiAganNfbWF0X2NhbGwKICBqc19tYXRfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX25ldwogIGpzX21hdF9pdGVyYXRvcl9kdW1wCiAganNfbWF0X2l0ZXJhdG9yX25leHQKICBqc19tYXRfaXRlcmF0b3JfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX2R1cApKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQUxJQVNfREVGCkpTX0FMSUFTX0RFRgpKU19QUk9QX1NUUklOR19ERUYKSlNfSVRFUkFUT1JfTkVYVF9ERUYKSlNfUFJPUF9TVFJJTkdfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfUFJPUF9JTlQzMl9ERUYKQ1ZfTUFLRVRZUEUKICBqc19tYXRfaW5pdAogIGpzX21hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAAJQHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACUBwAASlNNYXRJdGVyYXRvckRhdGEKICBqc19tYXRfZnJlZV9mdW5jCiAganNfbWF0X3NpemVzCiAganNfbWF0X2RpbWVuc2lvbnMKICBqc19tYXRfdHJhY2sKICBqc19tYXRfbmV3CiAganNfbWF0X3dyYXAKICBqc19tYXRfZGF0YQogIGpzX21hdF9wcmludF9kYXRhCiAganNfbWF0X2R1bXAKICBqc19tYXRfcGFyYW1zCiAganNfbWF0X2N0b3IKICBqc19tYXRfZnVuY3MKICBqc19tYXRfZXhwcgogIGpzX21hdF9pbml0CiAganNfbWF0X2dldAogIGpzX21hdF9nZXQKICBqc19tYXRfZ2V0X3doCiAganNfbWF0X2F0CiAganNfbWF0X3NldAogIGpzX21hdF9zZXRfdG8KICBqc19tYXRfZ2V0X3Byb3BzCiAganNfbWF0X3Rvc3RyaW5nCiAganNfbWF0X2luc3BlY3QKICBqc19tYXRfZ2V0cm90YXRpb25tYXRyaXgyZAogIGpzX21hdF9jb252ZXJ0X3RvCiAganNfbWF0X2NvcHlfdG8KICBqc19tYXRfcmVzaGFwZQogIGpzX21hdF9nZXR1bWF0CiAganNfbWF0X2NsYXNzX2Z1bmMKICBqc19tYXRfZmlsbAogIGpzX21hdF9jbGFzc19jcmVhdGUKICBqc19tYXRfYnVmZmVyCiAganNfbWF0X2FycmF5CiAganNfbWF0X2NhbGwKICBqc19tYXRfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX25ldwogIGpzX21hdF9pdGVyYXRvcl9kdW1wCiAganNfbWF0X2l0ZXJhdG9yX25leHQKICBqc19tYXRfaXRlcmF0b3JfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX2R1cApKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQUxJQVNfREVGCkpTX0FMSUFTX0RFRgpKU19QUk9QX1NUUklOR19ERUYKSlNfSVRFUkFUT1JfTkVYVF9ERUYKSlNfUFJPUF9TVFJJTkdfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfUFJPUF9JTlQzMl9ERUYKQ1ZfTUFLRVRZUEUKICBqc19tYXRfaW5pdAogIGpzX21hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAAJQHAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					760,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_slice_iterator.cpp",
						"symkeys":
						[
							[
								260,
								284
							],
							[
								784,
								805
							],
							[
								1410,
								1432
							],
							[
								2124,
								2153
							],
							[
								3366,
								3387
							],
							[
								3511,
								3538
							],
							[
								4093,
								4113
							],
							[
								4157,
								4169
							],
							[
								4222,
								4240
							],
							[
								4313,
								4335
							],
							[
								5550,
								5574
							],
							[
								5705,
								5719
							],
							[
								5757,
								5771
							],
							[
								5823,
								5837
							],
							[
								6055,
								6082
							]
						],
						"symlist":
						[
							"js_slice_iterator_create",
							"js_slice_iterator_new",
							"js_slice_iterator_next",
							"js_slice_iterator_constructor",
							"js_slice_iterator_dup",
							"js_slice_iterator_finalizer",
							"JS_ITERATOR_NEXT_DEF",
							"JS_CFUNC_DEF",
							"JS_PROP_STRING_DEF",
							"js_slice_iterator_init",
							"js_slice_iterator_export",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"js_slice_iterator_to_string"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACUBwAASlNNYXRJdGVyYXRvckRhdGEKICBqc19tYXRfZnJlZV9mdW5jCiAganNfbWF0X3NpemVzCiAganNfbWF0X2RpbWVuc2lvbnMKICBqc19tYXRfdHJhY2sKICBqc19tYXRfbmV3CiAganNfbWF0X3dyYXAKICBqc19tYXRfZGF0YQogIGpzX21hdF9wcmludF9kYXRhCiAganNfbWF0X2R1bXAKICBqc19tYXRfcGFyYW1zCiAganNfbWF0X2N0b3IKICBqc19tYXRfZnVuY3MKICBqc19tYXRfZXhwcgogIGpzX21hdF9pbml0CiAganNfbWF0X2dldAogIGpzX21hdF9nZXQKICBqc19tYXRfZ2V0X3doCiAganNfbWF0X2F0CiAganNfbWF0X3NldAogIGpzX21hdF9zZXRfdG8KICBqc19tYXRfZ2V0X3Byb3BzCiAganNfbWF0X3Rvc3RyaW5nCiAganNfbWF0X2luc3BlY3QKICBqc19tYXRfZ2V0cm90YXRpb25tYXRyaXgyZAogIGpzX21hdF9jb252ZXJ0X3RvCiAganNfbWF0X2NvcHlfdG8KICBqc19tYXRfcmVzaGFwZQogIGpzX21hdF9nZXR1bWF0CiAganNfbWF0X2NsYXNzX2Z1bmMKICBqc19tYXRfZmlsbAogIGpzX21hdF9jbGFzc19jcmVhdGUKICBqc19tYXRfYnVmZmVyCiAganNfbWF0X2FycmF5CiAganNfbWF0X2NhbGwKICBqc19tYXRfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX25ldwogIGpzX21hdF9pdGVyYXRvcl9kdW1wCiAganNfbWF0X2l0ZXJhdG9yX25leHQKICBqc19tYXRfaXRlcmF0b3JfZmluYWxpemVyCiAganNfbWF0X2l0ZXJhdG9yX2R1cApKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX01BR0lDX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DR0VUU0VUX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQUxJQVNfREVGCkpTX0FMSUFTX0RFRgpKU19QUk9QX1NUUklOR19ERUYKSlNfSVRFUkFUT1JfTkVYVF9ERUYKSlNfUFJPUF9TVFJJTkdfREVGCkpTX0NGVU5DX0RFRgpKU19DRlVOQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfQ0ZVTkNfTUFHSUNfREVGCkpTX0NGVU5DX01BR0lDX0RFRgpKU19DRlVOQ19NQUdJQ19ERUYKSlNfUFJPUF9JTlQzMl9ERUYKQ1ZfTUFLRVRZUEUKICBqc19tYXRfaW5pdAogIGpzX21hdF9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUAAAAAAAAAAFUBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					761,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/util.cpp",
						"symkeys":
						[
							[
								132,
								139
							],
							[
								310,
								317
							],
							[
								423,
								436
							]
						],
						"symlist":
						[
							"str_end",
							"str_end",
							"get_heap_base"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABVAQAAICBqc19zbGljZV9pdGVyYXRvcl9jcmVhdGUKICBqc19zbGljZV9pdGVyYXRvcl9uZXcKICBqc19zbGljZV9pdGVyYXRvcl9uZXh0CiAganNfc2xpY2VfaXRlcmF0b3JfY29uc3RydWN0b3IKICBqc19zbGljZV9pdGVyYXRvcl9kdXAKICBqc19zbGljZV9pdGVyYXRvcl9maW5hbGl6ZXIKSlNfSVRFUkFUT1JfTkVYVF9ERUYKSlNfQ0ZVTkNfREVGCkpTX1BST1BfU1RSSU5HX0RFRgogIGpzX3NsaWNlX2l0ZXJhdG9yX2luaXQKICBqc19zbGljZV9pdGVyYXRvcl9leHBvcnQKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKSlNfSU5JVF9NT0RVTEUKICBqc19zbGljZV9pdGVyYXRvcl90b19zdHJpbmcAAAAAAAAAACMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					762,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/util.hpp",
						"symkeys":
						[
							[
								25,
								33
							],
							[
								215,
								222
							],
							[
								223,
								233
							],
							[
								253,
								259
							],
							[
								274,
								281
							],
							[
								282,
								295
							],
							[
								329,
								335
							],
							[
								336,
								349
							],
							[
								390,
								401
							],
							[
								421,
								430
							],
							[
								450,
								461
							],
							[
								481,
								493
							],
							[
								513,
								523
							],
							[
								543,
								556
							],
							[
								576,
								586
							],
							[
								606,
								617
							],
							[
								638,
								648
							],
							[
								670,
								684
							],
							[
								706,
								722
							],
							[
								744,
								761
							],
							[
								783,
								798
							],
							[
								820,
								838
							],
							[
								860,
								875
							],
							[
								897,
								913
							],
							[
								936,
								946
							],
							[
								962,
								969
							],
							[
								1013,
								1020
							],
							[
								1086,
								1095
							],
							[
								1136,
								1149
							],
							[
								1259,
								1268
							],
							[
								1393,
								1397
							],
							[
								1680,
								1693
							],
							[
								1719,
								1722
							],
							[
								1753,
								1758
							],
							[
								1806,
								1815
							],
							[
								1861,
								1870
							],
							[
								2282,
								2286
							],
							[
								2557,
								2570
							],
							[
								2590,
								2605
							],
							[
								2643,
								2651
							],
							[
								2731,
								2744
							],
							[
								2798,
								2814
							],
							[
								2874,
								2890
							],
							[
								3034,
								3048
							],
							[
								3238,
								3252
							],
							[
								3378,
								3385
							],
							[
								3476,
								3483
							],
							[
								3630,
								3640
							],
							[
								3826,
								3836
							],
							[
								3984,
								3990
							],
							[
								4105,
								4111
							],
							[
								4295,
								4307
							],
							[
								4402,
								4411
							],
							[
								4503,
								4515
							],
							[
								4611,
								4621
							],
							[
								4715,
								4727
							],
							[
								4828,
								4833
							],
							[
								4914,
								4917
							],
							[
								5005,
								5010
							],
							[
								5103,
								5106
							],
							[
								5593,
								5598
							],
							[
								5673,
								5676
							],
							[
								5764,
								5769
							],
							[
								5856,
								5859
							],
							[
								5936,
								5941
							],
							[
								6012,
								6015
							],
							[
								6126,
								6131
							],
							[
								6220,
								6223
							],
							[
								6416,
								6427
							],
							[
								6561,
								6575
							],
							[
								6713,
								6718
							],
							[
								6885,
								6890
							],
							[
								7067,
								7072
							]
						],
						"symlist":
						[
							"UTIL_HPP",
							"VISIBLE",
							"__declspec",
							"HIDDEN",
							"VISIBLE",
							"__attribute__",
							"HIDDEN",
							"__attribute__",
							"COLOR_BLACK",
							"COLOR_RED",
							"COLOR_GREEN",
							"COLOR_YELLOW",
							"COLOR_BLUE",
							"COLOR_MAGENTA",
							"COLOR_CYAN",
							"COLOR_WHITE",
							"COLOR_GRAY",
							"COLOR_LIGHTRED",
							"COLOR_LIGHTGREEN",
							"COLOR_LIGHTYELLOW",
							"COLOR_LIGHTBLUE",
							"COLOR_LIGHTMAGENTA",
							"COLOR_LIGHTCYAN",
							"COLOR_LIGHTWHITE",
							"COLOR_NONE",
							"str_end",
							"str_end",
							"to_string",
							"make_filename",
							"get_mtime",
							"stat",
							"iterator_type",
							"end",
							"begin",
							"to_string",
							"to_string",
							"join",
							"get_heap_base",
							"JSMatDimensions",
							" cv::Size",
							"mattype_depth",
							"mattype_channels",
							"mattype_floating",
							"mattype_signed",
							"mat_dimensions",
							"mat_ptr",
							"mat_ptr",
							"mat_offset",
							"mat_offset",
							"mat_at",
							"mat_at",
							"mat_bytesize",
							"mat_depth",
							"mat_channels",
							"mat_signed",
							"mat_floating",
							"begin",
							"end",
							"begin",
							"end",
							"begin",
							"end",
							"begin",
							"end",
							"begin",
							"end",
							"begin",
							"end",
							"sized_range",
							"argument_range",
							"range",
							"range",
							"range"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAjAAAAICBzdHJfZW5kCiAgc3RyX2VuZAogIGdldF9oZWFwX2Jhc2UAAAAAAAAAAFEDAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					765,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/jsbindings.hpp",
						"symkeys":
						[
							[
								31,
								45
							],
							[
								459,
								470
							],
							[
								488,
								497
							],
							[
								516,
								526
							],
							[
								547,
								558
							],
							[
								1014,
								1032
							],
							[
								1056,
								1071
							],
							[
								1100,
								1111
							],
							[
								1138,
								1150
							],
							[
								1177,
								1190
							],
							[
								1222,
								1240
							],
							[
								1513,
								1525
							],
							[
								1555,
								1565
							],
							[
								1591,
								1602
							],
							[
								1629,
								1640
							],
							[
								1928,
								1935
							],
							[
								1936,
								1946
							],
							[
								1966,
								1972
							],
							[
								1987,
								1994
							],
							[
								1995,
								2008
							],
							[
								2042,
								2048
							],
							[
								2049,
								2062
							],
							[
								2103,
								2128
							],
							[
								2892,
								2909
							],
							[
								2947,
								2959
							],
							[
								3004,
								3015
							],
							[
								3091,
								3105
							],
							[
								3161,
								3181
							],
							[
								3221,
								3240
							],
							[
								3280,
								3299
							],
							[
								3339,
								3357
							],
							[
								3397,
								3419
							],
							[
								3459,
								3478
							],
							[
								3518,
								3537
							],
							[
								3577,
								3594
							],
							[
								3634,
								3662
							],
							[
								3694,
								3715
							],
							[
								3760,
								3781
							],
							[
								4065,
								4076
							],
							[
								4470,
								4483
							],
							[
								4538,
								4552
							],
							[
								4610,
								4628
							],
							[
								4686,
								4701
							],
							[
								4765,
								4781
							],
							[
								4838,
								4852
							],
							[
								4910,
								4924
							],
							[
								4964,
								4984
							],
							[
								5415,
								5422
							],
							[
								5464,
								5488
							],
							[
								5558,
								5565
							],
							[
								5744,
								5752
							],
							[
								5858,
								5864
							],
							[
								5994,
								6008
							],
							[
								6171,
								6194
							],
							[
								6307,
								6331
							],
							[
								6446,
								6469
							],
							[
								6600,
								6613
							],
							[
								6702,
								6724
							],
							[
								6816,
								6839
							],
							[
								6934,
								6956
							],
							[
								7027,
								7040
							],
							[
								7108,
								7121
							],
							[
								7205,
								7218
							],
							[
								7538,
								7550
							],
							[
								8209,
								8215
							],
							[
								8306,
								8314
							],
							[
								8449,
								8469
							],
							[
								8706,
								8726
							],
							[
								8814,
								8824
							],
							[
								9115,
								9134
							],
							[
								9417,
								9436
							],
							[
								9934,
								9947
							],
							[
								10174,
								10188
							],
							[
								10271,
								10294
							],
							[
								10549,
								10562
							],
							[
								10787,
								10805
							],
							[
								10995,
								11016
							],
							[
								11296,
								11316
							],
							[
								11541,
								11555
							],
							[
								11747,
								11765
							],
							[
								12227,
								12241
							],
							[
								12621,
								12637
							],
							[
								12824,
								12840
							],
							[
								12876,
								12892
							],
							[
								12970,
								12987
							],
							[
								13281,
								13301
							],
							[
								13477,
								13493
							],
							[
								14055,
								14068
							],
							[
								14377,
								14400
							],
							[
								14847,
								14872
							],
							[
								15153,
								15169
							],
							[
								16148,
								16158
							],
							[
								16172,
								16188
							],
							[
								16225,
								16240
							],
							[
								16441,
								16457
							],
							[
								16884,
								16885
							],
							[
								17014,
								17025
							],
							[
								17136,
								17147
							],
							[
								17261,
								17272
							],
							[
								17502,
								17503
							],
							[
								17636,
								17649
							],
							[
								17742,
								17755
							],
							[
								17838,
								17851
							],
							[
								17996,
								18009
							],
							[
								18129,
								18140
							],
							[
								18170,
								18179
							],
							[
								18285,
								18300
							],
							[
								18320,
								18325
							],
							[
								18371,
								18387
							],
							[
								18441,
								18452
							],
							[
								18488,
								18497
							],
							[
								18512,
								18524
							],
							[
								18553,
								18565
							],
							[
								18593,
								18597
							],
							[
								18646,
								18654
							],
							[
								18776,
								18791
							],
							[
								18860,
								18876
							],
							[
								18930,
								18941
							],
							[
								18995,
								19007
							],
							[
								19036,
								19048
							],
							[
								19099,
								19108
							],
							[
								19177,
								19185
							],
							[
								19289,
								19303
							],
							[
								19465,
								19479
							],
							[
								19564,
								19574
							],
							[
								19665,
								19679
							]
						],
						"symlist":
						[
							"JSBINDINGS_HPP",
							"JSRectDataD",
							"JSMatData",
							"JSUMatData",
							"JSSizeDataD",
							"JSVideoCaptureData",
							"JSTickMeterData",
							"JSCLAHEData",
							"JSInputArray",
							"JSOutputArray",
							"JSInputOutputArray",
							"JSLineTraits",
							"array_type",
							"vector_type",
							"scalar_type",
							"VISIBLE",
							"__declspec",
							"HIDDEN",
							"VISIBLE",
							"__attribute__",
							"HIDDEN",
							"__attribute__",
							"JS_CGETSET_ENUMERABLE_DEF",
							"js_draw_functions",
							"js_draw_init",
							"js_line_new",
							"js_init_module",
							"js_init_module_point",
							"js_init_module_size",
							"js_init_module_rect",
							"js_init_module_mat",
							"js_init_module_contour",
							"js_init_module_line",
							"js_init_module_draw",
							"js_init_module_cv",
							"js_init_module_video_capture",
							"js_video_capture_init",
							"js_video_capture_wrap",
							"js_mat_wrap",
							"js_global_get",
							"js_is_iterable",
							"js_iterator_method",
							"js_iterator_new",
							"js_iterator_next",
							"js_symbol_atom",
							"js_symbol_ctor",
							"js_symbol_get_static",
							"countof",
							"js_vector_vec4i_to_array",
							"js_ctor",
							"js_proto",
							"js_new",
							"js_number_read",
							"js_number_read<int32_t>",
							"js_number_read<uint32_t>",
							"js_number_read<int64_t>",
							"js_number_new",
							"js_number_new<int32_t>",
							"js_number_new<uint32_t>",
							"js_number_new<int64_t>",
							"js_color_read",
							"js_color_read",
							"js_color_read",
							"js_color_new",
							"js_ref",
							"round_to",
							"js_arraybuffer_range",
							"js_arraybuffer_range",
							"value_type",
							"js_arraybuffer_from",
							"js_arraybuffer_from",
							"js_global_get",
							"js_symbol_ctor",
							"js_symbol_invoke_static",
							"js_symbol_for",
							"js_symbol_for_atom",
							"js_set_inspect_method",
							"js_symbol_get_static",
							"js_symbol_atom",
							"js_iterator_method",
							"js_is_iterable",
							"js_is_array_like",
							"ArrayBufferProps",
							" ArrayBufferProps",
							"js_is_arraybuffer",
							"js_arraybuffer_props",
							"js_function_name",
							"js_class_name",
							"js_typedarray_prototype",
							"js_typedarray_constructor",
							"js_is_typedarray",
							"JS_IsArray",
							"js_is_typedarray",
							"js_iterator_new",
							"js_iterator_next",
							"T",
							"js_value_to",
							"js_value_to",
							"js_value_to",
							"T",
							"js_value_from",
							"js_value_from",
							"js_value_from",
							"js_value_from",
							"js_iterable",
							" to_vector",
							" js_iterator_new",
							" clear",
							" js_iterator_next",
							" js_value_to",
							" push_back",
							" JS_FreeValue",
							" JS_FreeValue",
							" size",
							" to_array",
							" js_iterator_new",
							" js_iterator_next",
							" js_value_to",
							" JS_FreeValue",
							" JS_FreeValue",
							" to_scalar",
							" to_array",
							"js_iterable_to",
							"js_iterable_to",
							"array_type",
							"js_iterable_to"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABRAwAAVVRJTF9IUFAKVklTSUJMRQogIF9fZGVjbHNwZWMKSElEREVOClZJU0lCTEUKICBfX2F0dHJpYnV0ZV9fCkhJRERFTgogIF9fYXR0cmlidXRlX18KQ09MT1JfQkxBQ0sKQ09MT1JfUkVECkNPTE9SX0dSRUVOCkNPTE9SX1lFTExPVwpDT0xPUl9CTFVFCkNPTE9SX01BR0VOVEEKQ09MT1JfQ1lBTgpDT0xPUl9XSElURQpDT0xPUl9HUkFZCkNPTE9SX0xJR0hUUkVECkNPTE9SX0xJR0hUR1JFRU4KQ09MT1JfTElHSFRZRUxMT1cKQ09MT1JfTElHSFRCTFVFCkNPTE9SX0xJR0hUTUFHRU5UQQpDT0xPUl9MSUdIVENZQU4KQ09MT1JfTElHSFRXSElURQpDT0xPUl9OT05FCiAgc3RyX2VuZAogIHN0cl9lbmQKICB0b19zdHJpbmcKICBtYWtlX2ZpbGVuYW1lCiAgZ2V0X210aW1lCiAgc3RhdAogIGl0ZXJhdG9yX3R5cGUKICBlbmQKICBiZWdpbgogIHRvX3N0cmluZwogIHRvX3N0cmluZwogIGpvaW4KICBnZXRfaGVhcF9iYXNlCkpTTWF0RGltZW5zaW9ucwoJY3Y6OlNpemUKICBtYXR0eXBlX2RlcHRoCiAgbWF0dHlwZV9jaGFubmVscwogIG1hdHR5cGVfZmxvYXRpbmcKICBtYXR0eXBlX3NpZ25lZAogIG1hdF9kaW1lbnNpb25zCiAgbWF0X3B0cgogIG1hdF9wdHIKICBtYXRfb2Zmc2V0CiAgbWF0X29mZnNldAogIG1hdF9hdAogIG1hdF9hdAogIG1hdF9ieXRlc2l6ZQogIG1hdF9kZXB0aAogIG1hdF9jaGFubmVscwogIG1hdF9zaWduZWQKICBtYXRfZmxvYXRpbmcKICBiZWdpbgogIGVuZAogIGJlZ2luCiAgZW5kCiAgYmVnaW4KICBlbmQKICBiZWdpbgogIGVuZAogIGJlZ2luCiAgZW5kCiAgYmVnaW4KICBlbmQKICBzaXplZF9yYW5nZQogIGFyZ3VtZW50X3JhbmdlCiAgcmFuZ2UKICByYW5nZQogIHJhbmdlAAAAAAAAAAAjCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAMAAAAAAAAUAwAAAAAAAAAAAAAAAPC/"
				],
				[
					766,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/qjs-opencv/js_mat.cpp",
						"symkeys":
						[
							[
								1280,
								1297
							],
							[
								1411,
								1427
							],
							[
								1634,
								1646
							],
							[
								1962,
								1979
							],
							[
								2322,
								2334
							],
							[
								2957,
								2967
							],
							[
								3546,
								3557
							],
							[
								4389,
								4400
							],
							[
								4822,
								4839
							],
							[
								5342,
								5353
							],
							[
								6385,
								6398
							],
							[
								6900,
								6911
							],
							[
								7123,
								7135
							],
							[
								9523,
								9534
							],
							[
								12790,
								12801
							],
							[
								13653,
								13663
							],
							[
								13871,
								13881
							],
							[
								15447,
								15460
							],
							[
								15669,
								15678
							],
							[
								16440,
								16450
							],
							[
								19907,
								19920
							],
							[
								21695,
								21711
							],
							[
								23100,
								23115
							],
							[
								24759,
								24773
							],
							[
								25378,
								25404
							],
							[
								25911,
								25928
							],
							[
								26449,
								26463
							],
							[
								27157,
								27171
							],
							[
								28152,
								28166
							],
							[
								28728,
								28745
							],
							[
								29635,
								29646
							],
							[
								30186,
								30205
							],
							[
								31097,
								31110
							],
							[
								31881,
								31893
							],
							[
								32575,
								32586
							],
							[
								33089,
								33105
							],
							[
								34570,
								34589
							],
							[
								35673,
								35693
							],
							[
								35890,
								35910
							],
							[
								38170,
								38195
							],
							[
								38373,
								38392
							],
							[
								38790,
								38810
							],
							[
								38906,
								38926
							],
							[
								39022,
								39042
							],
							[
								39146,
								39166
							],
							[
								39262,
								39282
							],
							[
								39380,
								39400
							],
							[
								39498,
								39518
							],
							[
								39616,
								39636
							],
							[
								39732,
								39752
							],
							[
								39860,
								39880
							],
							[
								39986,
								40006
							],
							[
								40102,
								40122
							],
							[
								40226,
								40246
							],
							[
								40352,
								40366
							],
							[
								40450,
								40464
							],
							[
								40546,
								40564
							],
							[
								40653,
								40671
							],
							[
								40760,
								40778
							],
							[
								40878,
								40896
							],
							[
								40996,
								41014
							],
							[
								41107,
								41125
							],
							[
								41214,
								41232
							],
							[
								41329,
								41347
							],
							[
								41436,
								41454
							],
							[
								41547,
								41565
							],
							[
								41658,
								41676
							],
							[
								41771,
								41789
							],
							[
								41882,
								41900
							],
							[
								42002,
								42020
							],
							[
								42110,
								42128
							],
							[
								42218,
								42236
							],
							[
								42324,
								42342
							],
							[
								42432,
								42450
							],
							[
								42541,
								42559
							],
							[
								42639,
								42657
							],
							[
								42737,
								42749
							],
							[
								42834,
								42846
							],
							[
								42919,
								42931
							],
							[
								43006,
								43018
							],
							[
								43098,
								43110
							],
							[
								43198,
								43210
							],
							[
								43292,
								43304
							],
							[
								43387,
								43399
							],
							[
								43482,
								43500
							],
							[
								43604,
								43622
							],
							[
								43730,
								43748
							],
							[
								43858,
								43870
							],
							[
								43954,
								43966
							],
							[
								44056,
								44074
							],
							[
								44198,
								44218
							],
							[
								44260,
								44278
							],
							[
								44345,
								44357
							],
							[
								44466,
								44478
							],
							[
								44538,
								44556
							],
							[
								44594,
								44612
							],
							[
								44650,
								44668
							],
							[
								44706,
								44724
							],
							[
								44762,
								44780
							],
							[
								44818,
								44836
							],
							[
								44873,
								44891
							],
							[
								44929,
								44947
							],
							[
								44989,
								45007
							],
							[
								45048,
								45065
							],
							[
								45075,
								45086
							],
							[
								45127,
								45138
							],
							[
								46565,
								46578
							],
							[
								46688,
								46702
							],
							[
								46740,
								46754
							],
							[
								46806,
								46820
							]
						],
						"symlist":
						[
							"JSMatIteratorData",
							"js_mat_free_func",
							"js_mat_sizes",
							"js_mat_dimensions",
							"js_mat_track",
							"js_mat_new",
							"js_mat_wrap",
							"js_mat_data",
							"js_mat_print_data",
							"js_mat_dump",
							"js_mat_params",
							"js_mat_ctor",
							"js_mat_funcs",
							"js_mat_expr",
							"js_mat_init",
							"js_mat_get",
							"js_mat_get",
							"js_mat_get_wh",
							"js_mat_at",
							"js_mat_set",
							"js_mat_set_to",
							"js_mat_get_props",
							"js_mat_tostring",
							"js_mat_inspect",
							"js_mat_getrotationmatrix2d",
							"js_mat_convert_to",
							"js_mat_copy_to",
							"js_mat_reshape",
							"js_mat_getumat",
							"js_mat_class_func",
							"js_mat_fill",
							"js_mat_class_create",
							"js_mat_buffer",
							"js_mat_array",
							"js_mat_call",
							"js_mat_finalizer",
							"js_mat_iterator_new",
							"js_mat_iterator_dump",
							"js_mat_iterator_next",
							"js_mat_iterator_finalizer",
							"js_mat_iterator_dup",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_MAGIC_DEF",
							"JS_CGETSET_DEF",
							"JS_CGETSET_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_ALIAS_DEF",
							"JS_ALIAS_DEF",
							"JS_PROP_STRING_DEF",
							"JS_ITERATOR_NEXT_DEF",
							"JS_PROP_STRING_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_CFUNC_MAGIC_DEF",
							"JS_PROP_INT32_DEF",
							"CV_MAKETYPE",
							"js_mat_init",
							"js_mat_export",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAjCAAASlNCSU5ESU5HU19IUFAKSlNSZWN0RGF0YUQKSlNNYXREYXRhCkpTVU1hdERhdGEKSlNTaXplRGF0YUQKSlNWaWRlb0NhcHR1cmVEYXRhCkpTVGlja01ldGVyRGF0YQpKU0NMQUhFRGF0YQpKU0lucHV0QXJyYXkKSlNPdXRwdXRBcnJheQpKU0lucHV0T3V0cHV0QXJyYXkKSlNMaW5lVHJhaXRzCiAgYXJyYXlfdHlwZQogIHZlY3Rvcl90eXBlCiAgc2NhbGFyX3R5cGUKVklTSUJMRQogIF9fZGVjbHNwZWMKSElEREVOClZJU0lCTEUKICBfX2F0dHJpYnV0ZV9fCkhJRERFTgogIF9fYXR0cmlidXRlX18KSlNfQ0dFVFNFVF9FTlVNRVJBQkxFX0RFRgogIGpzX2RyYXdfcwogIGpzX2RyYXdfaW5pdAogIGpzX2xpbmVfbmV3CiAganNfaW5pdF9tb2R1bGUKICBqc19pbml0X21vZHVsZV9wb2ludAogIGpzX2luaXRfbW9kdWxlX3NpemUKICBqc19pbml0X21vZHVsZV9yZWN0CiAganNfaW5pdF9tb2R1bGVfbWF0CiAganNfaW5pdF9tb2R1bGVfY29udG91cgogIGpzX2luaXRfbW9kdWxlX2xpbmUKICBqc19pbml0X21vZHVsZV9kcmF3CiAganNfaW5pdF9tb2R1bGVfY3YKICBqc19pbml0X21vZHVsZV92aWRlb19jYXB0dXJlCiAganNfdmlkZW9fY2FwdHVyZV9pbml0CiAganNfdmlkZW9fY2FwdHVyZV93cmFwCiAganNfbWF0X3dyYXAKICBqc19nbG9iYWxfZ2V0CiAganNfaXNfaXRlcmFibGUKICBqc19pdGVyYXRvcl9tZXRob2QKICBqc19pdGVyYXRvcl9uZXcKICBqc19pdGVyYXRvcl9uZXh0CiAganNfc3ltYm9sX2F0b20KICBqc19zeW1ib2xfY3RvcgogIGpzX3N5bWJvbF9nZXRfc3RhdGljCiAgY291bnRvZgogIGpzX3ZlY3Rvcl92ZWM0aV90b19hcnJheQogIGpzX2N0b3IKICBqc19wcm90bwogIGpzX25ldwogIGpzX251bWJlcl9yZWFkCiAganNfbnVtYmVyX3JlYWQ8aW50MzJfdD4KICBqc19udW1iZXJfcmVhZDx1aW50MzJfdD4KICBqc19udW1iZXJfcmVhZDxpbnQ2NF90PgogIGpzX251bWJlcl9uZXcKICBqc19udW1iZXJfbmV3PGludDMyX3Q+CiAganNfbnVtYmVyX25ldzx1aW50MzJfdD4KICBqc19udW1iZXJfbmV3PGludDY0X3Q+CiAganNfY29sb3JfcmVhZAogIGpzX2NvbG9yX3JlYWQKICBqc19jb2xvcl9yZWFkCiAganNfY29sb3JfbmV3CiAganNfcmVmCiAgcm91bmRfdG8KICBqc19hcnJheWJ1ZmZlcl9yYW5nZQogIGpzX2FycmF5YnVmZmVyX3JhbmdlCiAgdmFsdWVfdHlwZQogIGpzX2FycmF5YnVmZmVyX2Zyb20KICBqc19hcnJheWJ1ZmZlcl9mcm9tCiAganNfZ2xvYmFsX2dldAogIGpzX3N5bWJvbF9jdG9yCiAganNfc3ltYm9sX2ludm9rZV9zdGF0aWMKICBqc19zeW1ib2xfZm9yCiAganNfc3ltYm9sX2Zvcl9hdG9tCiAganNfc2V0X2luc3BlY3RfbWV0aG9kCiAganNfc3ltYm9sX2dldF9zdGF0aWMKICBqc19zeW1ib2xfYXRvbQogIGpzX2l0ZXJhdG9yX21ldGhvZAogIGpzX2lzX2l0ZXJhYmxlCiAganNfaXNfYXJyYXlfbGlrZQpBcnJheUJ1ZmZlclByb3BzCkFycmF5QnVmZmVyUHJvcHMKICBqc19pc19hcnJheWJ1ZmZlcgogIGpzX2FycmF5YnVmZmVyX3Byb3BzCiAganNfX25hbWUKICBqc19jbGFzc19uYW1lCiAganNfdHlwZWRhcnJheV9wcm90b3R5cGUKICBqc190eXBlZGFycmF5X2NvbnN0cnVjdG9yCiAganNfaXNfdHlwZWRhcnJheQpKU19Jc0FycmF5CiAganNfaXNfdHlwZWRhcnJheQogIGpzX2l0ZXJhdG9yX25ldwogIGpzX2l0ZXJhdG9yX25leHQKICBqc192YWx1ZV90bwogIGpzX3ZhbHVlX3RvCiAganNfdmFsdWVfdG8KICBqc192YWx1ZV9mcm9tCiAganNfdmFsdWVfZnJvbQogIGpzX3ZhbHVlX2Zyb20KICBqc192YWx1ZV9mcm9tCiAganNfaXRlcmFibGUKCXRvX3ZlY3RvcgoJanNfaXRlcmF0b3JfbmV3CgljbGVhcgoJanNfaXRlcmF0b3JfbmV4dAoJanNfdmFsdWVfdG8KCXB1c2hfYmFjawpKU19GcmVlVmFsdWUKSlNfRnJlZVZhbHVlCglzaXplCgl0b19hcnJheQoJanNfaXRlcmF0b3JfbmV3Cglqc19pdGVyYXRvcl9uZXh0Cglqc192YWx1ZV90bwpKU19GcmVlVmFsdWUKSlNfRnJlZVZhbHVlCgl0b19zY2FsYXIKCXRvX2FycmF5CiAganNfaXRlcmFibGVfdG8KICBqc19pdGVyYWJsZV90bwogIGFycmF5X3R5cGUKICBqc19pdGVyYWJsZV90bwAAAAAAAAAAlAcAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 4185,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					258,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAABMBAAAAAAAAFAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwEAAAAAAAATAQAAAAAAAAAAAAAAAAAA"
				],
				[
					259,
					1,
					"left_delete",
					null,
					"AQAAABMBAAAAAAAAEwEAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAAFAEAAAAAAAAUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAABMBAAAAAAAAFAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwEAAAAAAAATAQAAAAAAAAAAAAAAAPC/"
				],
				[
					263,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAHMBAAAAAAAAdAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwEAAAAAAABzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					278,
					1,
					"join_lines",
					null,
					"AwAAAHgIAAAAAAAAeAgAAAAAAAABAAAACngIAAAAAAAAeAgAAAAAAAAEAAAAICAgIHgIAAAAAAAAeQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQgAAAAAAABhCAAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					1,
					"left_delete",
					null,
					"AQAAAHgIAAAAAAAAeAgAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAeQgAAAAAAAB5CAAAAAAAAAAAAAAAAPC/"
				],
				[
					280,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHgIAAAAAAAAeQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAgAAAAAAAB4CAAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAGEIAAAAAAAAYggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQgAAAAAAABhCAAAAAAAAAAAAAAAAAAA"
				],
				[
					283,
					1,
					"left_delete",
					null,
					"AQAAAGEIAAAAAAAAYQgAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAAYggAAAAAAABiCAAAAAAAAAAAAAAAAPC/"
				],
				[
					284,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAGEIAAAAAAAAYggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQgAAAAAAABhCAAAAAAAAAAAAAAAAPC/"
				],
				[
					287,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAANQIAAAAAAAA1QgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AgAAAAAAADUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					293,
					1,
					"join_lines",
					null,
					"AwAAAKEJAAAAAAAAoQkAAAAAAAABAAAACqEJAAAAAAAAoQkAAAAAAAAEAAAAICAgIKEJAAAAAAAAogkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegkAAAAAAAB6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					296,
					1,
					"join_lines",
					null,
					"AwAAABMKAAAAAAAAEwoAAAAAAAABAAAAChMKAAAAAAAAEwoAAAAAAAAEAAAAICAgIBMKAAAAAAAAFAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6AkAAAAAAADoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"left_delete",
					null,
					"AQAAABMKAAAAAAAAEwoAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAFAoAAAAAAAAUCgAAAAAAAAAAAAAAAPC/"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABMKAAAAAAAAFAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwoAAAAAAAATCgAAAAAAAAAAAAAAAPC/"
				],
				[
					300,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAOgJAAAAAAAA6QkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6AkAAAAAAADoCQAAAAAAAAAAAAAAAAAA"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": " #"
					},
					"AgAAAHoJAAAAAAAAewkAAAAAAAAAAAAAewkAAAAAAAB8CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegkAAAAAAAB6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					304,
					2,
					"left_delete",
					null,
					"AgAAAHsJAAAAAAAAewkAAAAAAAABAAAAI3oJAAAAAAAAegkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAfAkAAAAAAAB8CQAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAHoJAAAAAAAAewkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegkAAAAAAAB6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					319,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJgKAAAAAAAAmQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAoAAAAAAACYCgAAAAAAAAAAAAAAAPC/"
				],
				[
					320,
					1,
					"paste",
					null,
					"AQAAAJkKAAAAAAAA/QoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQoAAAAAAACZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					323,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAJkKAAAAAAAAmgoAAAAAAAAAAAAAmgoAAAAAAACaCgAAAAAAAAEAAAAj",
					"AQAAAAAAAAABAAAAmgoAAAAAAACZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					327,
					1,
					"paste",
					null,
					"AgAAALUKAAAAAAAAwwoAAAAAAAAAAAAAwwoAAAAAAADDCgAAAAAAABQAAABDTUFLRV9JTlNUQUxMX1BSRUZJWA",
					"AQAAAAAAAAABAAAAtQoAAAAAAADJCgAAAAAAAAAAAAAAAPC/"
				],
				[
					328,
					5,
					"right_delete",
					null,
					"BQAAAMMKAAAAAAAAwwoAAAAAAAABAAAAfcMKAAAAAAAAwwoAAAAAAAABAAAAL8MKAAAAAAAAwwoAAAAAAAABAAAAbMMKAAAAAAAAwwoAAAAAAAABAAAAacMKAAAAAAAAwwoAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAwwoAAAAAAADDCgAAAAAAAAAAAAAAAPC/"
				],
				[
					329,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAMMKAAAAAAAAxAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwoAAAAAAADDCgAAAAAAAAAAAAAAAPC/"
				],
				[
					332,
					1,
					"right_delete",
					null,
					"AQAAAJkKAAAAAAAAmQoAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAmQoAAAAAAACZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					347,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABIBAAAAAAAAEwEAAAAAAAAAAAAAEwEAAAAAAAATAQAAAAAAAMUAAAAKI3NldChDTUFLRV9CVUlMRF9SUEFUSCAiJHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9IiBDQUNIRSBQQVRIICJCdWlsZCB3aXRoIGxvY2FsIHJwYXRoIiBGT1JDRSkKI3NldChDTUFLRV9JTlNUQUxMX1JQQVRIICIke0NNQUtFX0lOU1RBTExfUFJFRklYfS9saWIiIENBQ0hFIFBBVEggIkJ1aWxkIHdpdGggaW5zdGFsbCBycGF0aCIgRk9SQ0UpCg",
					"AQAAAAAAAAABAAAAEgEAAAAAAADXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					1,
					"left_delete",
					null,
					"AQAAAFIBAAAAAAAAUgEAAAAAAAAuAAAAIyBpbmNsdWRlKCR7cXVpY2tqc19zb3VyY2VzX3Jvb3R9L2RlZnMuY21ha2UpCg",
					"AQAAAAAAAAABAAAAUgEAAAAAAACAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					360,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAG4HAAAAAAAAbwcAAAAAAAAAAAAAbwcAAAAAAABvBwAAAAAAAMYAAAAKI3NldChDTUFLRV9JTlNUQUxMX1JQQVRIICIke0NNQUtFX0lOU1RBTExfUlBBVEh9OyR7Q01BS0VfSU5TVEFMTF9QUkVGSVh9L2xpYjske0NNQUtFX0lOU1RBTExfUFJFRklYfS9saWIvcXVpY2tqcyIpCiNzZXQoQ01BS0VfQlVJTERfUlBBVEggIiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfTske0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0iKQo",
					"AQAAAAAAAAABAAAAbgcAAAAAAAA0CAAAAAAAAAAAAAAAAPC/"
				],
				[
					365,
					1,
					"left_delete",
					null,
					"AQAAAMIHAAAAAAAAwgcAAAAAAADmAAAACiNzZXQoQ01BS0VfQlVJTERfV0lUSF9JTlNUQUxMX1JQQVRIIFRSVUUgQ0FDSEUgQk9PTCAiQnVpbGQgaW5zdGFsbGFibGUgYmluYXJpZXMgd2l0aCAtV2wsLXJwYXRoPVBSRUZJWCIgRk9SQ0UpCiNzZXQoQ01BS0VfSU5TVEFMTF9SUEFUSF9VU0VfTElOS19QQVRIIEZBTFNFIENBQ0hFIEJPT0wgIkFkZCBkaXJzIGluIHJ1bnRpbWUgc2VhcmNoIHBhdGggdG8gdGhlIGluc3RhbGwgcnBhdGgiIEZPUkNFKQo",
					"AQAAAAAAAAABAAAAwgcAAAAAAACoCAAAAAAAAAAAAAAAAPC/"
				],
				[
					374,
					2,
					"left_delete",
					null,
					"AgAAAGsRAAAAAAAAaxEAAAAAAAD5AQAACiNbWwpjaGVja19jX2NvbXBpbGVyX2ZsYWcoIi1Xbm8tdW51c2VkLXZhbHVlIiBXQVJOX05PX1VOVVNFRF9WQUxVRSkKaWYoV0FSTl9OT19VTlVTRURfVkFMVUUpCiAgc2V0KENNQUtFX0NfRkxBR1MgIiR7Q01BS0VfQ19GTEFHU30gLVduby11bnVzZWQtdmFsdWUiICkKICBzZXQoQ01BS0VfQ1hYX0ZMQUdTICIke0NNQUtFX0NYWF9GTEFHU30gLVduby11bnVzZWQtdmFsdWUiICkKZW5kaWYoV0FSTl9OT19VTlVTRURfVkFMVUUpCgoKY2hlY2tfY19jb21waWxlcl9mbGFnKCItV25vLXVudXNlZC12YXJpYWJsZSIgV0FSTl9OT19VTlVTRURfVkFSSUFCTEUpCmlmKFdBUk5fTk9fVU5VU0VEX1ZBUklBQkxFKQogIHNldChDTUFLRV9DX0ZMQUdTICIke0NNQUtFX0NfRkxBR1N9IC1Xbm8tdW51c2VkLXZhcmlhYmxlIiApCiAgc2V0KENNQUtFX0NYWF9GTEFHUyAiJHtDTUFLRV9DWFhfRkxBR1N9IC1Xbm8tdW51c2VkLXZhcmlhYmxlIiApCmVuZGlmKFdBUk5fTk9fVU5VU0VEX1ZBUklBQkxFKQpdXWoRAAAAAAAAahEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAaxEAAAAAAABkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					381,
					1,
					"left_delete",
					null,
					"AQAAAC4SAAAAAAAALhIAAAAAAABfAAAACiMgaWYoIiR7Q01BS0VfQlVJTERfVFlQRX0iIFNUUkVRVUFMICJEZWJ1ZyIpCgojIG9wdGlvbihVU0VfRUZFTkNFICJFbmFibGUgZWxlY3RyaWMgZmVuY2UiIE9GRik",
					"AQAAAAAAAAABAAAALhIAAAAAAACNEgAAAAAAAAAAAAAAAPC/"
				],
				[
					384,
					1,
					"left_delete",
					null,
					"AQAAAJwSAAAAAAAAnBIAAAAAAABBAAAAIyBsaXN0KEFQUEVORCBQTE9UQ1ZfREVGUyBERUJVRz0xKQoKIyBhZGRfZGVmaW5pdGlvbnMoLURERUJVRz0xKQo",
					"AQAAAAAAAAABAAAAnBIAAAAAAADdEgAAAAAAAAAAAAAAAAAA"
				],
				[
					390,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAALgXAAAAAAAAuRcAAAAAAAAAAAAAuRcAAAAAAAC5FwAAAAAAADEAAAAKIyBlbmRpZigiJHtDTUFLRV9CVUlMRF9UWVBFfSIgU1RSRVFVQUwgIkRlYnVnIikK",
					"AQAAAAAAAAABAAAAuBcAAAAAAADpFwAAAAAAAAAAAAAAAPC/"
				],
				[
					398,
					3,
					"left_delete",
					null,
					"AwAAALkXAAAAAAAAuRcAAAAAAACZAAAACmlmKERFQlVHX09VVFBVVCkKICAjIGxpc3QoQVBQRU5EIFBMT1RDVl9ERUZTIERFQlVHX09VVFBVVD0xKQplbmRpZihERUJVR19PVVRQVVQpCmlmKERFQlVHX01BVCkKICAjIGxpc3QoQVBQRU5EIFBMT1RDVl9ERUZTIERFQlVHX01BVD0xKQplbmRpZihERUJVR19NQVQpuBcAAAAAAAC4FwAAAAAAAAEAAAAgtxcAAAAAAAC3FwAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAuRcAAAAAAABSGAAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					2,
					"left_delete",
					null,
					"AgAAAAsZAAAAAAAACxkAAAAAAAChAAAAIyBtZXNzYWdlKCJxdWlja2pzX0JJTkFSWV9ESVI6ICR7cXVpY2tqc19CSU5BUllfRElSfSIpCgojIGlmKEhBVkVfRUZFTkNFKSBpZihVU0VfRUZFTkNFKSBzZXQoRUxFQ1RSSUNGRU5DRV9MSUJSQVJZIGVmZW5jZSkgZW5kaWYoVVNFX0VGRU5DRSkKIyBlbmRpZihIQVZFX0VGRU5DRSkKGQAAAAAAAAoZAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAArBkAAAAAAAALGQAAAAAAAAAAAAAAAPC/"
				],
				[
					409,
					1,
					"left_delete",
					null,
					"AQAAACcaAAAAAAAAJxoAAAAAAABRAAAAIyBvcHRpb24oUVVJQ0tKU19NT0RVTEVTICJCdWlsZCAuc28gbW9kdWxlcyBmb3IgcXVpY2tqcyIgIiR7QlVJTERfU0hBUkVEX0xJQlN9IikK",
					"AQAAAAAAAAABAAAAJxoAAAAAAAB4GgAAAAAAAAAAAAAAAPC/"
				],
				[
					414,
					2,
					"left_delete",
					null,
					"AgAAAM0aAAAAAAAAzRoAAAAAAABTAAAAI1tbCmFkZF9leGVjdXRhYmxlKHRlc3QtZGxmY24gdGVzdC1kbGZjbi5jKQp0YXJnZXRfbGlua19saWJyYXJpZXModGVzdC1kbGZjbiBkbCkKXV3MGgAAAAAAAMwaAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAIBsAAAAAAADNGgAAAAAAAAAAAAAAAPC/"
				],
				[
					415,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAzBoAAAAAAADMGgAAAAAAAAAAAAAAAPC/"
				],
				[
					433,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAMAHAAAAAAAAwQcAAAAAAAAAAAAAwQcAAAAAAADCBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAcAAAAAAADABwAAAAAAAAAAAAAAAPC/"
				],
				[
					435,
					1,
					"insert",
					{
						"characters": "find_quickjs/"
					},
					"DQAAAMEHAAAAAAAAwgcAAAAAAAAAAAAAwgcAAAAAAADDBwAAAAAAAAAAAADDBwAAAAAAAMQHAAAAAAAAAAAAAMQHAAAAAAAAxQcAAAAAAAAAAAAAxQcAAAAAAADGBwAAAAAAAAAAAADGBwAAAAAAAMcHAAAAAAAAAAAAAMcHAAAAAAAAyAcAAAAAAAAAAAAAyAcAAAAAAADJBwAAAAAAAAAAAADJBwAAAAAAAMoHAAAAAAAAAAAAAMoHAAAAAAAAywcAAAAAAAAAAAAAywcAAAAAAADMBwAAAAAAAAAAAADMBwAAAAAAAM0HAAAAAAAAAAAAAM0HAAAAAAAAzgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQcAAAAAAADBBwAAAAAAAAAAAAAAAAAA"
				],
				[
					436,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAM4HAAAAAAAA0AcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzgcAAAAAAADOBwAAAAAAAAAAAAAAAPC/"
				],
				[
					438,
					3,
					"left_delete",
					null,
					"AwAAAM8HAAAAAAAAzwcAAAAAAAABAAAAKc4HAAAAAAAAzgcAAAAAAAABAAAAKM0HAAAAAAAAzQcAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAA0AcAAAAAAADQBwAAAAAAAAAAAAAAAPC/"
				],
				[
					439,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAM0HAAAAAAAAzwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQcAAAAAAADNBwAAAAAAAAAAAAAAAPC/"
				],
				[
					464,
					1,
					"cut",
					null,
					"AQAAAMEHAAAAAAAAwQcAAAAAAAAPAAAAZmluZF9xdWlja2pzKCkK",
					"AQAAAAAAAAABAAAAwQcAAAAAAADQBwAAAAAAAAAAAAAAAPC/"
				],
				[
					465,
					2,
					"paste",
					null,
					"AgAAAMEHAAAAAAAA0AcAAAAAAAAAAAAA0AcAAAAAAADfBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQcAAAAAAADBBwAAAAAAAAAAAAAAAPC/"
				],
				[
					468,
					1,
					"insert",
					{
						"characters": "opencv"
					},
					"BwAAANUHAAAAAAAA1gcAAAAAAAAAAAAA1gcAAAAAAADWBwAAAAAAAAcAAABxdWlja2pz1gcAAAAAAADXBwAAAAAAAAAAAADXBwAAAAAAANgHAAAAAAAAAAAAANgHAAAAAAAA2QcAAAAAAAAAAAAA2QcAAAAAAADaBwAAAAAAAAAAAADaBwAAAAAAANsHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QcAAAAAAADcBwAAAAAAAAAAAAAAAPC/"
				],
				[
					477,
					1,
					"cut",
					null,
					"AQAAAN8HAAAAAAAA3wcAAAAAAAA4AAAAaW5jbHVkZSgke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vY21ha2Uvb3BlbmN2LmNtYWtlKQo",
					"AQAAAAAAAAABAAAA3wcAAAAAAAAXCAAAAAAAAAAAAAAAAPC/"
				],
				[
					480,
					1,
					"paste",
					null,
					"AQAAADYDAAAAAAAAbgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgMAAAAAAAA2AwAAAAAAAAAAAAAAAPC/"
				],
				[
					484,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAYAMAAAAAAABmAwAAAAAAAAAAAAAAAPC/"
				],
				[
					498,
					1,
					"cut",
					null,
					"AQAAAIoRAAAAAAAAihEAAAAAAADDAAAACmNoZWNrX2N4eF9jb21waWxlcl9mbGFnKCItZlBJQyIgRl9PUFRfUElDKQppZihGX09QVF9QSUMpCiAgc2V0KENNQUtFX0NfRkxBR1NfREVCVUcgIiR7Q01BS0VfQ19GTEFHU19ERUJVR30gLWZQSUMiKQogIHNldChDTUFLRV9DWFhfRkxBR1NfREVCVUcgIiR7Q01BS0VfQ1hYX0ZMQUdTX0RFQlVHfSAtZlBJQyIpCmVuZGlmKEZfT1BUX1BJQykK",
					"AQAAAAAAAAABAAAAihEAAAAAAABNEgAAAAAAAAAAAAAAAPC/"
				],
				[
					499,
					1,
					"paste",
					null,
					"AQAAAIoRAAAAAAAATRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAihEAAAAAAACKEQAAAAAAAAAAAAAAAPC/"
				],
				[
					500,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAATRIAAAAAAABNEgAAAAAAAAAAAAAAAPC/"
				],
				[
					505,
					1,
					"paste",
					null,
					"AgAAAIsRAAAAAAAAmREAAAAAAAAAAAAAmREAAAAAAACZEQAAAAAAALUAAABjaGVja19jeHhfY29tcGlsZXJfZmxhZygiLWZQSUMiIEZfUElDKQppZihGX1BJQykKICBzZXQoQ01BS0VfQ19GTEFHU19ERUJVRyAiJHtDTUFLRV9DX0ZMQUdTX0RFQlVHfSAtZlBJQyIpCiAgc2V0KENNQUtFX0NYWF9GTEFHU19ERUJVRyAiJHtDTUFLRV9DWFhfRkxBR1NfREVCVUd9IC1mUElDIikKZW5kaWYoRl9QSUMp",
					"AQAAAAAAAAABAAAAQBIAAAAAAACLEQAAAAAAAAAAAAAAAPC/"
				],
				[
					506,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJkRAAAAAAAAmxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmREAAAAAAACZEQAAAAAAAAAAAAAAAPC/"
				],
				[
					519,
					1,
					"paste",
					null,
					"AgAAAAsSAAAAAAAAHhIAAAAAAAAAAAAAHhIAAAAAAAAeEgAAAAAAAIwCAABjaGVja19jX2NvbXBpbGVyX2ZsYWcoIi1PMCIgT1BUX0NfT1BUX05PTkUpCmNoZWNrX2N4eF9jb21waWxlcl9mbGFnKCItTzAiIE9QVF9DWFhfT1BUX05PTkUpCmlmKE9QVF9DX09QVF9OT05FKQogIGlmKE5PVCAiJHtDTUFLRV9DX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLU8wIikKICAgIHNldChDTUFLRV9DX0ZMQUdTX0RFQlVHICIke0NNQUtFX0NfRkxBR1NfREVCVUd9IC1PMCIgQ0FDSEUgU1RSSU5HICJDIGNvbXBpbGVyIG9wdGlvbnMiIEZPUkNFKQogIGVuZGlmKE5PVCAiJHtDTUFLRV9DX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLU8wIikKZW5kaWYoT1BUX0NfT1BUX05PTkUpCmlmKE9QVF9DWFhfT1BUX05PTkUpCiAgaWYoTk9UICIke0NNQUtFX0NYWF9GTEFHU19ERUJVR30iIE1BVENIRVMgIi1PMCIpCiAgICBzZXQoQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHICIke0NNQUtFX0NYWF9GTEFHU19ERUJVR30gLU8wIiBDQUNIRSBTVFJJTkcgIkMrKyBjb21waWxlciBvcHRpb25zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRk9SQ0UpCiAgZW5kaWYoTk9UICIke0NNQUtFX0NYWF9GTEFHU19ERUJVR30iIE1BVENIRVMgIi1PMCIpCmVuZGlmKE9QVF9DWFhfT1BUX05PTkUp",
					"AQAAAAAAAAABAAAAlxQAAAAAAAALEgAAAAAAAAAAAAAAAPC/"
				],
				[
					520,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAB4SAAAAAAAAIBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHhIAAAAAAAAeEgAAAAAAAAAAAAAAAPC/"
				],
				[
					525,
					1,
					"cut",
					null,
					"AQAAACISAAAAAAAAIhIAAAAAAACNAgAAY2hlY2tfY19jb21waWxlcl9mbGFnKCItZ2dkYiIgT1BUX0NfR19HREIpCmNoZWNrX2N4eF9jb21waWxlcl9mbGFnKCItZ2dkYiIgT1BUX0NYWF9HX0dEQikKaWYoT1BUX0NfR19HREIpCiAgaWYoTk9UICIke0NNQUtFX0NfRkxBR1NfREVCVUd9IiBNQVRDSEVTICItZ2dkYiIpCiAgICBzZXQoQ01BS0VfQ19GTEFHU19ERUJVRyAiJHtDTUFLRV9DX0ZMQUdTX0RFQlVHfSAtZ2dkYiIgQ0FDSEUgU1RSSU5HICJDIGNvbXBpbGVyIG9wdGlvbnMiIEZPUkNFKQogIGVuZGlmKE5PVCAiJHtDTUFLRV9DX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLWdnZGIiKQplbmRpZihPUFRfQ19HX0dEQikKaWYoT1BUX0NYWF9HX0dEQikKICBpZihOT1QgIiR7Q01BS0VfQ1hYX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLWdnZGIiKQogICAgc2V0KENNQUtFX0NYWF9GTEFHU19ERUJVRyAiJHtDTUFLRV9DWFhfRkxBR1NfREVCVUd9IC1nZ2RiIiBDQUNIRSBTVFJJTkcgIkMrKyBjb21waWxlciBvcHRpb25zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGT1JDRSkKICBlbmRpZihOT1QgIiR7Q01BS0VfQ1hYX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLWdnZGIiKQplbmRpZihPUFRfQ1hYX0dfR0RCKQo",
					"AQAAAAAAAAABAAAAIhIAAAAAAACvFAAAAAAAAAAAAAAAAPC/"
				],
				[
					526,
					1,
					"paste",
					null,
					"AQAAACISAAAAAAAANhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhIAAAAAAAAiEgAAAAAAAAAAAAAAAPC/"
				],
				[
					527,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADYSAAAAAAAAOBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANhIAAAAAAAA2EgAAAAAAAAAAAAAAAPC/"
				],
				[
					529,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADgSAAAAAAAAORIAAAAAAAAAAAAAORIAAAAAAAA6EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOBIAAAAAAAA4EgAAAAAAAAAAAAAAAPC/"
				],
				[
					533,
					1,
					"left_delete",
					null,
					"AQAAALUSAAAAAAAAtRIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAthIAAAAAAAC2EgAAAAAAAAAAAAAAAPC/"
				],
				[
					540,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD4FQAAY21ha2VfbWluaW11bV9yZXF1aXJlZChWRVJTSU9OIDMuMCkKcHJvamVjdChxanMtb3BlbmN2KQoKc2V0KERJU0FCTEVfV0VSUk9SIFRSVUUgQ0FDSEUgQk9PTCAiRGlzYWJsZSAtV2Vycm9yIGZsYWciIEZPUkNFKQoKc2V0KENNQUtFX0JVSUxEX1RZUEUgIkRlYnVnIiBDQUNIRSBTVFJJTkcgImJ1aWxkIHR5cGUiKQoKc2V0X3Byb3BlcnR5KENBQ0hFIENNQUtFX0JVSUxEX1RZUEUgUFJPUEVSVFkgU1RSSU5HUyBEZWJ1ZyBSZWxlYXNlIE1pblNpemVSZWwgUmVsV2l0aERlYkluZm8pCgpzZXQocXVpY2tqc19zb3VyY2VzX3Jvb3QgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3F1aWNranMpCgppZihOT1QgQ01BS0VfQlVJTERfVFlQRSBPUiBDTUFLRV9CVUlMRF9UWVBFIFNUUkVRVUFMICIiKQogIHNldChDTUFLRV9CVUlMRF9UWVBFICJEZWJ1ZyIpCmVuZGlmKE5PVCBDTUFLRV9CVUlMRF9UWVBFIE9SIENNQUtFX0JVSUxEX1RZUEUgU1RSRVFVQUwgIiIpCgppZihXSU4zMikKICBzZXQoTElCV1MyXzMyIHdzMl8zMikKZWxzZShXSU4zMikKCmVuZGlmKFdJTjMyKQoKaW5jbHVkZShGaW5kVGhyZWFkcykKaW5jbHVkZShDaGVja0NDb21waWxlckZsYWcpCmluY2x1ZGUoQ2hlY2tDWFhDb21waWxlckZsYWcpCmluY2x1ZGUoQ2hlY2tMaWJyYXJ5RXhpc3RzKQppbmNsdWRlKENoZWNrVHlwZVNpemUpCmluY2x1ZGUoRmluZFBrZ0NvbmZpZykKaW5jbHVkZSgke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vY21ha2UvZnVuY3Rpb25zLmNtYWtlKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9GaW5kUXVpY2tKUy5jbWFrZSkKaW5jbHVkZSgke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vY21ha2Uvb3BlbmN2LmNtYWtlKQoKaWYoRU5BQkxFX0NDQUNIRSkKICBpbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9jY2FjaGUuY21ha2UpCiAgZW5hYmxlX2NjYWNoZSgpCmVuZGlmKEVOQUJMRV9DQ0FDSEUpCgptYWNybyhjaGVja19zaXplIFRZUEUgVkFSKQogIGNoZWNrX3R5cGVfc2l6ZSgiJHtUWVBFfSIgQ01BS0VfJHtWQVJ9KQogIGlmKCR7Q01BS0VfJHtWQVJ9fSkKICAgICMgbGlzdChBUFBFTkQgUExPVENWX0RFRlMgJHtWQVJ9PSR7Q01BS0VfJHtWQVJ9fSkKICBlbmRpZigke0NNQUtFXyR7VkFSfX0pCiAgbWVzc2FnZShTVEFUVVMgInNpemUgb2YgJHtUWVBFfSAke0NNQUtFXyR7VkFSfX0iKQplbmRtYWNybyhjaGVja19zaXplIFRZUEUgVkFSKQoKY2hlY2tfc2l6ZSgibG9uZyIgU0laRU9GX0xPTkcpCmNoZWNrX3NpemUoImxvbmcgbG9uZyIgU0laRU9GX0xPTkdfTE9ORykKY2hlY2tfc2l6ZSgic2l6ZV90IiBTSVpFT0ZfU0laRV9UKQoKaWYoTk9UIFBPU0lUSU9OX0lOREVQRU5ERU5UX0NPREUpCiAgc2V0KFBPU0lUSU9OX0lOREVQRU5ERU5UX0NPREUgT04pCmVuZGlmKE5PVCBQT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFKQpvcHRpb24oQlVJTERfU0hBUkVEX0xJQlMgIkJ1aWxkIHNoYXJlZCBsaWJyYXJpZXMiIE9OKQoKbWVzc2FnZSgiVGhyZWFkIGxpYnJhcnk6ICR7Q01BS0VfVEhSRUFEX0xJQlNfSU5JVH0iKQppZihDTUFLRV9USFJFQURfTElCU19JTklUKQogIHNldChMSUJQVEhSRUFEICR7Q01BS0VfVEhSRUFEX0xJQlNfSU5JVH0pCmVuZGlmKENNQUtFX1RIUkVBRF9MSUJTX0lOSVQpCgpjaGVja19saWJyYXJ5X2V4aXN0cyhtIGF0YW4yIC91c3IvbGliIEhBVkVfTElCTSkKaWYoSEFWRV9MSUJNKQogIHNldChMSUJNIG0pCiAgIyBtZXNzYWdlKCJGb3VuZCBtYXRoIGxpYnJhcnk6ICR7TElCTX0iKQplbmRpZihIQVZFX0xJQk0pCgpjaGVja19saWJyYXJ5X2V4aXN0cyhkbCBkbG9wZW4gL3Vzci9saWIgSEFWRV9MSUJETCkKaWYoSEFWRV9MSUJETCkKICBzZXQoTElCREwgZGwpCiAgIyBtZXNzYWdlKCJGb3VuZCBkbGZjbiBsaWJyYXJ5OiAke0xJQkRMfSIpCmVuZGlmKEhBVkVfTElCREwpCgpjaGVja19saWJyYXJ5X2V4aXN0cyhqc29uLWNwcCBaTjRZQU1MNmRldGFpbDlub2RlX2RhdGE5cmVzZXRfbWFwRXYgL3VzciBKU09OX0NQUCkKCmZpbmRfcXVpY2tqcygpCmZpbmRfb3BlbmN2KCkKCgpzZXQoQ01BS0VfSU5TVEFMTF9SUEFUSCAiJHtPUEVOQ1ZfTElCX0RJUn0iIENBQ0hFIFBBVEggIkJ1aWxkIHdpdGggaW5zdGFsbCBycGF0aCIgRk9SQ0UpCgppbmNsdWRlX2RpcmVjdG9yaWVzKAogICR7T1BFTkNWX0lOQ0xVREVfRElSU30gJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9ICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9vcGVuY3YKICAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vc3JjICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9pbmNsdWRlCiAgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3F1aWNranMpCgpmb3JlYWNoKENYWF9TVEFOREFSRCBjKysyMCBjKysxNyBjKysxNCBjKysxMSkKICBzdHJpbmcoUkVQTEFDRSAiYysrIiAiQ1BMVVNQTFVTIiBDWFhfU1RBTkRBUkRfTlVNICIke0NYWF9TVEFOREFSRH0iKQogIHNldChDTUFLRV9SRVFVSVJFRF9RVUlFVCBUUlVFKQogIGNoZWNrX2N4eF9jb21waWxlcl9mbGFnKCItc3RkPSR7Q1hYX1NUQU5EQVJEfSIgQ1hYX1NUQU5EQVJEXyR7Q1hYX1NUQU5EQVJEX05VTX0pCiAgc2V0KENNQUtFX1JFUVVJUkVEX1FVSUVUIEZBTFNFKQogIGlmKENYWF9TVEFOREFSRF8ke0NYWF9TVEFOREFSRF9OVU19KQogICAgc3RyaW5nKFJFR0VYIFJFUExBQ0UgIlxcKyIgIngiIENYWF9TVEFOREFSRF9OQU1FICIke0NYWF9TVEFOREFSRF9WQUxVRX0iKQogICAgc3RyaW5nKFRPVVBQRVIgIiR7Q1hYX1NUQU5EQVJEX05BTUV9IiBDWFhfU1RBTkRBUkRfTkFNRSkKICAgIHN0cmluZyhSRUdFWCBSRVBMQUNFICJDWFgiICIiIENYWF9TVEFOREFSRF9WRVJTSU9OICIke0NYWF9TVEFOREFSRF9OQU1FfSIpCiAgICBtZXNzYWdlKCJDWFhfU1RBTkRBUkRfTkFNRSA9ICR7Q1hYX1NUQU5EQVJEX05BTUV9IikKICAgIG1lc3NhZ2UoIkNYWF9TVEFOREFSRF9WRVJTSU9OID0gJHtDWFhfU1RBTkRBUkRfVkVSU0lPTn0iKQoKICAgIGlmKENYWF9TVEFOREFSRF9OQU1FKQogICAgICBhZGRfZGVmaW5pdGlvbnMoLUQiJHtDWFhfU1RBTkRBUkRfTkFNRX0iKQogICAgZW5kaWYoQ1hYX1NUQU5EQVJEX05BTUUpCgogICAgc2V0KENYWF9TVEFOREFSRF9WQUxVRSAiJHtDWFhfU1RBTkRBUkR9IiBDQUNIRSBTVFJJTkcgIkMrKyBzdGFuZGFyZCIgRk9SQ0UpCiAgICBzZXQoQ1hYX1NUQU5EQVJEX0ZMQUcgIi1zdGQ9JHtDWFhfU1RBTkRBUkR9IiBDQUNIRSBTVFJJTkcgIkMrKyBzdGFuZGFyZCBhcmd1bWVudCIgRk9SQ0UpCiAgICBzZXQoQ01BS0VfQ1hYX0ZMQUdTICIke0NNQUtFX0NYWF9GTEFHU30gJHtDWFhfU1RBTkRBUkRfRkxBR30iKQogICAgYnJlYWsoKQogIGVuZGlmKENYWF9TVEFOREFSRF8ke0NYWF9TVEFOREFSRF9OVU19KQplbmRmb3JlYWNoKCkKCnN0cmluZyhSRUdFWCBSRVBMQUNFICJjXFwrXFwrIiAiIiBDWFhfU1RBTkRBUkRfVkVSU0lPTiAiJHtDWFhfU1RBTkRBUkRfVkFMVUV9IikKYWRkX2RlZmluaXRpb25zKC1EQ1hYX1NUQU5EQVJEPSR7Q1hYX1NUQU5EQVJEX1ZFUlNJT059KQoKbWVzc2FnZSgiQysrIHN0YW5kYXJkOiAke0NYWF9TVEFOREFSRF9WQUxVRX0iKQoKbWFjcm8oTk9XQVJOX0ZMQUcgRkxBRykKICBjYW5vbmljYWxpemUoVkFSTkFNRSAiJHtGTEFHfSIpCiAgY2hlY2tfY19jb21waWxlcl9mbGFnKCIke0ZMQUd9IiAiJHtWQVJOQU1FfSIpCiAgI2R1bXAoJHtWQVJOQU1FfSkKCiAgaWYoJHtWQVJOQU1FfSkKICAgIHNldChDTUFLRV9DX0ZMQUdTICIke0NNQUtFX0NfRkxBR1N9ICR7RkxBR30iKQogICAgc2V0KENNQUtFX0NYWF9GTEFHUyAiJHtDTUFLRV9DWFhfRkxBR1N9ICR7RkxBR30iKQoKICBlbmRpZigke1ZBUk5BTUV9KQplbmRtYWNybyhOT1dBUk5fRkxBRyBGTEFHKQoKc3RyaW5nKFJFR0VYIFJFUExBQ0UgIiAtV2FsbCIgIiIgQ01BS0VfQ19GTEFHUyAiJHtDTUFLRV9DX0ZMQUdTfSIpCnN0cmluZyhSRUdFWCBSRVBMQUNFICIgLVdhbGwiICIiIENNQUtFX0NYWF9GTEFHUyAiJHtDTUFLRV9DWFhfRkxBR1N9IikKCm5vd2Fybl9mbGFnKC1Xbm8tdW51c2VkLXZhbHVlKQpub3dhcm5fZmxhZygtV25vLXVudXNlZC12YXJpYWJsZSkKCmlmKCIke0NNQUtFX0NYWF9DT01QSUxFUl9JRH0iIE1BVENIRVMgIi4qQ2xhbmcuKiIpCiAgbm93YXJuX2ZsYWcoLVduby1kZXByZWNhdGVkLWFub24tZW51bS1lbnVtLWNvbnZlcnNpb24pCiAgbm93YXJuX2ZsYWcoLVduby1leHRlcm4tYy1jb21wYXQpCiAgbm93YXJuX2ZsYWcoLVduby1pbXBsaWNpdC1pbnQtZmxvYXQtY29udmVyc2lvbikKICBub3dhcm5fZmxhZygtV25vLWRlcHJlY2F0ZWQtZW51bS1lbnVtLWNvbnZlcnNpb24pCmVuZGlmKCIke0NNQUtFX0NYWF9DT01QSUxFUl9JRH0iIE1BVENIRVMgIi4qQ2xhbmcuKiIpCgojZHVtcChDTUFLRV9DX0ZMQUdTIENNQUtFX0NYWF9GTEFHUykKI2R1bXAoQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHKQoKY2hlY2tfcGljX2ZsYWcoKQoKc2V0KERFQlVHX09VVFBVVCBUUlVFIENBQ0hFIEJPT0wgIkRlYnVnIG91dHB1dCIgRk9SQ0UpCnNldChERUJVR19NQVQgRkFMU0UgQ0FDSEUgQk9PTCAiRGVidWcgY3Y6Ok1hdCIgRk9SQ0UpCgpjaGVja19vcHRfbm9uZV9mbGFnKCkKCmNoZWNrX2RlYnVnX2dkYl9mbGFnKCkKCgpjaGVja19jX2NvbXBpbGVyX2ZsYWcoIi1mbHRvIiBIQVNfRl9MVE9fRkxBRykKCmlmKEhBU19GX0xUT19GTEFHKQogIG9wdGlvbihFTkFCTEVfTFRPICJFbmFibGUgbGluay10aW1lIG9wdGltaXphdGlvbiIgT0ZGKQplbmRpZihIQVNfRl9MVE9fRkxBRykKCmlmKEVOQUJMRV9MVE8pCiAgc2V0KENNQUtFX0NfRkxBR1MgIiR7Q01BS0VfQ19GTEFHU30gLWZsdG8iKQogIHNldChDTUFLRV9FWEVfTElOS0VSX0ZMQUdTICIke0NNQUtFX0VYRV9MSU5LRVJfRkxBR1N9IC1mbHRvIikKZW5kaWYoRU5BQkxFX0xUTykKCmxpbmtfZGlyZWN0b3JpZXMoQkVGT1JFICR7cXVpY2tqc19CSU5BUllfRElSfSkKCmxpbmtfZGlyZWN0b3JpZXMoIiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfS9xdWlja2pzIikKCm1hY3JvKGZpbmRfc3RhdGljX2xpYnJhcnkgVkFSIE5BTUUpCiAgZmluZF9saWJyYXJ5KCR7VkFSfSBOQU1FUyBsaWIke05BTUV9LmEgUEFUSFMgIiR7Q01BS0VfSU5TVEFMTF9QUkVGSVh9L2xpYiIgTk9fREVGQVVMVF9QQVRIKQplbmRtYWNybygpCgpzZXQoUVVJQ0tKU19MSUJSQVJZIHF1aWNranMpCmxpbmtfZGlyZWN0b3JpZXMoJHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9L3F1aWNranMpCgpvcHRpb24oUVVJQ0tKU19NT0RVTEVTICJCdWlsZCAuc28gbW9kdWxlcyBmb3IgcXVpY2tqcyIgT04pCgppZihRVUlDS0pTX01PRFVMRVMpCiAgaW5jbHVkZSgke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vY21ha2UvanMtYmluZGluZ3MuY21ha2UpCmVuZGlmKFFVSUNLSlNfTU9EVUxFUykKCm9wdGlvbihCVUlMRF9RVUlDS0pTICJCdWlsZCBRdWlja0pTIiBPTikKCmZpbGUoR0xPQiBPUEVOQ1ZfU09VUkNFUyAqLmhwcCAqLmNwcCkKI2R1bXAoT1BFTkNWX1NPVVJDRVMpCgptYWtlX3NoYXJlZF9tb2R1bGUob3BlbmN2ICR7T1BFTkNWX1NPVVJDRVN9KQojIG1ha2VfanNfYmluZGluZ3MoKQoAAAAAAAAAAPgVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIRIAAAAAAAAhEgAAAAAAAAAAAAAAAPC/"
				],
				[
					552,
					1,
					"cut",
					null,
					"AQAAAEwJAAAAAAAATAkAAAAAAADWBAAAZm9yZWFjaChDWFhfU1RBTkRBUkQgYysrMjAgYysrMTcgYysrMTQgYysrMTEpCiAgc3RyaW5nKFJFUExBQ0UgImMrKyIgIkNQTFVTUExVUyIgQ1hYX1NUQU5EQVJEX05VTSAiJHtDWFhfU1RBTkRBUkR9IikKICBzZXQoQ01BS0VfUkVRVUlSRURfUVVJRVQgVFJVRSkKICBjaGVja19jeHhfY29tcGlsZXJfZmxhZygiLXN0ZD0ke0NYWF9TVEFOREFSRH0iIENYWF9TVEFOREFSRF8ke0NYWF9TVEFOREFSRF9OVU19KQogIHNldChDTUFLRV9SRVFVSVJFRF9RVUlFVCBGQUxTRSkKICBpZihDWFhfU1RBTkRBUkRfJHtDWFhfU1RBTkRBUkRfTlVNfSkKICAgIHN0cmluZyhSRUdFWCBSRVBMQUNFICJcXCsiICJ4IiBDWFhfU1RBTkRBUkRfTkFNRSAiJHtDWFhfU1RBTkRBUkRfVkFMVUV9IikKICAgIHN0cmluZyhUT1VQUEVSICIke0NYWF9TVEFOREFSRF9OQU1FfSIgQ1hYX1NUQU5EQVJEX05BTUUpCiAgICBzdHJpbmcoUkVHRVggUkVQTEFDRSAiQ1hYIiAiIiBDWFhfU1RBTkRBUkRfVkVSU0lPTiAiJHtDWFhfU1RBTkRBUkRfTkFNRX0iKQogICAgbWVzc2FnZSgiQ1hYX1NUQU5EQVJEX05BTUUgPSAke0NYWF9TVEFOREFSRF9OQU1FfSIpCiAgICBtZXNzYWdlKCJDWFhfU1RBTkRBUkRfVkVSU0lPTiA9ICR7Q1hYX1NUQU5EQVJEX1ZFUlNJT059IikKCiAgICBpZihDWFhfU1RBTkRBUkRfTkFNRSkKICAgICAgYWRkX2RlZmluaXRpb25zKC1EIiR7Q1hYX1NUQU5EQVJEX05BTUV9IikKICAgIGVuZGlmKENYWF9TVEFOREFSRF9OQU1FKQoKICAgIHNldChDWFhfU1RBTkRBUkRfVkFMVUUgIiR7Q1hYX1NUQU5EQVJEfSIgQ0FDSEUgU1RSSU5HICJDKysgc3RhbmRhcmQiIEZPUkNFKQogICAgc2V0KENYWF9TVEFOREFSRF9GTEFHICItc3RkPSR7Q1hYX1NUQU5EQVJEfSIgQ0FDSEUgU1RSSU5HICJDKysgc3RhbmRhcmQgYXJndW1lbnQiIEZPUkNFKQogICAgc2V0KENNQUtFX0NYWF9GTEFHUyAiJHtDTUFLRV9DWFhfRkxBR1N9ICR7Q1hYX1NUQU5EQVJEX0ZMQUd9IikKICAgIGJyZWFrKCkKICBlbmRpZihDWFhfU1RBTkRBUkRfJHtDWFhfU1RBTkRBUkRfTlVNfSkKZW5kZm9yZWFjaCgpCgpzdHJpbmcoUkVHRVggUkVQTEFDRSAiY1xcK1xcKyIgIiIgQ1hYX1NUQU5EQVJEX1ZFUlNJT04gIiR7Q1hYX1NUQU5EQVJEX1ZBTFVFfSIpCmFkZF9kZWZpbml0aW9ucygtRENYWF9TVEFOREFSRD0ke0NYWF9TVEFOREFSRF9WRVJTSU9OfSkKCm1lc3NhZ2UoIkMrKyBzdGFuZGFyZDogJHtDWFhfU1RBTkRBUkRfVkFMVUV9Iik",
					"AQAAAAAAAAABAAAAIg4AAAAAAABMCQAAAAAAAAAAAAAAAPC/"
				],
				[
					553,
					1,
					"paste",
					null,
					"AQAAAEwJAAAAAAAAYwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAkAAAAAAABMCQAAAAAAAAAAAAAAAPC/"
				],
				[
					554,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGMJAAAAAAAAZQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwkAAAAAAABjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					562,
					1,
					"cut",
					null,
					"AQAAAGYJAAAAAAAAZgkAAAAAAAAqAQAACm1hY3JvKE5PV0FSTl9GTEFHIEZMQUcpCiAgY2Fub25pY2FsaXplKFZBUk5BTUUgIiR7RkxBR30iKQogIGNoZWNrX2NfY29tcGlsZXJfZmxhZygiJHtGTEFHfSIgIiR7VkFSTkFNRX0iKQogICMgZHVtcCgke1ZBUk5BTUV9KQoKICBpZigke1ZBUk5BTUV9KQogICAgc2V0KENNQUtFX0NfRkxBR1MgIiR7Q01BS0VfQ19GTEFHU30gJHtGTEFHfSIpCiAgICBzZXQoQ01BS0VfQ1hYX0ZMQUdTICIke0NNQUtFX0NYWF9GTEFHU30gJHtGTEFHfSIpCgogIGVuZGlmKCR7VkFSTkFNRX0pCmVuZG1hY3JvKE5PV0FSTl9GTEFHIEZMQUcpCg",
					"AQAAAAAAAAABAAAAZgkAAAAAAACQCgAAAAAAAAAAAAAAAPC/"
				],
				[
					563,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAREAAAY21ha2VfbWluaW11bV9yZXF1aXJlZChWRVJTSU9OIDMuMCkKcHJvamVjdChxanMtb3BlbmN2KQoKc2V0KERJU0FCTEVfV0VSUk9SIFRSVUUgQ0FDSEUgQk9PTCAiRGlzYWJsZSAtV2Vycm9yIGZsYWciIEZPUkNFKQoKc2V0KENNQUtFX0JVSUxEX1RZUEUgIkRlYnVnIiBDQUNIRSBTVFJJTkcgImJ1aWxkIHR5cGUiKQoKc2V0X3Byb3BlcnR5KENBQ0hFIENNQUtFX0JVSUxEX1RZUEUgUFJPUEVSVFkgU1RSSU5HUyBEZWJ1ZyBSZWxlYXNlIE1pblNpemVSZWwgUmVsV2l0aERlYkluZm8pCgpzZXQocXVpY2tqc19zb3VyY2VzX3Jvb3QgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3F1aWNranMpCgppZihOT1QgQ01BS0VfQlVJTERfVFlQRSBPUiBDTUFLRV9CVUlMRF9UWVBFIFNUUkVRVUFMICIiKQogIHNldChDTUFLRV9CVUlMRF9UWVBFICJEZWJ1ZyIpCmVuZGlmKE5PVCBDTUFLRV9CVUlMRF9UWVBFIE9SIENNQUtFX0JVSUxEX1RZUEUgU1RSRVFVQUwgIiIpCgppZihXSU4zMikKICBzZXQoTElCV1MyXzMyIHdzMl8zMikKZWxzZShXSU4zMikKCmVuZGlmKFdJTjMyKQoKaW5jbHVkZShGaW5kVGhyZWFkcykKaW5jbHVkZShDaGVja0NDb21waWxlckZsYWcpCmluY2x1ZGUoQ2hlY2tDWFhDb21waWxlckZsYWcpCmluY2x1ZGUoQ2hlY2tMaWJyYXJ5RXhpc3RzKQppbmNsdWRlKENoZWNrVHlwZVNpemUpCmluY2x1ZGUoRmluZFBrZ0NvbmZpZykKaW5jbHVkZSgke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vY21ha2UvZnVuY3Rpb25zLmNtYWtlKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9GaW5kUXVpY2tKUy5jbWFrZSkKaW5jbHVkZSgke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vY21ha2Uvb3BlbmN2LmNtYWtlKQoKaWYoRU5BQkxFX0NDQUNIRSkKICBpbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9jY2FjaGUuY21ha2UpCiAgZW5hYmxlX2NjYWNoZSgpCmVuZGlmKEVOQUJMRV9DQ0FDSEUpCgptYWNybyhjaGVja19zaXplIFRZUEUgVkFSKQogIGNoZWNrX3R5cGVfc2l6ZSgiJHtUWVBFfSIgQ01BS0VfJHtWQVJ9KQogIGlmKCR7Q01BS0VfJHtWQVJ9fSkKICAgICMgbGlzdChBUFBFTkQgUExPVENWX0RFRlMgJHtWQVJ9PSR7Q01BS0VfJHtWQVJ9fSkKICBlbmRpZigke0NNQUtFXyR7VkFSfX0pCiAgbWVzc2FnZShTVEFUVVMgInNpemUgb2YgJHtUWVBFfSAke0NNQUtFXyR7VkFSfX0iKQplbmRtYWNybyhjaGVja19zaXplIFRZUEUgVkFSKQoKY2hlY2tfc2l6ZSgibG9uZyIgU0laRU9GX0xPTkcpCmNoZWNrX3NpemUoImxvbmcgbG9uZyIgU0laRU9GX0xPTkdfTE9ORykKY2hlY2tfc2l6ZSgic2l6ZV90IiBTSVpFT0ZfU0laRV9UKQoKaWYoTk9UIFBPU0lUSU9OX0lOREVQRU5ERU5UX0NPREUpCiAgc2V0KFBPU0lUSU9OX0lOREVQRU5ERU5UX0NPREUgT04pCmVuZGlmKE5PVCBQT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFKQpvcHRpb24oQlVJTERfU0hBUkVEX0xJQlMgIkJ1aWxkIHNoYXJlZCBsaWJyYXJpZXMiIE9OKQoKbWVzc2FnZSgiVGhyZWFkIGxpYnJhcnk6ICR7Q01BS0VfVEhSRUFEX0xJQlNfSU5JVH0iKQppZihDTUFLRV9USFJFQURfTElCU19JTklUKQogIHNldChMSUJQVEhSRUFEICR7Q01BS0VfVEhSRUFEX0xJQlNfSU5JVH0pCmVuZGlmKENNQUtFX1RIUkVBRF9MSUJTX0lOSVQpCgpjaGVja19saWJyYXJ5X2V4aXN0cyhtIGF0YW4yIC91c3IvbGliIEhBVkVfTElCTSkKaWYoSEFWRV9MSUJNKQogIHNldChMSUJNIG0pCiAgIyBtZXNzYWdlKCJGb3VuZCBtYXRoIGxpYnJhcnk6ICR7TElCTX0iKQplbmRpZihIQVZFX0xJQk0pCgpjaGVja19saWJyYXJ5X2V4aXN0cyhkbCBkbG9wZW4gL3Vzci9saWIgSEFWRV9MSUJETCkKaWYoSEFWRV9MSUJETCkKICBzZXQoTElCREwgZGwpCiAgIyBtZXNzYWdlKCJGb3VuZCBkbGZjbiBsaWJyYXJ5OiAke0xJQkRMfSIpCmVuZGlmKEhBVkVfTElCREwpCgpjaGVja19saWJyYXJ5X2V4aXN0cyhqc29uLWNwcCBaTjRZQU1MNmRldGFpbDlub2RlX2RhdGE5cmVzZXRfbWFwRXYgL3VzciBKU09OX0NQUCkKCmZpbmRfcXVpY2tqcygpCmZpbmRfb3BlbmN2KCkKCnNldChDTUFLRV9JTlNUQUxMX1JQQVRIICIke09QRU5DVl9MSUJfRElSfSIgQ0FDSEUgUEFUSCAiQnVpbGQgd2l0aCBpbnN0YWxsIHJwYXRoIiBGT1JDRSkKCmluY2x1ZGVfZGlyZWN0b3JpZXMoCiAgJHtPUEVOQ1ZfSU5DTFVERV9ESVJTfSAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0gJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L29wZW5jdgogICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9zcmMgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2luY2x1ZGUKICAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vcXVpY2tqcykKCmNoZWNrX2N4eF9zdGFuZGFyZF9mbGFnKCkKCnN0cmluZyhSRUdFWCBSRVBMQUNFICIgLVdhbGwiICIiIENNQUtFX0NfRkxBR1MgIiR7Q01BS0VfQ19GTEFHU30iKQpzdHJpbmcoUkVHRVggUkVQTEFDRSAiIC1XYWxsIiAiIiBDTUFLRV9DWFhfRkxBR1MgIiR7Q01BS0VfQ1hYX0ZMQUdTfSIpCgpub3dhcm5fZmxhZygtV25vLXVudXNlZC12YWx1ZSkKbm93YXJuX2ZsYWcoLVduby11bnVzZWQtdmFyaWFibGUpCgppZigiJHtDTUFLRV9DWFhfQ09NUElMRVJfSUR9IiBNQVRDSEVTICIuKkNsYW5nLioiKQogIG5vd2Fybl9mbGFnKC1Xbm8tZGVwcmVjYXRlZC1hbm9uLWVudW0tZW51bS1jb252ZXJzaW9uKQogIG5vd2Fybl9mbGFnKC1Xbm8tZXh0ZXJuLWMtY29tcGF0KQogIG5vd2Fybl9mbGFnKC1Xbm8taW1wbGljaXQtaW50LWZsb2F0LWNvbnZlcnNpb24pCiAgbm93YXJuX2ZsYWcoLVduby1kZXByZWNhdGVkLWVudW0tZW51bS1jb252ZXJzaW9uKQplbmRpZigiJHtDTUFLRV9DWFhfQ09NUElMRVJfSUR9IiBNQVRDSEVTICIuKkNsYW5nLioiKQoKIyBkdW1wKENNQUtFX0NfRkxBR1MgQ01BS0VfQ1hYX0ZMQUdTKSBkdW1wKENNQUtFX0NYWF9GTEFHU19ERUJVRykKCmNoZWNrX3BpY19mbGFnKCkKCnNldChERUJVR19PVVRQVVQgVFJVRSBDQUNIRSBCT09MICJEZWJ1ZyBvdXRwdXQiIEZPUkNFKQpzZXQoREVCVUdfTUFUIEZBTFNFIENBQ0hFIEJPT0wgIkRlYnVnIGN2OjpNYXQiIEZPUkNFKQoKY2hlY2tfb3B0X25vbmVfZmxhZygpCgpjaGVja19kZWJ1Z19nZGJfZmxhZygpCgpjaGVja19jX2NvbXBpbGVyX2ZsYWcoIi1mbHRvIiBIQVNfRl9MVE9fRkxBRykKCmlmKEhBU19GX0xUT19GTEFHKQogIG9wdGlvbihFTkFCTEVfTFRPICJFbmFibGUgbGluay10aW1lIG9wdGltaXphdGlvbiIgT0ZGKQplbmRpZihIQVNfRl9MVE9fRkxBRykKCmlmKEVOQUJMRV9MVE8pCiAgc2V0KENNQUtFX0NfRkxBR1MgIiR7Q01BS0VfQ19GTEFHU30gLWZsdG8iKQogIHNldChDTUFLRV9FWEVfTElOS0VSX0ZMQUdTICIke0NNQUtFX0VYRV9MSU5LRVJfRkxBR1N9IC1mbHRvIikKZW5kaWYoRU5BQkxFX0xUTykKCmxpbmtfZGlyZWN0b3JpZXMoQkVGT1JFICR7cXVpY2tqc19CSU5BUllfRElSfSkKCmxpbmtfZGlyZWN0b3JpZXMoIiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfS9xdWlja2pzIikKCm1hY3JvKGZpbmRfc3RhdGljX2xpYnJhcnkgVkFSIE5BTUUpCiAgZmluZF9saWJyYXJ5KCR7VkFSfSBOQU1FUyBsaWIke05BTUV9LmEgUEFUSFMgIiR7Q01BS0VfSU5TVEFMTF9QUkVGSVh9L2xpYiIgTk9fREVGQVVMVF9QQVRIKQplbmRtYWNybygpCgpzZXQoUVVJQ0tKU19MSUJSQVJZIHF1aWNranMpCmxpbmtfZGlyZWN0b3JpZXMoJHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9L3F1aWNranMpCgpvcHRpb24oUVVJQ0tKU19NT0RVTEVTICJCdWlsZCAuc28gbW9kdWxlcyBmb3IgcXVpY2tqcyIgT04pCgppZihRVUlDS0pTX01PRFVMRVMpCiAgaW5jbHVkZSgke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vY21ha2UvanMtYmluZGluZ3MuY21ha2UpCmVuZGlmKFFVSUNLSlNfTU9EVUxFUykKCm9wdGlvbihCVUlMRF9RVUlDS0pTICJCdWlsZCBRdWlja0pTIiBPTikKCmZpbGUoR0xPQiBPUEVOQ1ZfU09VUkNFUyAqLmhwcCAqLmNwcCkKIyBkdW1wKE9QRU5DVl9TT1VSQ0VTKQoKbWFrZV9zaGFyZWRfbW9kdWxlKG9wZW5jdiAke09QRU5DVl9TT1VSQ0VTfSkKIyBtYWtlX2pzX2JpbmRpbmdzKCkKAAAAAAAAAABHEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgkAAAAAAABmCQAAAAAAAAAAAAAAAPC/"
				],
				[
					571,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGYJAAAAAAAAZwkAAAAAAAAAAAAAZwkAAAAAAABnCQAAAAAAADUBAAAKbWFjcm8oY2hlY2tfbm93YXJuX2ZsYWcgRkxBRykKICBjYW5vbmljYWxpemUoVkFSTkFNRSAiJHtGTEFHfSIpCiAgY2hlY2tfY19jb21waWxlcl9mbGFnKCIke0ZMQUd9IiAiJHtWQVJOQU1FfSIpCiAgIyBkdW1wKCR7VkFSTkFNRX0pCgogIGlmKCR7VkFSTkFNRX0pCiAgICBzZXQoQ01BS0VfQ19GTEFHUyAiJHtDTUFLRV9DX0ZMQUdTfSAke0ZMQUd9IikKICAgIHNldChDTUFLRV9DWFhfRkxBR1MgIiR7Q01BS0VfQ1hYX0ZMQUdTfSAke0ZMQUd9IikKCiAgZW5kaWYoJHtWQVJOQU1FfSkKZW5kbWFjcm8oY2hlY2tfbm93YXJuX2ZsYWcgRkxBRyk",
					"AQAAAAAAAAABAAAAZgkAAAAAAACbCgAAAAAAAAAAAAAAAPC/"
				],
				[
					581,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAATEAAAY21ha2VfbWluaW11bV9yZXF1aXJlZChWRVJTSU9OIDMuMCkKcHJvamVjdChxanMtb3BlbmN2KQoKc2V0KERJU0FCTEVfV0VSUk9SIFRSVUUgQ0FDSEUgQk9PTCAiRGlzYWJsZSAtV2Vycm9yIGZsYWciIEZPUkNFKQoKc2V0KENNQUtFX0JVSUxEX1RZUEUgIkRlYnVnIiBDQUNIRSBTVFJJTkcgImJ1aWxkIHR5cGUiKQoKc2V0X3Byb3BlcnR5KENBQ0hFIENNQUtFX0JVSUxEX1RZUEUgUFJPUEVSVFkgU1RSSU5HUyBEZWJ1ZyBSZWxlYXNlIE1pblNpemVSZWwgUmVsV2l0aERlYkluZm8pCgpzZXQocXVpY2tqc19zb3VyY2VzX3Jvb3QgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3F1aWNranMpCgppZihOT1QgQ01BS0VfQlVJTERfVFlQRSBPUiBDTUFLRV9CVUlMRF9UWVBFIFNUUkVRVUFMICIiKQogIHNldChDTUFLRV9CVUlMRF9UWVBFICJEZWJ1ZyIpCmVuZGlmKE5PVCBDTUFLRV9CVUlMRF9UWVBFIE9SIENNQUtFX0JVSUxEX1RZUEUgU1RSRVFVQUwgIiIpCgppZihXSU4zMikKICBzZXQoTElCV1MyXzMyIHdzMl8zMikKZWxzZShXSU4zMikKCmVuZGlmKFdJTjMyKQoKaW5jbHVkZShGaW5kVGhyZWFkcykKaW5jbHVkZShDaGVja0NDb21waWxlckZsYWcpCmluY2x1ZGUoQ2hlY2tDWFhDb21waWxlckZsYWcpCmluY2x1ZGUoQ2hlY2tMaWJyYXJ5RXhpc3RzKQppbmNsdWRlKENoZWNrVHlwZVNpemUpCmluY2x1ZGUoRmluZFBrZ0NvbmZpZykKaW5jbHVkZSgke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vY21ha2UvZnVuY3Rpb25zLmNtYWtlKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9GaW5kUXVpY2tKUy5jbWFrZSkKaW5jbHVkZSgke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vY21ha2Uvb3BlbmN2LmNtYWtlKQoKaWYoRU5BQkxFX0NDQUNIRSkKICBpbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9jY2FjaGUuY21ha2UpCiAgZW5hYmxlX2NjYWNoZSgpCmVuZGlmKEVOQUJMRV9DQ0FDSEUpCgptYWNybyhjaGVja19zaXplIFRZUEUgVkFSKQogIGNoZWNrX3R5cGVfc2l6ZSgiJHtUWVBFfSIgQ01BS0VfJHtWQVJ9KQogIGlmKCR7Q01BS0VfJHtWQVJ9fSkKICAgICMgbGlzdChBUFBFTkQgUExPVENWX0RFRlMgJHtWQVJ9PSR7Q01BS0VfJHtWQVJ9fSkKICBlbmRpZigke0NNQUtFXyR7VkFSfX0pCiAgbWVzc2FnZShTVEFUVVMgInNpemUgb2YgJHtUWVBFfSAke0NNQUtFXyR7VkFSfX0iKQplbmRtYWNybyhjaGVja19zaXplIFRZUEUgVkFSKQoKY2hlY2tfc2l6ZSgibG9uZyIgU0laRU9GX0xPTkcpCmNoZWNrX3NpemUoImxvbmcgbG9uZyIgU0laRU9GX0xPTkdfTE9ORykKY2hlY2tfc2l6ZSgic2l6ZV90IiBTSVpFT0ZfU0laRV9UKQoKaWYoTk9UIFBPU0lUSU9OX0lOREVQRU5ERU5UX0NPREUpCiAgc2V0KFBPU0lUSU9OX0lOREVQRU5ERU5UX0NPREUgT04pCmVuZGlmKE5PVCBQT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFKQpvcHRpb24oQlVJTERfU0hBUkVEX0xJQlMgIkJ1aWxkIHNoYXJlZCBsaWJyYXJpZXMiIE9OKQoKbWVzc2FnZSgiVGhyZWFkIGxpYnJhcnk6ICR7Q01BS0VfVEhSRUFEX0xJQlNfSU5JVH0iKQppZihDTUFLRV9USFJFQURfTElCU19JTklUKQogIHNldChMSUJQVEhSRUFEICR7Q01BS0VfVEhSRUFEX0xJQlNfSU5JVH0pCmVuZGlmKENNQUtFX1RIUkVBRF9MSUJTX0lOSVQpCgpjaGVja19saWJyYXJ5X2V4aXN0cyhtIGF0YW4yIC91c3IvbGliIEhBVkVfTElCTSkKaWYoSEFWRV9MSUJNKQogIHNldChMSUJNIG0pCiAgIyBtZXNzYWdlKCJGb3VuZCBtYXRoIGxpYnJhcnk6ICR7TElCTX0iKQplbmRpZihIQVZFX0xJQk0pCgpjaGVja19saWJyYXJ5X2V4aXN0cyhkbCBkbG9wZW4gL3Vzci9saWIgSEFWRV9MSUJETCkKaWYoSEFWRV9MSUJETCkKICBzZXQoTElCREwgZGwpCiAgIyBtZXNzYWdlKCJGb3VuZCBkbGZjbiBsaWJyYXJ5OiAke0xJQkRMfSIpCmVuZGlmKEhBVkVfTElCREwpCgpjaGVja19saWJyYXJ5X2V4aXN0cyhqc29uLWNwcCBaTjRZQU1MNmRldGFpbDlub2RlX2RhdGE5cmVzZXRfbWFwRXYgL3VzciBKU09OX0NQUCkKCmZpbmRfcXVpY2tqcygpCmZpbmRfb3BlbmN2KCkKCnNldChDTUFLRV9JTlNUQUxMX1JQQVRIICIke09QRU5DVl9MSUJfRElSfSIgQ0FDSEUgUEFUSCAiQnVpbGQgd2l0aCBpbnN0YWxsIHJwYXRoIiBGT1JDRSkKCmluY2x1ZGVfZGlyZWN0b3JpZXMoCiAgJHtPUEVOQ1ZfSU5DTFVERV9ESVJTfSAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0gJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L29wZW5jdgogICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9zcmMgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2luY2x1ZGUKICAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vcXVpY2tqcykKCmNoZWNrX2N4eF9zdGFuZGFyZF9mbGFnKCkKIAoKc3RyaW5nKFJFR0VYIFJFUExBQ0UgIiAtV2FsbCIgIiIgQ01BS0VfQ19GTEFHUyAiJHtDTUFLRV9DX0ZMQUdTfSIpCnN0cmluZyhSRUdFWCBSRVBMQUNFICIgLVdhbGwiICIiIENNQUtFX0NYWF9GTEFHUyAiJHtDTUFLRV9DWFhfRkxBR1N9IikKCm5vd2Fybl9mbGFnKC1Xbm8tdW51c2VkLXZhbHVlKQpub3dhcm5fZmxhZygtV25vLXVudXNlZC12YXJpYWJsZSkKCmlmKCIke0NNQUtFX0NYWF9DT01QSUxFUl9JRH0iIE1BVENIRVMgIi4qQ2xhbmcuKiIpCiAgbm93YXJuX2ZsYWcoLVduby1kZXByZWNhdGVkLWFub24tZW51bS1lbnVtLWNvbnZlcnNpb24pCiAgbm93YXJuX2ZsYWcoLVduby1leHRlcm4tYy1jb21wYXQpCiAgbm93YXJuX2ZsYWcoLVduby1pbXBsaWNpdC1pbnQtZmxvYXQtY29udmVyc2lvbikKICBub3dhcm5fZmxhZygtV25vLWRlcHJlY2F0ZWQtZW51bS1lbnVtLWNvbnZlcnNpb24pCmVuZGlmKCIke0NNQUtFX0NYWF9DT01QSUxFUl9JRH0iIE1BVENIRVMgIi4qQ2xhbmcuKiIpCgojIGR1bXAoQ01BS0VfQ19GTEFHUyBDTUFLRV9DWFhfRkxBR1MpIGR1bXAoQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHKQoKY2hlY2tfcGljX2ZsYWcoKQoKc2V0KERFQlVHX09VVFBVVCBUUlVFIENBQ0hFIEJPT0wgIkRlYnVnIG91dHB1dCIgRk9SQ0UpCnNldChERUJVR19NQVQgRkFMU0UgQ0FDSEUgQk9PTCAiRGVidWcgY3Y6Ok1hdCIgRk9SQ0UpCgpjaGVja19vcHRfbm9uZV9mbGFnKCkKCmNoZWNrX2RlYnVnX2dkYl9mbGFnKCkKCmNoZWNrX2NfY29tcGlsZXJfZmxhZygiLWZsdG8iIEhBU19GX0xUT19GTEFHKQoKaWYoSEFTX0ZfTFRPX0ZMQUcpCiAgb3B0aW9uKEVOQUJMRV9MVE8gIkVuYWJsZSBsaW5rLXRpbWUgb3B0aW1pemF0aW9uIiBPRkYpCmVuZGlmKEhBU19GX0xUT19GTEFHKQoKaWYoRU5BQkxFX0xUTykKICBzZXQoQ01BS0VfQ19GTEFHUyAiJHtDTUFLRV9DX0ZMQUdTfSAtZmx0byIpCiAgc2V0KENNQUtFX0VYRV9MSU5LRVJfRkxBR1MgIiR7Q01BS0VfRVhFX0xJTktFUl9GTEFHU30gLWZsdG8iKQplbmRpZihFTkFCTEVfTFRPKQoKbGlua19kaXJlY3RvcmllcyhCRUZPUkUgJHtxdWlja2pzX0JJTkFSWV9ESVJ9KQoKbGlua19kaXJlY3RvcmllcygiJHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9L3F1aWNranMiKQoKbWFjcm8oZmluZF9zdGF0aWNfbGlicmFyeSBWQVIgTkFNRSkKICBmaW5kX2xpYnJhcnkoJHtWQVJ9IE5BTUVTIGxpYiR7TkFNRX0uYSBQQVRIUyAiJHtDTUFLRV9JTlNUQUxMX1BSRUZJWH0vbGliIiBOT19ERUZBVUxUX1BBVEgpCmVuZG1hY3JvKCkKCnNldChRVUlDS0pTX0xJQlJBUlkgcXVpY2tqcykKbGlua19kaXJlY3Rvcmllcygke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0vcXVpY2tqcykKCm9wdGlvbihRVUlDS0pTX01PRFVMRVMgIkJ1aWxkIC5zbyBtb2R1bGVzIGZvciBxdWlja2pzIiBPTikKCmlmKFFVSUNLSlNfTU9EVUxFUykKICBpbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9qcy1iaW5kaW5ncy5jbWFrZSkKZW5kaWYoUVVJQ0tKU19NT0RVTEVTKQoKb3B0aW9uKEJVSUxEX1FVSUNLSlMgIkJ1aWxkIFF1aWNrSlMiIE9OKQoKZmlsZShHTE9CIE9QRU5DVl9TT1VSQ0VTICouaHBwICouY3BwKQojIGR1bXAoT1BFTkNWX1NPVVJDRVMpCgptYWtlX3NoYXJlZF9tb2R1bGUob3BlbmN2ICR7T1BFTkNWX1NPVVJDRVN9KQojIG1ha2VfanNfYmluZGluZ3MoKQoAAAAAAAAAADcQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AkAAAAAAAD/CQAAAAAAAAAAAAAAAPC/"
				],
				[
					604,
					1,
					"left_delete",
					null,
					"AQAAACgEAAAAAAAAKAQAAAAAAABlAAAAICBpZigke0NNQUtFXyR7VkFSfX0pCiAgICAjIGxpc3QoQVBQRU5EIFBMT1RDVl9ERUZTICR7VkFSfT0ke0NNQUtFXyR7VkFSfX0pCiAgZW5kaWYoJHtDTUFLRV8ke1ZBUn19KQo",
					"AQAAAAAAAAABAAAAKAQAAAAAAACNBAAAAAAAAAAAAAAAAPC/"
				],
				[
					607,
					1,
					"cut",
					null,
					"AQAAAOIDAAAAAAAA4gMAAAAAAACYAAAACm1hY3JvKGNoZWNrX3NpemUgVFlQRSBWQVIpCiAgY2hlY2tfdHlwZV9zaXplKCIke1RZUEV9IiBDTUFLRV8ke1ZBUn0pCiAgbWVzc2FnZShTVEFUVVMgInNpemUgb2YgJHtUWVBFfSAke0NNQUtFXyR7VkFSfX0iKQplbmRtYWNybyhjaGVja19zaXplIFRZUEUgVkFSKQo",
					"AQAAAAAAAAABAAAA4gMAAAAAAAB6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					608,
					1,
					"paste",
					null,
					"AQAAAOIDAAAAAAAAegQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gMAAAAAAADiAwAAAAAAAAAAAAAAAPC/"
				],
				[
					611,
					1,
					"cut",
					null,
					"AQAAAOIDAAAAAAAA4gMAAAAAAACYAAAACm1hY3JvKGNoZWNrX3NpemUgVFlQRSBWQVIpCiAgY2hlY2tfdHlwZV9zaXplKCIke1RZUEV9IiBDTUFLRV8ke1ZBUn0pCiAgbWVzc2FnZShTVEFUVVMgInNpemUgb2YgJHtUWVBFfSAke0NNQUtFXyR7VkFSfX0iKQplbmRtYWNybyhjaGVja19zaXplIFRZUEUgVkFSKQo",
					"AQAAAAAAAAABAAAAegQAAAAAAADiAwAAAAAAAAAAAAAAAPC/"
				],
				[
					625,
					1,
					"cut",
					null,
					"AQAAAAYNAAAAAAAABg0AAAAAAACOAAAACm1hY3JvKGZpbmRfc3RhdGljX2xpYnJhcnkgVkFSIE5BTUUpCiAgZmluZF9saWJyYXJ5KCR7VkFSfSBOQU1FUyBsaWIke05BTUV9LmEgUEFUSFMgIiR7Q01BS0VfSU5TVEFMTF9QUkVGSVh9L2xpYiIgTk9fREVGQVVMVF9QQVRIKQplbmRtYWNybygpCg",
					"AQAAAAAAAAABAAAABg0AAAAAAACUDQAAAAAAAAAAAAAAAPC/"
				],
				[
					642,
					1,
					"cut",
					null,
					"AQAAAHQCAAAAAAAAdAIAAAAAAAAzAAAAaW5jbHVkZShDaGVja0xpYnJhcnlFeGlzdHMpCmluY2x1ZGUoQ2hlY2tUeXBlU2l6ZSkK",
					"AQAAAAAAAAABAAAAdAIAAAAAAACnAgAAAAAAAAAAAAAAAPC/"
				],
				[
					647,
					1,
					"cut",
					null,
					"AQAAADoCAAAAAAAAOgIAAAAAAAA6AAAAaW5jbHVkZShDaGVja0NDb21waWxlckZsYWcpCmluY2x1ZGUoQ2hlY2tDWFhDb21waWxlckZsYWcpCg",
					"AQAAAAAAAAABAAAAOgIAAAAAAAB0AgAAAAAAAAAAAAAAAPC/"
				],
				[
					667,
					1,
					"cut",
					null,
					"AQAAAFECAAAAAAAAUQIAAAAAAAA7AAAAaW5jbHVkZSgke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vY21ha2UvZnVuY3Rpb25zLmNtYWtlKQo",
					"AQAAAAAAAAABAAAAUQIAAAAAAACMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					668,
					2,
					"paste",
					null,
					"AgAAAFECAAAAAAAAjAIAAAAAAAAAAAAAjAIAAAAAAADHAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQIAAAAAAABRAgAAAAAAAAAAAAAAAPC/"
				],
				[
					675,
					1,
					"insert",
					{
						"characters": "check-flags"
					},
					"DAAAALYCAAAAAAAAtwIAAAAAAAAAAAAAtwIAAAAAAAC3AgAAAAAAAAkAAABmdW5jdGlvbnO3AgAAAAAAALgCAAAAAAAAAAAAALgCAAAAAAAAuQIAAAAAAAAAAAAAuQIAAAAAAAC6AgAAAAAAAAAAAAC6AgAAAAAAALsCAAAAAAAAAAAAALsCAAAAAAAAvAIAAAAAAAAAAAAAvAIAAAAAAAC9AgAAAAAAAAAAAAC9AgAAAAAAAL4CAAAAAAAAAAAAAL4CAAAAAAAAvwIAAAAAAAAAAAAAvwIAAAAAAADAAgAAAAAAAAAAAADAAgAAAAAAAMECAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgIAAAAAAAC/AgAAAAAAAAAAAAAAAPC/"
				],
				[
					690,
					1,
					"insert",
					{
						"characters": "F"
					},
					"AgAAAHsCAAAAAAAAfAIAAAAAAAAAAAAAfAIAAAAAAAB8AgAAAAAAAAEAAABm",
					"AQAAAAAAAAABAAAAfAIAAAAAAAB7AgAAAAAAAAAAAAAAAPC/"
				],
				[
					693,
					2,
					"left_delete",
					null,
					"AgAAALcCAAAAAAAAtwIAAAAAAAABAAAAaLYCAAAAAAAAtgIAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAuAIAAAAAAAC3AgAAAAAAAAAAAAAAAPC/"
				],
				[
					694,
					1,
					"insert",
					{
						"characters": "Ch"
					},
					"AgAAALYCAAAAAAAAtwIAAAAAAAAAAAAAtwIAAAAAAAC4AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgIAAAAAAAC2AgAAAAAAAAAAAAAAAPC/"
				],
				[
					697,
					2,
					"left_delete",
					null,
					"AgAAALwCAAAAAAAAvAIAAAAAAAABAAAAZrsCAAAAAAAAuwIAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAAvQIAAAAAAAC9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					698,
					1,
					"insert",
					{
						"characters": "F"
					},
					"AQAAALsCAAAAAAAAvAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwIAAAAAAAC7AgAAAAAAAAAAAAAAAPC/"
				],
				[
					700,
					2,
					"left_delete",
					null,
					"AgAAADQDAAAAAAAANAMAAAAAAAABAAAAdjMDAAAAAAAAMwMAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAANQMAAAAAAAA1AwAAAAAAAAAAAAAAAH5A"
				],
				[
					701,
					1,
					"insert",
					{
						"characters": "CV"
					},
					"AgAAADMDAAAAAAAANAMAAAAAAAAAAAAANAMAAAAAAAA1AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwMAAAAAAAAzAwAAAAAAAAAAAAAAAPC/"
				],
				[
					703,
					1,
					"left_delete",
					null,
					"AQAAAC8DAAAAAAAALwMAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAMAMAAAAAAAAwAwAAAAAAAAAAAAAAAPC/"
				],
				[
					704,
					1,
					"insert",
					{
						"characters": "O"
					},
					"AQAAAC8DAAAAAAAAMAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwMAAAAAAAAvAwAAAAAAAAAAAAAAAPC/"
				],
				[
					719,
					1,
					"insert",
					{
						"characters": "JSB"
					},
					"BAAAAKYNAAAAAAAApw0AAAAAAAAAAAAApw0AAAAAAACnDQAAAAAAAAQAAABqcy1ipw0AAAAAAACoDQAAAAAAAAAAAACoDQAAAAAAAKkNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApg0AAAAAAACqDQAAAAAAAAAAAAAAAPC/"
				],
				[
					723,
					1,
					"left_delete",
					null,
					"AQAAAGYNAAAAAAAAZg0AAAAAAAAUAAAAaWYoUVVJQ0tKU19NT0RVTEVTKQo",
					"AQAAAAAAAAABAAAAeg0AAAAAAABmDQAAAAAAAAAAAAAAAAAA"
				],
				[
					726,
					1,
					"left_delete",
					null,
					"AQAAAKQNAAAAAAAApA0AAAAAAAAXAAAAZW5kaWYoUVVJQ0tKU19NT0RVTEVTKQo",
					"AQAAAAAAAAABAAAApA0AAAAAAAC7DQAAAAAAAAAAAAAAAAAA"
				],
				[
					728,
					1,
					"cut",
					null,
					"AQAAAGYNAAAAAAAAZg0AAAAAAAA+AAAAICBpbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9KU0JpbmRpbmdzLmNtYWtlKQo",
					"AQAAAAAAAAABAAAApA0AAAAAAABmDQAAAAAAAAAAAAAAAAAA"
				],
				[
					743,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAQDAAAAAAAABQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAMAAAAAAAAEAwAAAAAAAAAAAAAAAPC/"
				],
				[
					744,
					1,
					"paste",
					null,
					"AQAAAAUDAAAAAAAAQwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQMAAAAAAAAFAwAAAAAAAAAAAAAAAPC/"
				],
				[
					745,
					1,
					"left_delete",
					null,
					"AQAAAEIDAAAAAAAAQgMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAQwMAAAAAAABDAwAAAAAAAAAAAAAAAPC/"
				],
				[
					747,
					1,
					"left_delete",
					null,
					"AQAAAAUDAAAAAAAABQMAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAABwMAAAAAAAAHAwAAAAAAAAAAAAAAADRA"
				],
				[
					764,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABNDgAAY21ha2VfbWluaW11bV9yZXF1aXJlZChWRVJTSU9OIDMuMCkKcHJvamVjdChxanMtb3BlbmN2KQoKc2V0KERJU0FCTEVfV0VSUk9SIFRSVUUgQ0FDSEUgQk9PTCAiRGlzYWJsZSAtV2Vycm9yIGZsYWciIEZPUkNFKQoKc2V0KENNQUtFX0JVSUxEX1RZUEUgIkRlYnVnIiBDQUNIRSBTVFJJTkcgImJ1aWxkIHR5cGUiKQoKc2V0X3Byb3BlcnR5KENBQ0hFIENNQUtFX0JVSUxEX1RZUEUgUFJPUEVSVFkgU1RSSU5HUyBEZWJ1ZyBSZWxlYXNlIE1pblNpemVSZWwgUmVsV2l0aERlYkluZm8pCgpzZXQocXVpY2tqc19zb3VyY2VzX3Jvb3QgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3F1aWNranMpCgppZihOT1QgQ01BS0VfQlVJTERfVFlQRSBPUiBDTUFLRV9CVUlMRF9UWVBFIFNUUkVRVUFMICIiKQogIHNldChDTUFLRV9CVUlMRF9UWVBFICJEZWJ1ZyIpCmVuZGlmKE5PVCBDTUFLRV9CVUlMRF9UWVBFIE9SIENNQUtFX0JVSUxEX1RZUEUgU1RSRVFVQUwgIiIpCgppZihXSU4zMikKICBzZXQoTElCV1MyXzMyIHdzMl8zMikKZWxzZShXSU4zMikKCmVuZGlmKFdJTjMyKQoKaW5jbHVkZShGaW5kVGhyZWFkcykKaW5jbHVkZShGaW5kUGtnQ29uZmlnKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9GdW5jdGlvbnMuY21ha2UpCmluY2x1ZGUoJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NtYWtlL0NoZWNrRmxhZ3MuY21ha2UpCmluY2x1ZGUoJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NtYWtlL0ZpbmRRdWlja0pTLmNtYWtlKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9KU0JpbmRpbmdzLmNtYWtlKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9PcGVuQ1YuY21ha2UpCgppZihFTkFCTEVfQ0NBQ0hFKQogIGluY2x1ZGUoJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NtYWtlL2NjYWNoZS5jbWFrZSkKICBlbmFibGVfY2NhY2hlKCkKZW5kaWYoRU5BQkxFX0NDQUNIRSkKCmNoZWNrX3NpemUoImxvbmciIFNJWkVPRl9MT05HKQpjaGVja19zaXplKCJsb25nIGxvbmciIFNJWkVPRl9MT05HX0xPTkcpCmNoZWNrX3NpemUoInNpemVfdCIgU0laRU9GX1NJWkVfVCkKCmlmKE5PVCBQT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFKQogIHNldChQT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFIE9OKQplbmRpZihOT1QgUE9TSVRJT05fSU5ERVBFTkRFTlRfQ09ERSkKb3B0aW9uKEJVSUxEX1NIQVJFRF9MSUJTICJCdWlsZCBzaGFyZWQgbGlicmFyaWVzIiBPTikKCm1lc3NhZ2UoIlRocmVhZCBsaWJyYXJ5OiAke0NNQUtFX1RIUkVBRF9MSUJTX0lOSVR9IikKaWYoQ01BS0VfVEhSRUFEX0xJQlNfSU5JVCkKICBzZXQoTElCUFRIUkVBRCAke0NNQUtFX1RIUkVBRF9MSUJTX0lOSVR9KQplbmRpZihDTUFLRV9USFJFQURfTElCU19JTklUKQoKY2hlY2tfbGlicmFyeV9leGlzdHMobSBhdGFuMiAvdXNyL2xpYiBIQVZFX0xJQk0pCmlmKEhBVkVfTElCTSkKICBzZXQoTElCTSBtKQogICMgbWVzc2FnZSgiRm91bmQgbWF0aCBsaWJyYXJ5OiAke0xJQk19IikKZW5kaWYoSEFWRV9MSUJNKQoKY2hlY2tfbGlicmFyeV9leGlzdHMoZGwgZGxvcGVuIC91c3IvbGliIEhBVkVfTElCREwpCmlmKEhBVkVfTElCREwpCiAgc2V0KExJQkRMIGRsKQogICMgbWVzc2FnZSgiRm91bmQgZGxmY24gbGlicmFyeTogJHtMSUJETH0iKQplbmRpZihIQVZFX0xJQkRMKQoKY2hlY2tfbGlicmFyeV9leGlzdHMoanNvbi1jcHAgWk40WUFNTDZkZXRhaWw5bm9kZV9kYXRhOXJlc2V0X21hcEV2IC91c3IgSlNPTl9DUFApCgpmaW5kX3F1aWNranMoKQpmaW5kX29wZW5jdigpCgpzZXQoQ01BS0VfSU5TVEFMTF9SUEFUSCAiJHtPUEVOQ1ZfTElCX0RJUn0iIENBQ0hFIFBBVEggIkJ1aWxkIHdpdGggaW5zdGFsbCBycGF0aCIgRk9SQ0UpCgppbmNsdWRlX2RpcmVjdG9yaWVzKAogICR7T1BFTkNWX0lOQ0xVREVfRElSU30gJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9ICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9vcGVuY3YKICAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vc3JjICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9pbmNsdWRlCiAgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3F1aWNranMpCgpjaGVja19jeHhfc3RhbmRhcmRfZmxhZygpCiAKCnN0cmluZyhSRUdFWCBSRVBMQUNFICIgLVdhbGwiICIiIENNQUtFX0NfRkxBR1MgIiR7Q01BS0VfQ19GTEFHU30iKQpzdHJpbmcoUkVHRVggUkVQTEFDRSAiIC1XYWxsIiAiIiBDTUFLRV9DWFhfRkxBR1MgIiR7Q01BS0VfQ1hYX0ZMQUdTfSIpCgpjaGVja19ub3dhcm5fZmxhZygtV25vLXVudXNlZC12YWx1ZSkKY2hlY2tfbm93YXJuX2ZsYWcoLVduby11bnVzZWQtdmFyaWFibGUpCgppZigiJHtDTUFLRV9DWFhfQ09NUElMRVJfSUR9IiBNQVRDSEVTICIuKkNsYW5nLioiKQogIGNoZWNrX25vd2Fybl9mbGFnKC1Xbm8tZGVwcmVjYXRlZC1hbm9uLWVudW0tZW51bS1jb252ZXJzaW9uKQogIGNoZWNrX25vd2Fybl9mbGFnKC1Xbm8tZXh0ZXJuLWMtY29tcGF0KQogIGNoZWNrX25vd2Fybl9mbGFnKC1Xbm8taW1wbGljaXQtaW50LWZsb2F0LWNvbnZlcnNpb24pCiAgY2hlY2tfbm93YXJuX2ZsYWcoLVduby1kZXByZWNhdGVkLWVudW0tZW51bS1jb252ZXJzaW9uKQplbmRpZigiJHtDTUFLRV9DWFhfQ09NUElMRVJfSUR9IiBNQVRDSEVTICIuKkNsYW5nLioiKQoKIyBkdW1wKENNQUtFX0NfRkxBR1MgQ01BS0VfQ1hYX0ZMQUdTKSBkdW1wKENNQUtFX0NYWF9GTEFHU19ERUJVRykKCmNoZWNrX3BpY19mbGFnKCkKCnNldChERUJVR19PVVRQVVQgVFJVRSBDQUNIRSBCT09MICJEZWJ1ZyBvdXRwdXQiIEZPUkNFKQpzZXQoREVCVUdfTUFUIEZBTFNFIENBQ0hFIEJPT0wgIkRlYnVnIGN2OjpNYXQiIEZPUkNFKQoKY2hlY2tfb3B0X25vbmVfZmxhZygpCgpjaGVja19kZWJ1Z19nZGJfZmxhZygpCgpjaGVja19jX2NvbXBpbGVyX2ZsYWcoIi1mbHRvIiBIQVNfRl9MVE9fRkxBRykKCmlmKEhBU19GX0xUT19GTEFHKQogIG9wdGlvbihFTkFCTEVfTFRPICJFbmFibGUgbGluay10aW1lIG9wdGltaXphdGlvbiIgT0ZGKQplbmRpZihIQVNfRl9MVE9fRkxBRykKCmlmKEVOQUJMRV9MVE8pCiAgc2V0KENNQUtFX0NfRkxBR1MgIiR7Q01BS0VfQ19GTEFHU30gLWZsdG8iKQogIHNldChDTUFLRV9FWEVfTElOS0VSX0ZMQUdTICIke0NNQUtFX0VYRV9MSU5LRVJfRkxBR1N9IC1mbHRvIikKZW5kaWYoRU5BQkxFX0xUTykKCmxpbmtfZGlyZWN0b3JpZXMoQkVGT1JFICR7cXVpY2tqc19CSU5BUllfRElSfSkKCmxpbmtfZGlyZWN0b3JpZXMoIiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfS9xdWlja2pzIikKCnNldChRVUlDS0pTX0xJQlJBUlkgcXVpY2tqcykKbGlua19kaXJlY3Rvcmllcygke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0vcXVpY2tqcykKCm9wdGlvbihRVUlDS0pTX01PRFVMRVMgIkJ1aWxkIC5zbyBtb2R1bGVzIGZvciBxdWlja2pzIiBPTikKCgpvcHRpb24oQlVJTERfUVVJQ0tKUyAiQnVpbGQgUXVpY2tKUyIgT04pCgpmaWxlKEdMT0IgT1BFTkNWX1NPVVJDRVMgKi5ocHAgKi5jcHApCiMgZHVtcChPUEVOQ1ZfU09VUkNFUykKCm1ha2Vfc2hhcmVkX21vZHVsZShvcGVuY3YgJHtPUEVOQ1ZfU09VUkNFU30pCiMgbWFrZV9qc19iaW5kaW5ncygpCgAAAAAAAAAASg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQMAAAAAAAB5AwAAAAAAAAAAAAAAAPC/"
				],
				[
					767,
					1,
					"insert",
					{
						"characters": "CC"
					},
					"AwAAALgDAAAAAAAAuQMAAAAAAAAAAAAAuQMAAAAAAAC5AwAAAAAAAAIAAABjY7kDAAAAAAAAugMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugMAAAAAAAC4AwAAAAAAAAAAAAAAAPC/"
				],
				[
					775,
					1,
					"cut",
					null,
					"AQAAAAgOAAAAAAAACA4AAAAAAAAtAAAAbWFrZV9zaGFyZWRfbW9kdWxlKG9wZW5jdiAke09QRU5DVl9TT1VSQ0VTfSkK",
					"AQAAAAAAAAABAAAACA4AAAAAAAA1DgAAAAAAAAAAAAAAAPC/"
				],
				[
					776,
					2,
					"paste",
					null,
					"AgAAAAgOAAAAAAAANQ4AAAAAAAAAAAAANQ4AAAAAAABiDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACA4AAAAAAAAIDgAAAAAAAAAAAAAAAPC/"
				],
				[
					779,
					1,
					"left_delete",
					null,
					"AQAAAA0OAAAAAAAADQ4AAAAAAAAHAAAAc2hhcmVkXw",
					"AQAAAAAAAAABAAAAFA4AAAAAAAANDgAAAAAAAAAAAAAAAPC/"
				],
				[
					788,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAFsOAAAAAAAAXA4AAAAAAAAAAAAAXA4AAAAAAABcDgAAAAAAABUAAAAjIG1ha2VfanNfYmluZGluZ3MoKQo",
					"AQAAAAAAAAABAAAAWw4AAAAAAABwDgAAAAAAAAAAAAAAAPC/"
				],
				[
					796,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAC4OAAAAAAAALw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALg4AAAAAAAAuDgAAAAAAAAAAAAAAAPC/"
				],
				[
					797,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABdDgAAY21ha2VfbWluaW11bV9yZXF1aXJlZChWRVJTSU9OIDMuMCkKcHJvamVjdChxanMtb3BlbmN2KQoKc2V0KERJU0FCTEVfV0VSUk9SIFRSVUUgQ0FDSEUgQk9PTCAiRGlzYWJsZSAtV2Vycm9yIGZsYWciIEZPUkNFKQoKc2V0KENNQUtFX0JVSUxEX1RZUEUgIkRlYnVnIiBDQUNIRSBTVFJJTkcgImJ1aWxkIHR5cGUiKQoKc2V0X3Byb3BlcnR5KENBQ0hFIENNQUtFX0JVSUxEX1RZUEUgUFJPUEVSVFkgU1RSSU5HUyBEZWJ1ZyBSZWxlYXNlIE1pblNpemVSZWwgUmVsV2l0aERlYkluZm8pCgpzZXQocXVpY2tqc19zb3VyY2VzX3Jvb3QgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3F1aWNranMpCgppZihOT1QgQ01BS0VfQlVJTERfVFlQRSBPUiBDTUFLRV9CVUlMRF9UWVBFIFNUUkVRVUFMICIiKQogIHNldChDTUFLRV9CVUlMRF9UWVBFICJEZWJ1ZyIpCmVuZGlmKE5PVCBDTUFLRV9CVUlMRF9UWVBFIE9SIENNQUtFX0JVSUxEX1RZUEUgU1RSRVFVQUwgIiIpCgppZihXSU4zMikKICBzZXQoTElCV1MyXzMyIHdzMl8zMikKZWxzZShXSU4zMikKCmVuZGlmKFdJTjMyKQoKaW5jbHVkZShGaW5kVGhyZWFkcykKaW5jbHVkZShGaW5kUGtnQ29uZmlnKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9GdW5jdGlvbnMuY21ha2UpCmluY2x1ZGUoJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NtYWtlL0NoZWNrRmxhZ3MuY21ha2UpCmluY2x1ZGUoJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NtYWtlL0ZpbmRRdWlja0pTLmNtYWtlKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9KU0JpbmRpbmdzLmNtYWtlKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9PcGVuQ1YuY21ha2UpCgppZihFTkFCTEVfQ0NBQ0hFKQogIGluY2x1ZGUoJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NtYWtlL0NDYWNoZS5jbWFrZSkKICBlbmFibGVfY2NhY2hlKCkKZW5kaWYoRU5BQkxFX0NDQUNIRSkKCmNoZWNrX3NpemUoImxvbmciIFNJWkVPRl9MT05HKQpjaGVja19zaXplKCJsb25nIGxvbmciIFNJWkVPRl9MT05HX0xPTkcpCmNoZWNrX3NpemUoInNpemVfdCIgU0laRU9GX1NJWkVfVCkKCmlmKE5PVCBQT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFKQogIHNldChQT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFIE9OKQplbmRpZihOT1QgUE9TSVRJT05fSU5ERVBFTkRFTlRfQ09ERSkKb3B0aW9uKEJVSUxEX1NIQVJFRF9MSUJTICJCdWlsZCBzaGFyZWQgbGlicmFyaWVzIiBPTikKCm1lc3NhZ2UoIlRocmVhZCBsaWJyYXJ5OiAke0NNQUtFX1RIUkVBRF9MSUJTX0lOSVR9IikKaWYoQ01BS0VfVEhSRUFEX0xJQlNfSU5JVCkKICBzZXQoTElCUFRIUkVBRCAke0NNQUtFX1RIUkVBRF9MSUJTX0lOSVR9KQplbmRpZihDTUFLRV9USFJFQURfTElCU19JTklUKQoKY2hlY2tfbGlicmFyeV9leGlzdHMobSBhdGFuMiAvdXNyL2xpYiBIQVZFX0xJQk0pCmlmKEhBVkVfTElCTSkKICBzZXQoTElCTSBtKQogICMgbWVzc2FnZSgiRm91bmQgbWF0aCBsaWJyYXJ5OiAke0xJQk19IikKZW5kaWYoSEFWRV9MSUJNKQoKY2hlY2tfbGlicmFyeV9leGlzdHMoZGwgZGxvcGVuIC91c3IvbGliIEhBVkVfTElCREwpCmlmKEhBVkVfTElCREwpCiAgc2V0KExJQkRMIGRsKQogICMgbWVzc2FnZSgiRm91bmQgZGxmY24gbGlicmFyeTogJHtMSUJETH0iKQplbmRpZihIQVZFX0xJQkRMKQoKY2hlY2tfbGlicmFyeV9leGlzdHMoanNvbi1jcHAgWk40WUFNTDZkZXRhaWw5bm9kZV9kYXRhOXJlc2V0X21hcEV2IC91c3IgSlNPTl9DUFApCgpmaW5kX3F1aWNranMoKQpmaW5kX29wZW5jdigpCgpzZXQoQ01BS0VfSU5TVEFMTF9SUEFUSCAiJHtPUEVOQ1ZfTElCX0RJUn0iIENBQ0hFIFBBVEggIkJ1aWxkIHdpdGggaW5zdGFsbCBycGF0aCIgRk9SQ0UpCgppbmNsdWRlX2RpcmVjdG9yaWVzKAogICR7T1BFTkNWX0lOQ0xVREVfRElSU30gJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9ICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9vcGVuY3YKICAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vc3JjICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9pbmNsdWRlCiAgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3F1aWNranMpCgpjaGVja19jeHhfc3RhbmRhcmRfZmxhZygpCgpzdHJpbmcoUkVHRVggUkVQTEFDRSAiIC1XYWxsIiAiIiBDTUFLRV9DX0ZMQUdTICIke0NNQUtFX0NfRkxBR1N9IikKc3RyaW5nKFJFR0VYIFJFUExBQ0UgIiAtV2FsbCIgIiIgQ01BS0VfQ1hYX0ZMQUdTICIke0NNQUtFX0NYWF9GTEFHU30iKQoKY2hlY2tfbm93YXJuX2ZsYWcoLVduby11bnVzZWQtdmFsdWUpCmNoZWNrX25vd2Fybl9mbGFnKC1Xbm8tdW51c2VkLXZhcmlhYmxlKQoKaWYoIiR7Q01BS0VfQ1hYX0NPTVBJTEVSX0lEfSIgTUFUQ0hFUyAiLipDbGFuZy4qIikKICBjaGVja19ub3dhcm5fZmxhZygtV25vLWRlcHJlY2F0ZWQtYW5vbi1lbnVtLWVudW0tY29udmVyc2lvbikKICBjaGVja19ub3dhcm5fZmxhZygtV25vLWV4dGVybi1jLWNvbXBhdCkKICBjaGVja19ub3dhcm5fZmxhZygtV25vLWltcGxpY2l0LWludC1mbG9hdC1jb252ZXJzaW9uKQogIGNoZWNrX25vd2Fybl9mbGFnKC1Xbm8tZGVwcmVjYXRlZC1lbnVtLWVudW0tY29udmVyc2lvbikKZW5kaWYoIiR7Q01BS0VfQ1hYX0NPTVBJTEVSX0lEfSIgTUFUQ0hFUyAiLipDbGFuZy4qIikKCiMgZHVtcChDTUFLRV9DX0ZMQUdTIENNQUtFX0NYWF9GTEFHUykgZHVtcChDTUFLRV9DWFhfRkxBR1NfREVCVUcpCgpjaGVja19waWNfZmxhZygpCgpzZXQoREVCVUdfT1VUUFVUIFRSVUUgQ0FDSEUgQk9PTCAiRGVidWcgb3V0cHV0IiBGT1JDRSkKc2V0KERFQlVHX01BVCBGQUxTRSBDQUNIRSBCT09MICJEZWJ1ZyBjdjo6TWF0IiBGT1JDRSkKCmNoZWNrX29wdF9ub25lX2ZsYWcoKQoKY2hlY2tfZGVidWdfZ2RiX2ZsYWcoKQoKY2hlY2tfY19jb21waWxlcl9mbGFnKCItZmx0byIgSEFTX0ZfTFRPX0ZMQUcpCgppZihIQVNfRl9MVE9fRkxBRykKICBvcHRpb24oRU5BQkxFX0xUTyAiRW5hYmxlIGxpbmstdGltZSBvcHRpbWl6YXRpb24iIE9GRikKZW5kaWYoSEFTX0ZfTFRPX0ZMQUcpCgppZihFTkFCTEVfTFRPKQogIHNldChDTUFLRV9DX0ZMQUdTICIke0NNQUtFX0NfRkxBR1N9IC1mbHRvIikKICBzZXQoQ01BS0VfRVhFX0xJTktFUl9GTEFHUyAiJHtDTUFLRV9FWEVfTElOS0VSX0ZMQUdTfSAtZmx0byIpCmVuZGlmKEVOQUJMRV9MVE8pCgpsaW5rX2RpcmVjdG9yaWVzKEJFRk9SRSAke3F1aWNranNfQklOQVJZX0RJUn0pCgpsaW5rX2RpcmVjdG9yaWVzKCIke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0vcXVpY2tqcyIpCgpzZXQoUVVJQ0tKU19MSUJSQVJZIHF1aWNranMpCmxpbmtfZGlyZWN0b3JpZXMoJHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9L3F1aWNranMpCgpvcHRpb24oUVVJQ0tKU19NT0RVTEVTICJCdWlsZCAuc28gbW9kdWxlcyBmb3IgcXVpY2tqcyIgT04pCgpvcHRpb24oQlVJTERfUVVJQ0tKUyAiQnVpbGQgUXVpY2tKUyIgT04pCgpmaWxlKEdMT0IgT1BFTkNWX1NPVVJDRVMgKi5ocHAgKi5jcHApCiMgZHVtcChPUEVOQ1ZfU09VUkNFUykKCm1ha2VfbW9kdWxlKG9wZW5jdiAke09QRU5DVl9TT1VSQ0VTfSkKI21ha2Vfc2hhcmVkX21vZHVsZShvcGVuY3YgJHtPUEVOQ1ZfU09VUkNFU30pCiAAAAAAAAAAAKMOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALw4AAAAAAAAvDgAAAAAAAAAAAAAAAPC/"
				],
				[
					800,
					1,
					"insert",
					{
						"characters": "static_"
					},
					"BwAAAFMOAAAAAAAAVA4AAAAAAAAAAAAAVA4AAAAAAABVDgAAAAAAAAAAAABVDgAAAAAAAFYOAAAAAAAAAAAAAFYOAAAAAAAAVw4AAAAAAAAAAAAAVw4AAAAAAABYDgAAAAAAAAAAAABYDgAAAAAAAFkOAAAAAAAAAAAAAFkOAAAAAAAAWg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUw4AAAAAAABTDgAAAAAAAAAAAAAAAPC/"
				],
				[
					803,
					2,
					"right_delete",
					null,
					"AgAAAHsOAAAAAAAAew4AAAAAAAABAAAAI3sOAAAAAAAAew4AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAew4AAAAAAAB7DgAAAAAAAAAAAAAAAAAA"
				],
				[
					833,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAE0OAAAAAAAATg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQ4AAAAAAABNDgAAAAAAAAAAAAAAAPC/"
				],
				[
					835,
					1,
					"paste",
					null,
					"AQAAAE0OAAAAAAAAhQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQ4AAAAAAABNDgAAAAAAAAAAAAAAAAAA"
				],
				[
					844,
					1,
					"paste",
					null,
					"AgAAAFsOAAAAAAAAaQ4AAAAAAAAAAAAAaQ4AAAAAAABpDgAAAAAAAAYAAAA8bGlzdD4",
					"AQAAAAAAAAABAAAAWw4AAAAAAABhDgAAAAAAAAAAAAAAAPC/"
				],
				[
					845,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGkOAAAAAAAAag4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQ4AAAAAAABpDgAAAAAAAAAAAAAAAPC/"
				],
				[
					848,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGoOAAAAAAAAaw4AAAAAAAAAAAAAaw4AAAAAAABrDgAAAAAAAAwAAAAge0lOQ0xVREUgfCA",
					"AQAAAAAAAAABAAAAag4AAAAAAAB2DgAAAAAAAAAAAAAAAPC/"
				],
				[
					851,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAHIOAAAAAAAAcw4AAAAAAAAAAAAAcw4AAAAAAABzDgAAAAAAAAIAAAB9IA",
					"AQAAAAAAAAABAAAAcg4AAAAAAAB0DgAAAAAAAAAAAAAAAPC/"
				],
				[
					854,
					1,
					"insert_snippet",
					{
						"contents": "\"${0:$SELECTION}\""
					},
					"AgAAAHkOAAAAAAAAeQ4AAAAAAAAHAAAAPHJlZ2V4PnkOAAAAAAAAgg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQ4AAAAAAACADgAAAAAAAAAAAAAAAPC/"
				],
				[
					855,
					1,
					"insert",
					{
						"characters": "init_module.cpp"
					},
					"EAAAAHoOAAAAAAAAew4AAAAAAAAAAAAAew4AAAAAAAB7DgAAAAAAAAcAAAA8cmVnZXg+ew4AAAAAAAB8DgAAAAAAAAAAAAB8DgAAAAAAAH0OAAAAAAAAAAAAAH0OAAAAAAAAfg4AAAAAAAAAAAAAfg4AAAAAAAB/DgAAAAAAAAAAAAB/DgAAAAAAAIAOAAAAAAAAAAAAAIAOAAAAAAAAgQ4AAAAAAAAAAAAAgQ4AAAAAAACCDgAAAAAAAAAAAACCDgAAAAAAAIMOAAAAAAAAAAAAAIMOAAAAAAAAhA4AAAAAAAAAAAAAhA4AAAAAAACFDgAAAAAAAAAAAACFDgAAAAAAAIYOAAAAAAAAAAAAAIYOAAAAAAAAhw4AAAAAAAAAAAAAhw4AAAAAAACIDgAAAAAAAAAAAACIDgAAAAAAAIkOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeg4AAAAAAACBDgAAAAAAAAAAAAAAAPC/"
				],
				[
					863,
					1,
					"left_delete",
					null,
					"AQAAAE0OAAAAAAAATQ4AAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAATw4AAAAAAABPDgAAAAAAAAAAAAAAAPC/"
				],
				[
					864,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAE0OAAAAAAAATg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQ4AAAAAAABNDgAAAAAAAAAAAAAAAPC/"
				],
				[
					872,
					1,
					"paste",
					null,
					"AQAAAKcOAAAAAAAAtg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApw4AAAAAAACnDgAAAAAAAAAAAAAAAPC/"
				],
				[
					873,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALYOAAAAAAAAtw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtg4AAAAAAAC2DgAAAAAAAAAAAAAAAPC/"
				],
				[
					876,
					1,
					"paste",
					null,
					"AQAAAOQOAAAAAAAA8w4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5A4AAAAAAADkDgAAAAAAAAAAAAAAAPC/"
				],
				[
					879,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPMOAAAAAAAA9A4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8w4AAAAAAADzDgAAAAAAAAAAAAAAAPC/"
				],
				[
					885,
					1,
					"cut",
					null,
					"AQAAAI0OAAAAAAAAjQ4AAAAAAAA9AAAAbWFrZV9zdGF0aWNfbW9kdWxlKG9wZW5jdiBpbml0X21vZHVsZS5jcHAgJHtPUEVOQ1ZfU09VUkNFU30pCg",
					"AQAAAAAAAAABAAAAjQ4AAAAAAADKDgAAAAAAAAAAAAAAAPC/"
				],
				[
					886,
					1,
					"paste",
					null,
					"AQAAAI0OAAAAAAAAyg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQ4AAAAAAACNDgAAAAAAAAAAAAAAAPC/"
				],
				[
					889,
					1,
					"paste",
					null,
					"AQAAAIsOAAAAAAAAyA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiw4AAAAAAACLDgAAAAAAAAAAAAAAAPC/"
				],
				[
					896,
					1,
					"insert",
					{
						"characters": "add_libra"
					},
					"CgAAAIsOAAAAAAAAjA4AAAAAAAAAAAAAjA4AAAAAAACMDgAAAAAAABIAAABtYWtlX3N0YXRpY19tb2R1bGWMDgAAAAAAAI0OAAAAAAAAAAAAAI0OAAAAAAAAjg4AAAAAAAAAAAAAjg4AAAAAAACPDgAAAAAAAAAAAACPDgAAAAAAAJAOAAAAAAAAAAAAAJAOAAAAAAAAkQ4AAAAAAAAAAAAAkQ4AAAAAAACSDgAAAAAAAAAAAACSDgAAAAAAAJMOAAAAAAAAAAAAAJMOAAAAAAAAlA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiw4AAAAAAACdDgAAAAAAAAAAAAAAAPC/"
				],
				[
					897,
					1,
					"insert",
					{
						"characters": "ry"
					},
					"AgAAAJQOAAAAAAAAlQ4AAAAAAAAAAAAAlQ4AAAAAAACWDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlA4AAAAAAACUDgAAAAAAAAAAAAAAAPC/"
				],
				[
					904,
					1,
					"insert",
					{
						"characters": "qj-"
					},
					"BAAAAJ4OAAAAAAAAnw4AAAAAAAAAAAAAnw4AAAAAAACfDgAAAAAAAA8AAABpbml0X21vZHVsZS5jcHCfDgAAAAAAAKAOAAAAAAAAAAAAAKAOAAAAAAAAoQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAng4AAAAAAACtDgAAAAAAAAAAAAAAAPC/"
				],
				[
					905,
					3,
					"left_delete",
					null,
					"AwAAAKAOAAAAAAAAoA4AAAAAAAABAAAALZ8OAAAAAAAAnw4AAAAAAAABAAAAap4OAAAAAAAAng4AAAAAAAABAAAAcQ",
					"AQAAAAAAAAABAAAAoQ4AAAAAAAChDgAAAAAAAAAAAAAAAPC/"
				],
				[
					907,
					1,
					"insert",
					{
						"characters": "qjs-"
					},
					"BAAAAJcOAAAAAAAAmA4AAAAAAAAAAAAAmA4AAAAAAACZDgAAAAAAAAAAAACZDgAAAAAAAJoOAAAAAAAAAAAAAJoOAAAAAAAAmw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlw4AAAAAAACXDgAAAAAAAAAAAAAAAPC/"
				],
				[
					909,
					1,
					"left_delete",
					null,
					"AQAAAKIOAAAAAAAAog4AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAow4AAAAAAACjDgAAAAAAAAAAAAAAAPC/"
				],
				[
					916,
					1,
					"insert",
					{
						"characters": "set"
					},
					"AwAAALUOAAAAAAAAtg4AAAAAAAAAAAAAtg4AAAAAAAC3DgAAAAAAAAAAAAC3DgAAAAAAALgOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQ4AAAAAAAC1DgAAAAAAAAAAAAAAAPC/"
				],
				[
					917,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALgOAAAAAAAAuQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuA4AAAAAAAC4DgAAAAAAAAAAAAAAAPC/"
				],
				[
					918,
					1,
					"left_delete",
					null,
					"AQAAALgOAAAAAAAAuA4AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAuQ4AAAAAAAC5DgAAAAAAAAAAAAAAAPC/"
				],
				[
					919,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALgOAAAAAAAAug4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuA4AAAAAAAC4DgAAAAAAAAAAAAAAAPC/"
				],
				[
					920,
					1,
					"insert",
					{
						"characters": "jsbindings_LIBRAR"
					},
					"EQAAALkOAAAAAAAAug4AAAAAAAAAAAAAug4AAAAAAAC7DgAAAAAAAAAAAAC7DgAAAAAAALwOAAAAAAAAAAAAALwOAAAAAAAAvQ4AAAAAAAAAAAAAvQ4AAAAAAAC+DgAAAAAAAAAAAAC+DgAAAAAAAL8OAAAAAAAAAAAAAL8OAAAAAAAAwA4AAAAAAAAAAAAAwA4AAAAAAADBDgAAAAAAAAAAAADBDgAAAAAAAMIOAAAAAAAAAAAAAMIOAAAAAAAAww4AAAAAAAAAAAAAww4AAAAAAADEDgAAAAAAAAAAAADEDgAAAAAAAMUOAAAAAAAAAAAAAMUOAAAAAAAAxg4AAAAAAAAAAAAAxg4AAAAAAADHDgAAAAAAAAAAAADHDgAAAAAAAMgOAAAAAAAAAAAAAMgOAAAAAAAAyQ4AAAAAAAAAAAAAyQ4AAAAAAADKDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQ4AAAAAAAC5DgAAAAAAAAAAAAAAAPC/"
				],
				[
					921,
					1,
					"insert",
					{
						"characters": "IES"
					},
					"AwAAAMoOAAAAAAAAyw4AAAAAAAAAAAAAyw4AAAAAAADMDgAAAAAAAAAAAADMDgAAAAAAAM0OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyg4AAAAAAADKDgAAAAAAAAAAAAAAAPC/"
				],
				[
					922,
					1,
					"insert",
					{
						"characters": " qjs-open"
					},
					"CQAAAM0OAAAAAAAAzg4AAAAAAAAAAAAAzg4AAAAAAADPDgAAAAAAAAAAAADPDgAAAAAAANAOAAAAAAAAAAAAANAOAAAAAAAA0Q4AAAAAAAAAAAAA0Q4AAAAAAADSDgAAAAAAAAAAAADSDgAAAAAAANMOAAAAAAAAAAAAANMOAAAAAAAA1A4AAAAAAAAAAAAA1A4AAAAAAADVDgAAAAAAAAAAAADVDgAAAAAAANYOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQ4AAAAAAADNDgAAAAAAAAAAAAAAAPC/"
				],
				[
					923,
					1,
					"insert",
					{
						"characters": "cv"
					},
					"AgAAANYOAAAAAAAA1w4AAAAAAAAAAAAA1w4AAAAAAADYDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1g4AAAAAAADWDgAAAAAAAAAAAAAAAPC/"
				],
				[
					937,
					1,
					"left_delete",
					null,
					"AQAAAAQPAAAAAAAABA8AAAAAAAATAAAAICR7T1BFTkNWX1NPVVJDRVN9KQ",
					"AQAAAAAAAAABAAAABA8AAAAAAAAXDwAAAAAAAAAAAAAAAPC/"
				],
				[
					940,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAAQPAAAAAAAABQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABA8AAAAAAAAEDwAAAAAAAAAAAAAAAPC/"
				],
				[
					945,
					1,
					"left_delete",
					null,
					"AQAAAC8PAAAAAAAALw8AAAAAAAASAAAAICR7T1BFTkNWX1NPVVJDRVN9",
					"AQAAAAAAAAABAAAALw8AAAAAAABBDwAAAAAAAAAAAAAAAPC/"
				],
				[
					948,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAANsOAAAAAAAA3A4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2w4AAAAAAADbDgAAAAAAAAAAAAAAAPC/"
				],
				[
					953,
					1,
					"paste",
					null,
					"AQAAALUOAAAAAAAAEg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQ4AAAAAAAC1DgAAAAAAAAAAAAAAAPC/"
				],
				[
					959,
					1,
					"paste",
					null,
					"AgAAANIOAAAAAAAA3A4AAAAAAAAAAAAA3A4AAAAAAADcDgAAAAAAAA4AAAAke1RBUkdFVF9OQU1FfQ",
					"AQAAAAAAAAABAAAA0g4AAAAAAADgDgAAAAAAAAAAAAAAAPC/"
				],
				[
					967,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACLDwAAY21ha2VfbWluaW11bV9yZXF1aXJlZChWRVJTSU9OIDMuMCkKcHJvamVjdChxanMtb3BlbmN2KQoKc2V0KERJU0FCTEVfV0VSUk9SIFRSVUUgQ0FDSEUgQk9PTCAiRGlzYWJsZSAtV2Vycm9yIGZsYWciIEZPUkNFKQoKc2V0KENNQUtFX0JVSUxEX1RZUEUgIkRlYnVnIiBDQUNIRSBTVFJJTkcgImJ1aWxkIHR5cGUiKQoKc2V0X3Byb3BlcnR5KENBQ0hFIENNQUtFX0JVSUxEX1RZUEUgUFJPUEVSVFkgU1RSSU5HUyBEZWJ1ZyBSZWxlYXNlIE1pblNpemVSZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsV2l0aERlYkluZm8pCgpzZXQocXVpY2tqc19zb3VyY2VzX3Jvb3QgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3F1aWNranMpCgppZihOT1QgQ01BS0VfQlVJTERfVFlQRSBPUiBDTUFLRV9CVUlMRF9UWVBFIFNUUkVRVUFMICIiKQogIHNldChDTUFLRV9CVUlMRF9UWVBFICJEZWJ1ZyIpCmVuZGlmKE5PVCBDTUFLRV9CVUlMRF9UWVBFIE9SIENNQUtFX0JVSUxEX1RZUEUgU1RSRVFVQUwgIiIpCgppZihXSU4zMikKICBzZXQoTElCV1MyXzMyIHdzMl8zMikKZWxzZShXSU4zMikKCmVuZGlmKFdJTjMyKQoKaW5jbHVkZShGaW5kVGhyZWFkcykKaW5jbHVkZShGaW5kUGtnQ29uZmlnKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9GdW5jdGlvbnMuY21ha2UpCmluY2x1ZGUoJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NtYWtlL0NoZWNrRmxhZ3MuY21ha2UpCmluY2x1ZGUoJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NtYWtlL0ZpbmRRdWlja0pTLmNtYWtlKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9KU0JpbmRpbmdzLmNtYWtlKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9PcGVuQ1YuY21ha2UpCgppZihFTkFCTEVfQ0NBQ0hFKQogIGluY2x1ZGUoJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NtYWtlL0NDYWNoZS5jbWFrZSkKICBlbmFibGVfY2NhY2hlKCkKZW5kaWYoRU5BQkxFX0NDQUNIRSkKCmNoZWNrX3NpemUoImxvbmciIFNJWkVPRl9MT05HKQpjaGVja19zaXplKCJsb25nIGxvbmciIFNJWkVPRl9MT05HX0xPTkcpCmNoZWNrX3NpemUoInNpemVfdCIgU0laRU9GX1NJWkVfVCkKCmlmKE5PVCBQT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFKQogIHNldChQT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFIE9OKQplbmRpZihOT1QgUE9TSVRJT05fSU5ERVBFTkRFTlRfQ09ERSkKb3B0aW9uKEJVSUxEX1NIQVJFRF9MSUJTICJCdWlsZCBzaGFyZWQgbGlicmFyaWVzIiBPTikKCm1lc3NhZ2UoIlRocmVhZCBsaWJyYXJ5OiAke0NNQUtFX1RIUkVBRF9MSUJTX0lOSVR9IikKaWYoQ01BS0VfVEhSRUFEX0xJQlNfSU5JVCkKICBzZXQoTElCUFRIUkVBRCAke0NNQUtFX1RIUkVBRF9MSUJTX0lOSVR9KQplbmRpZihDTUFLRV9USFJFQURfTElCU19JTklUKQoKY2hlY2tfbGlicmFyeV9leGlzdHMobSBhdGFuMiAvdXNyL2xpYiBIQVZFX0xJQk0pCmlmKEhBVkVfTElCTSkKICBzZXQoTElCTSBtKQogICMgbWVzc2FnZSgiRm91bmQgbWF0aCBsaWJyYXJ5OiAke0xJQk19IikKZW5kaWYoSEFWRV9MSUJNKQoKY2hlY2tfbGlicmFyeV9leGlzdHMoZGwgZGxvcGVuIC91c3IvbGliIEhBVkVfTElCREwpCmlmKEhBVkVfTElCREwpCiAgc2V0KExJQkRMIGRsKQogICMgbWVzc2FnZSgiRm91bmQgZGxmY24gbGlicmFyeTogJHtMSUJETH0iKQplbmRpZihIQVZFX0xJQkRMKQoKY2hlY2tfbGlicmFyeV9leGlzdHMoanNvbi1jcHAgWk40WUFNTDZkZXRhaWw5bm9kZV9kYXRhOXJlc2V0X21hcEV2IC91c3IKICAgICAgICAgICAgICAgICAgICAgSlNPTl9DUFApCgpmaW5kX3F1aWNranMoKQpmaW5kX29wZW5jdigpCgpzZXQoQ01BS0VfSU5TVEFMTF9SUEFUSCAiJHtPUEVOQ1ZfTElCX0RJUn0iCiAgICBDQUNIRSBQQVRIICJCdWlsZCB3aXRoIGluc3RhbGwgcnBhdGgiIEZPUkNFKQoKaW5jbHVkZV9kaXJlY3RvcmllcygKICAke09QRU5DVl9JTkNMVURFX0RJUlN9ICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfQogICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9vcGVuY3YgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3NyYwogICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9pbmNsdWRlICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9xdWlja2pzKQoKY2hlY2tfY3h4X3N0YW5kYXJkX2ZsYWcoKQoKc3RyaW5nKFJFR0VYIFJFUExBQ0UgIiAtV2FsbCIgIiIgQ01BS0VfQ19GTEFHUyAiJHtDTUFLRV9DX0ZMQUdTfSIpCnN0cmluZyhSRUdFWCBSRVBMQUNFICIgLVdhbGwiICIiIENNQUtFX0NYWF9GTEFHUyAiJHtDTUFLRV9DWFhfRkxBR1N9IikKCmNoZWNrX25vd2Fybl9mbGFnKC1Xbm8tdW51c2VkLXZhbHVlKQpjaGVja19ub3dhcm5fZmxhZygtV25vLXVudXNlZC12YXJpYWJsZSkKCmlmKCIke0NNQUtFX0NYWF9DT01QSUxFUl9JRH0iIE1BVENIRVMgIi4qQ2xhbmcuKiIpCiAgY2hlY2tfbm93YXJuX2ZsYWcoLVduby1kZXByZWNhdGVkLWFub24tZW51bS1lbnVtLWNvbnZlcnNpb24pCiAgY2hlY2tfbm93YXJuX2ZsYWcoLVduby1leHRlcm4tYy1jb21wYXQpCiAgY2hlY2tfbm93YXJuX2ZsYWcoLVduby1pbXBsaWNpdC1pbnQtZmxvYXQtY29udmVyc2lvbikKICBjaGVja19ub3dhcm5fZmxhZygtV25vLWRlcHJlY2F0ZWQtZW51bS1lbnVtLWNvbnZlcnNpb24pCmVuZGlmKCIke0NNQUtFX0NYWF9DT01QSUxFUl9JRH0iIE1BVENIRVMgIi4qQ2xhbmcuKiIpCgojIGR1bXAoQ01BS0VfQ19GTEFHUyBDTUFLRV9DWFhfRkxBR1MpIGR1bXAoQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHKQoKY2hlY2tfcGljX2ZsYWcoKQoKc2V0KERFQlVHX09VVFBVVCBUUlVFIENBQ0hFIEJPT0wgIkRlYnVnIG91dHB1dCIgRk9SQ0UpCnNldChERUJVR19NQVQgRkFMU0UgQ0FDSEUgQk9PTCAiRGVidWcgY3Y6Ok1hdCIgRk9SQ0UpCgpjaGVja19vcHRfbm9uZV9mbGFnKCkKCmNoZWNrX2RlYnVnX2dkYl9mbGFnKCkKCmNoZWNrX2NfY29tcGlsZXJfZmxhZygiLWZsdG8iIEhBU19GX0xUT19GTEFHKQoKaWYoSEFTX0ZfTFRPX0ZMQUcpCiAgb3B0aW9uKEVOQUJMRV9MVE8gIkVuYWJsZSBsaW5rLXRpbWUgb3B0aW1pemF0aW9uIiBPRkYpCmVuZGlmKEhBU19GX0xUT19GTEFHKQoKaWYoRU5BQkxFX0xUTykKICBzZXQoQ01BS0VfQ19GTEFHUyAiJHtDTUFLRV9DX0ZMQUdTfSAtZmx0byIpCiAgc2V0KENNQUtFX0VYRV9MSU5LRVJfRkxBR1MgIiR7Q01BS0VfRVhFX0xJTktFUl9GTEFHU30gLWZsdG8iKQplbmRpZihFTkFCTEVfTFRPKQoKbGlua19kaXJlY3RvcmllcyhCRUZPUkUgJHtxdWlja2pzX0JJTkFSWV9ESVJ9KQoKbGlua19kaXJlY3RvcmllcygiJHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9L3F1aWNranMiKQoKc2V0KFFVSUNLSlNfTElCUkFSWSBxdWlja2pzKQpsaW5rX2RpcmVjdG9yaWVzKCR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfS9xdWlja2pzKQoKb3B0aW9uKFFVSUNLSlNfTU9EVUxFUyAiQnVpbGQgLnNvIG1vZHVsZXMgZm9yIHF1aWNranMiIE9OKQoKb3B0aW9uKEJVSUxEX1FVSUNLSlMgIkJ1aWxkIFF1aWNrSlMiIE9OKQoKZmlsZShHTE9CIE9QRU5DVl9TT1VSQ0VTICouaHBwICouY3BwKQojIGR1bXAoT1BFTkNWX1NPVVJDRVMpCgpsaXN0KEZJTFRFUiBPUEVOQ1ZfU09VUkNFUyAgRVhDTFVERSBSRUdFWCAiaW5pdF9tb2R1bGUuY3BwIikKYWRkX2xpYnJhcnkocWpzLW9wZW5jdiAke09QRU5DVl9TT1VSQ0VTfSkKICB0YXJnZXRfY29tcGlsZV9kZWZpbml0aW9ucyhxanMtb3BlbmN2IFBSSVZBVEUgQ09ORklHX1BSRUZJWD0iJHtDTUFLRV9JTlNUQUxMX1BSRUZJWH0iKQpzZXQoanNiaW5kaW5nc19MSUJSQVJJRVMgcWpzLW9wZW5jdikKCiNtYWtlX3N0YXRpY19tb2R1bGUob3BlbmN2IGluaXRfbW9kdWxlLmNwcCkKbWFrZV9zaGFyZWRfbW9kdWxlKG9wZW5jdiBpbml0X21vZHVsZS5jcHApCgAAAAAAAAAApA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlw4AAAAAAACaDgAAAAAAAAAAAAAAAPC/"
				],
				[
					975,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKEOAAAAAAAAog4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQ4AAAAAAAChDgAAAAAAAAAAAAAAAPC/"
				],
				[
					976,
					1,
					"left_delete",
					null,
					"AQAAAKEOAAAAAAAAoQ4AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAog4AAAAAAACiDgAAAAAAAAAAAAAAAPC/"
				],
				[
					977,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAKEOAAAAAAAAog4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQ4AAAAAAAChDgAAAAAAAAAAAAAAAPC/"
				],
				[
					978,
					1,
					"left_delete",
					null,
					"AQAAAKEOAAAAAAAAoQ4AAAAAAAABAAAAUw",
					"AQAAAAAAAAABAAAAog4AAAAAAACiDgAAAAAAAAAAAAAAAPC/"
				],
				[
					979,
					1,
					"insert",
					{
						"characters": "STATIC"
					},
					"BgAAAKEOAAAAAAAAog4AAAAAAAAAAAAAog4AAAAAAACjDgAAAAAAAAAAAACjDgAAAAAAAKQOAAAAAAAAAAAAAKQOAAAAAAAApQ4AAAAAAAAAAAAApQ4AAAAAAACmDgAAAAAAAAAAAACmDgAAAAAAAKcOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQ4AAAAAAAChDgAAAAAAAAAAAAAAAPC/"
				],
				[
					980,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKcOAAAAAAAAqA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApw4AAAAAAACnDgAAAAAAAAAAAAAAAPC/"
				],
				[
					982,
					1,
					"insert",
					{
						"characters": "\nset"
					},
					"BAAAALoOAAAAAAAAuw4AAAAAAAAAAAAAuw4AAAAAAAC8DgAAAAAAAAAAAAC8DgAAAAAAAL0OAAAAAAAAAAAAAL0OAAAAAAAAvg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAug4AAAAAAAC6DgAAAAAAAP///////+9/"
				],
				[
					983,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAL4OAAAAAAAAwA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvg4AAAAAAAC+DgAAAAAAAAAAAAAAAPC/"
				],
				[
					984,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAL4OAAAAAAAAvg4AAAAAAAABAAAAKL4OAAAAAAAAvg4AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAvw4AAAAAAAC/DgAAAAAAAAAAAAAAAPC/"
				],
				[
					985,
					1,
					"insert",
					{
						"characters": "_target"
					},
					"BwAAAL4OAAAAAAAAvw4AAAAAAAAAAAAAvw4AAAAAAADADgAAAAAAAAAAAADADgAAAAAAAMEOAAAAAAAAAAAAAMEOAAAAAAAAwg4AAAAAAAAAAAAAwg4AAAAAAADDDgAAAAAAAAAAAADDDgAAAAAAAMQOAAAAAAAAAAAAAMQOAAAAAAAAxQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvg4AAAAAAAC+DgAAAAAAAAAAAAAAAPC/"
				],
				[
					986,
					1,
					"insert_completion",
					{
						"completion": "set_target_properties",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "set_target_properties"
					},
					"AgAAALsOAAAAAAAAuw4AAAAAAAAKAAAAc2V0X3RhcmdldLsOAAAAAAAA0A4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQ4AAAAAAADFDgAAAAAAAAAAAAAAAPC/"
				],
				[
					987,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANAOAAAAAAAA0g4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0A4AAAAAAADQDgAAAAAAAAAAAAAAAPC/"
				],
				[
					988,
					1,
					"insert",
					{
						"characters": "qjs-opencv"
					},
					"CgAAANEOAAAAAAAA0g4AAAAAAAAAAAAA0g4AAAAAAADTDgAAAAAAAAAAAADTDgAAAAAAANQOAAAAAAAAAAAAANQOAAAAAAAA1Q4AAAAAAAAAAAAA1Q4AAAAAAADWDgAAAAAAAAAAAADWDgAAAAAAANcOAAAAAAAAAAAAANcOAAAAAAAA2A4AAAAAAAAAAAAA2A4AAAAAAADZDgAAAAAAAAAAAADZDgAAAAAAANoOAAAAAAAAAAAAANoOAAAAAAAA2w4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0Q4AAAAAAADRDgAAAAAAAAAAAAAAAPC/"
				],
				[
					989,
					1,
					"insert",
					{
						"characters": " PROPERTIES"
					},
					"CwAAANsOAAAAAAAA3A4AAAAAAAAAAAAA3A4AAAAAAADdDgAAAAAAAAAAAADdDgAAAAAAAN4OAAAAAAAAAAAAAN4OAAAAAAAA3w4AAAAAAAAAAAAA3w4AAAAAAADgDgAAAAAAAAAAAADgDgAAAAAAAOEOAAAAAAAAAAAAAOEOAAAAAAAA4g4AAAAAAAAAAAAA4g4AAAAAAADjDgAAAAAAAAAAAADjDgAAAAAAAOQOAAAAAAAAAAAAAOQOAAAAAAAA5Q4AAAAAAAAAAAAA5Q4AAAAAAADmDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2w4AAAAAAADbDgAAAAAAAAAAAAAAAPC/"
				],
				[
					990,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOYOAAAAAAAA5w4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5g4AAAAAAADmDgAAAAAAAAAAAAAAAPC/"
				],
				[
					991,
					1,
					"insert",
					{
						"characters": "PREFI"
					},
					"BQAAAOcOAAAAAAAA6A4AAAAAAAAAAAAA6A4AAAAAAADpDgAAAAAAAAAAAADpDgAAAAAAAOoOAAAAAAAAAAAAAOoOAAAAAAAA6w4AAAAAAAAAAAAA6w4AAAAAAADsDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5w4AAAAAAADnDgAAAAAAAAAAAAAAAPC/"
				],
				[
					992,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOwOAAAAAAAA7Q4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7A4AAAAAAADsDgAAAAAAAAAAAAAAAPC/"
				],
				[
					993,
					1,
					"left_delete",
					null,
					"AQAAAOwOAAAAAAAA7A4AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA7Q4AAAAAAADtDgAAAAAAAAAAAAAAAPC/"
				],
				[
					994,
					1,
					"insert",
					{
						"characters": "X"
					},
					"AQAAAOwOAAAAAAAA7Q4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7A4AAAAAAADsDgAAAAAAAAAAAAAAAPC/"
				],
				[
					995,
					1,
					"insert",
					{
						"characters": " lib"
					},
					"BAAAAO0OAAAAAAAA7g4AAAAAAAAAAAAA7g4AAAAAAADvDgAAAAAAAAAAAADvDgAAAAAAAPAOAAAAAAAAAAAAAPAOAAAAAAAA8Q4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7Q4AAAAAAADtDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1003,
					1,
					"insert",
					{
						"characters": " OUTPUT_NA"
					},
					"CgAAAPEOAAAAAAAA8g4AAAAAAAAAAAAA8g4AAAAAAADzDgAAAAAAAAAAAADzDgAAAAAAAPQOAAAAAAAAAAAAAPQOAAAAAAAA9Q4AAAAAAAAAAAAA9Q4AAAAAAAD2DgAAAAAAAAAAAAD2DgAAAAAAAPcOAAAAAAAAAAAAAPcOAAAAAAAA+A4AAAAAAAAAAAAA+A4AAAAAAAD5DgAAAAAAAAAAAAD5DgAAAAAAAPoOAAAAAAAAAAAAAPoOAAAAAAAA+w4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8Q4AAAAAAADxDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1004,
					1,
					"insert",
					{
						"characters": "ME"
					},
					"AgAAAPsOAAAAAAAA/A4AAAAAAAAAAAAA/A4AAAAAAAD9DgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+w4AAAAAAAD7DgAAAAAAAAAAAAAAAPC/"
				],
				[
					1005,
					1,
					"insert",
					{
						"characters": " opencv"
					},
					"BwAAAP0OAAAAAAAA/g4AAAAAAAAAAAAA/g4AAAAAAAD/DgAAAAAAAAAAAAD/DgAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAAQ8AAAAAAAAAAAAAAQ8AAAAAAAACDwAAAAAAAAAAAAACDwAAAAAAAAMPAAAAAAAAAAAAAAMPAAAAAAAABA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/Q4AAAAAAAD9DgAAAAAAAAAAAAAAAPC/"
				],
				[
					1009,
					2,
					"insert_snippet",
					{
						"contents": "\"${0:$SELECTION}\""
					},
					"BAAAAO4OAAAAAAAA7g4AAAAAAAADAAAAbGli7g4AAAAAAADzDgAAAAAAAAAAAADvDgAAAAAAAO8OAAAAAAAAAwAAAGxpYu8OAAAAAAAA9A4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7g4AAAAAAADxDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1010,
					3,
					"right_delete",
					null,
					"AwAAAPAOAAAAAAAA8A4AAAAAAAADAAAAbGli8A4AAAAAAADwDgAAAAAAAAEAAAAi8A4AAAAAAADwDgAAAAAAAAEAAAAi",
					"AQAAAAAAAAABAAAA8A4AAAAAAADzDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1016,
					1,
					"insert",
					{
						"characters": "\nibns"
					},
					"CAAAAHYPAAAAAAAAdw8AAAAAAAAAAAAAdw8AAAAAAACSDwAAAAAAAAAAAAB3DwAAAAAAAHcPAAAAAAAAGwAAACAgICAgICAgICAgICAgICAgICAgICAgICAgIHcPAAAAAAAAdw8AAAAAAAAAAAAAdw8AAAAAAAB4DwAAAAAAAAAAAAB4DwAAAAAAAHkPAAAAAAAAAAAAAHkPAAAAAAAAeg8AAAAAAAAAAAAAeg8AAAAAAAB7DwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdg8AAAAAAAB2DwAAAAAAAAAAAAAAAPC/"
				],
				[
					1017,
					3,
					"left_delete",
					null,
					"AwAAAHoPAAAAAAAAeg8AAAAAAAABAAAAc3kPAAAAAAAAeQ8AAAAAAAABAAAAbngPAAAAAAAAeA8AAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAew8AAAAAAAB7DwAAAAAAAAAAAAAAAPC/"
				],
				[
					1018,
					1,
					"insert",
					{
						"characters": "nstall"
					},
					"BgAAAHgPAAAAAAAAeQ8AAAAAAAAAAAAAeQ8AAAAAAAB6DwAAAAAAAAAAAAB6DwAAAAAAAHsPAAAAAAAAAAAAAHsPAAAAAAAAfA8AAAAAAAAAAAAAfA8AAAAAAAB9DwAAAAAAAAAAAAB9DwAAAAAAAH4PAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeA8AAAAAAAB4DwAAAAAAAAAAAAAAAPC/"
				],
				[
					1019,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAH4PAAAAAAAAgA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfg8AAAAAAAB+DwAAAAAAAAAAAAAAAPC/"
				],
				[
					1020,
					1,
					"insert",
					{
						"characters": "TA"
					},
					"AgAAAH8PAAAAAAAAgA8AAAAAAAAAAAAAgA8AAAAAAACBDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfw8AAAAAAAB/DwAAAAAAAAAAAAAAAPC/"
				],
				[
					1021,
					1,
					"insert_completion",
					{
						"completion": "TARGETS",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "TARGETS"
					},
					"AgAAAH8PAAAAAAAAfw8AAAAAAAACAAAAVEF/DwAAAAAAAIYPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQ8AAAAAAACBDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1022,
					1,
					"insert",
					{
						"characters": " qjs-opencv"
					},
					"CwAAAIYPAAAAAAAAhw8AAAAAAAAAAAAAhw8AAAAAAACIDwAAAAAAAAAAAACIDwAAAAAAAIkPAAAAAAAAAAAAAIkPAAAAAAAAig8AAAAAAAAAAAAAig8AAAAAAACLDwAAAAAAAAAAAACLDwAAAAAAAIwPAAAAAAAAAAAAAIwPAAAAAAAAjQ8AAAAAAAAAAAAAjQ8AAAAAAACODwAAAAAAAAAAAACODwAAAAAAAI8PAAAAAAAAAAAAAI8PAAAAAAAAkA8AAAAAAAAAAAAAkA8AAAAAAACRDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhg8AAAAAAACGDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1023,
					1,
					"insert",
					{
						"characters": " DEAS"
					},
					"BQAAAJEPAAAAAAAAkg8AAAAAAAAAAAAAkg8AAAAAAACTDwAAAAAAAAAAAACTDwAAAAAAAJQPAAAAAAAAAAAAAJQPAAAAAAAAlQ8AAAAAAAAAAAAAlQ8AAAAAAACWDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQ8AAAAAAACRDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1024,
					2,
					"left_delete",
					null,
					"AgAAAJUPAAAAAAAAlQ8AAAAAAAABAAAAU5QPAAAAAAAAlA8AAAAAAAABAAAAQQ",
					"AQAAAAAAAAABAAAAlg8AAAAAAACWDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1025,
					1,
					"insert",
					{
						"characters": "STINAT"
					},
					"BgAAAJQPAAAAAAAAlQ8AAAAAAAAAAAAAlQ8AAAAAAACWDwAAAAAAAAAAAACWDwAAAAAAAJcPAAAAAAAAAAAAAJcPAAAAAAAAmA8AAAAAAAAAAAAAmA8AAAAAAACZDwAAAAAAAAAAAACZDwAAAAAAAJoPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlA8AAAAAAACUDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1026,
					1,
					"insert",
					{
						"characters": "ION"
					},
					"AwAAAJoPAAAAAAAAmw8AAAAAAAAAAAAAmw8AAAAAAACcDwAAAAAAAAAAAACcDwAAAAAAAJ0PAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmg8AAAAAAACaDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1027,
					1,
					"insert",
					{
						"characters": " lli"
					},
					"BAAAAJ0PAAAAAAAAng8AAAAAAAAAAAAAng8AAAAAAACfDwAAAAAAAAAAAACfDwAAAAAAAKAPAAAAAAAAAAAAAKAPAAAAAAAAoQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQ8AAAAAAACdDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1028,
					2,
					"left_delete",
					null,
					"AgAAAKAPAAAAAAAAoA8AAAAAAAABAAAAaZ8PAAAAAAAAnw8AAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAoQ8AAAAAAAChDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1029,
					1,
					"insert",
					{
						"characters": "ib/quickjs"
					},
					"CgAAAJ8PAAAAAAAAoA8AAAAAAAAAAAAAoA8AAAAAAAChDwAAAAAAAAAAAAChDwAAAAAAAKIPAAAAAAAAAAAAAKIPAAAAAAAAow8AAAAAAAAAAAAAow8AAAAAAACkDwAAAAAAAAAAAACkDwAAAAAAAKUPAAAAAAAAAAAAAKUPAAAAAAAApg8AAAAAAAAAAAAApg8AAAAAAACnDwAAAAAAAAAAAACnDwAAAAAAAKgPAAAAAAAAAAAAAKgPAAAAAAAAqQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnw8AAAAAAACfDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1037,
					1,
					"insert",
					{
						"characters": " COMPILE_FLAGS"
					},
					"DgAAAAMPAAAAAAAABA8AAAAAAAAAAAAABA8AAAAAAAAFDwAAAAAAAAAAAAAFDwAAAAAAAAYPAAAAAAAAAAAAAAYPAAAAAAAABw8AAAAAAAAAAAAABw8AAAAAAAAIDwAAAAAAAAAAAAAIDwAAAAAAAAkPAAAAAAAAAAAAAAkPAAAAAAAACg8AAAAAAAAAAAAACg8AAAAAAAALDwAAAAAAAAAAAAALDwAAAAAAAAwPAAAAAAAAAAAAAAwPAAAAAAAADQ8AAAAAAAAAAAAADQ8AAAAAAAAODwAAAAAAAAAAAAAODwAAAAAAAA8PAAAAAAAAAAAAAA8PAAAAAAAAEA8AAAAAAAAAAAAAEA8AAAAAAAARDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAw8AAAAAAAADDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1038,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABEPAAAAAAAAEg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQ8AAAAAAAARDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1039,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAABIPAAAAAAAAFA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEg8AAAAAAAASDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1040,
					1,
					"insert",
					{
						"characters": "√§$"
					},
					"AgAAABMPAAAAAAAAFA8AAAAAAAAAAAAAFA8AAAAAAAAVDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEw8AAAAAAAATDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1041,
					2,
					"left_delete",
					null,
					"AgAAABQPAAAAAAAAFA8AAAAAAAABAAAAJBMPAAAAAAAAEw8AAAAAAAACAAAAw6Q",
					"AQAAAAAAAAABAAAAFQ8AAAAAAAAVDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1042,
					1,
					"insert",
					{
						"characters": "${JKS"
					},
					"BQAAABMPAAAAAAAAFA8AAAAAAAAAAAAAFA8AAAAAAAAVDwAAAAAAAAAAAAAVDwAAAAAAABYPAAAAAAAAAAAAABYPAAAAAAAAFw8AAAAAAAAAAAAAFw8AAAAAAAAYDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEw8AAAAAAAATDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1043,
					2,
					"left_delete",
					null,
					"AgAAABcPAAAAAAAAFw8AAAAAAAABAAAAUxYPAAAAAAAAFg8AAAAAAAABAAAASw",
					"AQAAAAAAAAABAAAAGA8AAAAAAAAYDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1044,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAABYPAAAAAAAAFw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFg8AAAAAAAAWDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1048,
					1,
					"paste",
					null,
					"AgAAABUPAAAAAAAAKg8AAAAAAAAAAAAAKg8AAAAAAAAqDwAAAAAAAAIAAABKUw",
					"AQAAAAAAAAABAAAAFQ8AAAAAAAAXDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1049,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAACoPAAAAAAAAKw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKg8AAAAAAAAqDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1050,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABSEAAAY21ha2VfbWluaW11bV9yZXF1aXJlZChWRVJTSU9OIDMuMCkKcHJvamVjdChxanMtb3BlbmN2KQoKc2V0KERJU0FCTEVfV0VSUk9SIFRSVUUgQ0FDSEUgQk9PTCAiRGlzYWJsZSAtV2Vycm9yIGZsYWciIEZPUkNFKQoKc2V0KENNQUtFX0JVSUxEX1RZUEUgIkRlYnVnIiBDQUNIRSBTVFJJTkcgImJ1aWxkIHR5cGUiKQoKc2V0X3Byb3BlcnR5KENBQ0hFIENNQUtFX0JVSUxEX1RZUEUgUFJPUEVSVFkgU1RSSU5HUyBEZWJ1ZyBSZWxlYXNlIE1pblNpemVSZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsV2l0aERlYkluZm8pCgpzZXQocXVpY2tqc19zb3VyY2VzX3Jvb3QgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3F1aWNranMpCgppZihOT1QgQ01BS0VfQlVJTERfVFlQRSBPUiBDTUFLRV9CVUlMRF9UWVBFIFNUUkVRVUFMICIiKQogIHNldChDTUFLRV9CVUlMRF9UWVBFICJEZWJ1ZyIpCmVuZGlmKE5PVCBDTUFLRV9CVUlMRF9UWVBFIE9SIENNQUtFX0JVSUxEX1RZUEUgU1RSRVFVQUwgIiIpCgppZihXSU4zMikKICBzZXQoTElCV1MyXzMyIHdzMl8zMikKZWxzZShXSU4zMikKCmVuZGlmKFdJTjMyKQoKaW5jbHVkZShGaW5kVGhyZWFkcykKaW5jbHVkZShGaW5kUGtnQ29uZmlnKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9GdW5jdGlvbnMuY21ha2UpCmluY2x1ZGUoJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NtYWtlL0NoZWNrRmxhZ3MuY21ha2UpCmluY2x1ZGUoJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NtYWtlL0ZpbmRRdWlja0pTLmNtYWtlKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9KU0JpbmRpbmdzLmNtYWtlKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9PcGVuQ1YuY21ha2UpCgppZihFTkFCTEVfQ0NBQ0hFKQogIGluY2x1ZGUoJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NtYWtlL0NDYWNoZS5jbWFrZSkKICBlbmFibGVfY2NhY2hlKCkKZW5kaWYoRU5BQkxFX0NDQUNIRSkKCmNoZWNrX3NpemUoImxvbmciIFNJWkVPRl9MT05HKQpjaGVja19zaXplKCJsb25nIGxvbmciIFNJWkVPRl9MT05HX0xPTkcpCmNoZWNrX3NpemUoInNpemVfdCIgU0laRU9GX1NJWkVfVCkKCmlmKE5PVCBQT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFKQogIHNldChQT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFIE9OKQplbmRpZihOT1QgUE9TSVRJT05fSU5ERVBFTkRFTlRfQ09ERSkKb3B0aW9uKEJVSUxEX1NIQVJFRF9MSUJTICJCdWlsZCBzaGFyZWQgbGlicmFyaWVzIiBPTikKCm1lc3NhZ2UoIlRocmVhZCBsaWJyYXJ5OiAke0NNQUtFX1RIUkVBRF9MSUJTX0lOSVR9IikKaWYoQ01BS0VfVEhSRUFEX0xJQlNfSU5JVCkKICBzZXQoTElCUFRIUkVBRCAke0NNQUtFX1RIUkVBRF9MSUJTX0lOSVR9KQplbmRpZihDTUFLRV9USFJFQURfTElCU19JTklUKQoKY2hlY2tfbGlicmFyeV9leGlzdHMobSBhdGFuMiAvdXNyL2xpYiBIQVZFX0xJQk0pCmlmKEhBVkVfTElCTSkKICBzZXQoTElCTSBtKQogICMgbWVzc2FnZSgiRm91bmQgbWF0aCBsaWJyYXJ5OiAke0xJQk19IikKZW5kaWYoSEFWRV9MSUJNKQoKY2hlY2tfbGlicmFyeV9leGlzdHMoZGwgZGxvcGVuIC91c3IvbGliIEhBVkVfTElCREwpCmlmKEhBVkVfTElCREwpCiAgc2V0KExJQkRMIGRsKQogICMgbWVzc2FnZSgiRm91bmQgZGxmY24gbGlicmFyeTogJHtMSUJETH0iKQplbmRpZihIQVZFX0xJQkRMKQoKY2hlY2tfbGlicmFyeV9leGlzdHMoanNvbi1jcHAgWk40WUFNTDZkZXRhaWw5bm9kZV9kYXRhOXJlc2V0X21hcEV2IC91c3IKICAgICAgICAgICAgICAgICAgICAgSlNPTl9DUFApCgpmaW5kX3F1aWNranMoKQpmaW5kX29wZW5jdigpCgpzZXQoQ01BS0VfSU5TVEFMTF9SUEFUSCAiJHtPUEVOQ1ZfTElCX0RJUn0iCiAgICBDQUNIRSBQQVRIICJCdWlsZCB3aXRoIGluc3RhbGwgcnBhdGgiIEZPUkNFKQoKaW5jbHVkZV9kaXJlY3RvcmllcygKICAke09QRU5DVl9JTkNMVURFX0RJUlN9ICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfQogICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9vcGVuY3YgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3NyYwogICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9pbmNsdWRlICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9xdWlja2pzKQoKY2hlY2tfY3h4X3N0YW5kYXJkX2ZsYWcoKQoKc3RyaW5nKFJFR0VYIFJFUExBQ0UgIiAtV2FsbCIgIiIgQ01BS0VfQ19GTEFHUyAiJHtDTUFLRV9DX0ZMQUdTfSIpCnN0cmluZyhSRUdFWCBSRVBMQUNFICIgLVdhbGwiICIiIENNQUtFX0NYWF9GTEFHUyAiJHtDTUFLRV9DWFhfRkxBR1N9IikKCmNoZWNrX25vd2Fybl9mbGFnKC1Xbm8tdW51c2VkLXZhbHVlKQpjaGVja19ub3dhcm5fZmxhZygtV25vLXVudXNlZC12YXJpYWJsZSkKCmlmKCIke0NNQUtFX0NYWF9DT01QSUxFUl9JRH0iIE1BVENIRVMgIi4qQ2xhbmcuKiIpCiAgY2hlY2tfbm93YXJuX2ZsYWcoLVduby1kZXByZWNhdGVkLWFub24tZW51bS1lbnVtLWNvbnZlcnNpb24pCiAgY2hlY2tfbm93YXJuX2ZsYWcoLVduby1leHRlcm4tYy1jb21wYXQpCiAgY2hlY2tfbm93YXJuX2ZsYWcoLVduby1pbXBsaWNpdC1pbnQtZmxvYXQtY29udmVyc2lvbikKICBjaGVja19ub3dhcm5fZmxhZygtV25vLWRlcHJlY2F0ZWQtZW51bS1lbnVtLWNvbnZlcnNpb24pCmVuZGlmKCIke0NNQUtFX0NYWF9DT01QSUxFUl9JRH0iIE1BVENIRVMgIi4qQ2xhbmcuKiIpCgojIGR1bXAoQ01BS0VfQ19GTEFHUyBDTUFLRV9DWFhfRkxBR1MpIGR1bXAoQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHKQoKY2hlY2tfcGljX2ZsYWcoKQoKc2V0KERFQlVHX09VVFBVVCBUUlVFIENBQ0hFIEJPT0wgIkRlYnVnIG91dHB1dCIgRk9SQ0UpCnNldChERUJVR19NQVQgRkFMU0UgQ0FDSEUgQk9PTCAiRGVidWcgY3Y6Ok1hdCIgRk9SQ0UpCgpjaGVja19vcHRfbm9uZV9mbGFnKCkKCmNoZWNrX2RlYnVnX2dkYl9mbGFnKCkKCmNoZWNrX2NfY29tcGlsZXJfZmxhZygiLWZsdG8iIEhBU19GX0xUT19GTEFHKQoKaWYoSEFTX0ZfTFRPX0ZMQUcpCiAgb3B0aW9uKEVOQUJMRV9MVE8gIkVuYWJsZSBsaW5rLXRpbWUgb3B0aW1pemF0aW9uIiBPRkYpCmVuZGlmKEhBU19GX0xUT19GTEFHKQoKaWYoRU5BQkxFX0xUTykKICBzZXQoQ01BS0VfQ19GTEFHUyAiJHtDTUFLRV9DX0ZMQUdTfSAtZmx0byIpCiAgc2V0KENNQUtFX0VYRV9MSU5LRVJfRkxBR1MgIiR7Q01BS0VfRVhFX0xJTktFUl9GTEFHU30gLWZsdG8iKQplbmRpZihFTkFCTEVfTFRPKQoKbGlua19kaXJlY3RvcmllcyhCRUZPUkUgJHtxdWlja2pzX0JJTkFSWV9ESVJ9KQoKbGlua19kaXJlY3RvcmllcygiJHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9L3F1aWNranMiKQoKc2V0KFFVSUNLSlNfTElCUkFSWSBxdWlja2pzKQpsaW5rX2RpcmVjdG9yaWVzKCR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfS9xdWlja2pzKQoKb3B0aW9uKFFVSUNLSlNfTU9EVUxFUyAiQnVpbGQgLnNvIG1vZHVsZXMgZm9yIHF1aWNranMiIE9OKQoKb3B0aW9uKEJVSUxEX1FVSUNLSlMgIkJ1aWxkIFF1aWNrSlMiIE9OKQoKZmlsZShHTE9CIE9QRU5DVl9TT1VSQ0VTICouaHBwICouY3BwKQojIGR1bXAoT1BFTkNWX1NPVVJDRVMpCgpsaXN0KEZJTFRFUiBPUEVOQ1ZfU09VUkNFUyBFWENMVURFIFJFR0VYICJpbml0X21vZHVsZS5jcHAiKQphZGRfbGlicmFyeShxanMtb3BlbmN2IFNUQVRJQyAke09QRU5DVl9TT1VSQ0VTfSkKc2V0X3RhcmdldF9wcm9wZXJ0aWVzKHFqcy1vcGVuY3YgUFJPUEVSVElFUyBQUkVGSVggIiIgT1VUUFVUX05BTUUgb3BlbmN2IENPTVBJTEVfRkxBR1MgIiR7UVVJQ0tKU19NT0RVTEVfQ0ZMQUdTfSIpCnRhcmdldF9jb21waWxlX2RlZmluaXRpb25zKHFqcy1vcGVuY3YKICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJJVkFURSBDT05GSUdfUFJFRklYPSIke0NNQUtFX0lOU1RBTExfUFJFRklYfSIpCmluc3RhbGwoVEFSR0VUUyBxanMtb3BlbmN2IERFU1RJTkFUSU9OIGxpYi9xdWlja2pzKQpzZXQoanNiaW5kaW5nc19MSUJSQVJJRVMgcWpzLW9wZW5jdikKCiMgbWFrZV9zdGF0aWNfbW9kdWxlKG9wZW5jdiBpbml0X21vZHVsZS5jcHApCm1ha2Vfc2hhcmVkX21vZHVsZShvcGVuY3YgaW5pdF9tb2R1bGUuY3BwKQoAAAAAAAAAAIoQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKw8AAAAAAAArDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1078,
					1,
					"insert",
					{
						"characters": " ${"
					},
					"AwAAAGMPAAAAAAAAZA8AAAAAAAAAAAAAZA8AAAAAAABlDwAAAAAAAAAAAABlDwAAAAAAAGYPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYw8AAAAAAABjDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1079,
					1,
					"paste",
					null,
					"AQAAAGYPAAAAAAAAaw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZg8AAAAAAABmDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1080,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAGsPAAAAAAAAbA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaw8AAAAAAABrDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1091,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACTEAAAY21ha2VfbWluaW11bV9yZXF1aXJlZChWRVJTSU9OIDMuMCkKcHJvamVjdChxanMtb3BlbmN2KQoKc2V0KERJU0FCTEVfV0VSUk9SIFRSVUUgQ0FDSEUgQk9PTCAiRGlzYWJsZSAtV2Vycm9yIGZsYWciIEZPUkNFKQoKc2V0KENNQUtFX0JVSUxEX1RZUEUgIkRlYnVnIiBDQUNIRSBTVFJJTkcgImJ1aWxkIHR5cGUiKQoKc2V0X3Byb3BlcnR5KENBQ0hFIENNQUtFX0JVSUxEX1RZUEUgUFJPUEVSVFkgU1RSSU5HUyBEZWJ1ZyBSZWxlYXNlIE1pblNpemVSZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsV2l0aERlYkluZm8pCgpzZXQocXVpY2tqc19zb3VyY2VzX3Jvb3QgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3F1aWNranMpCgppZihOT1QgQ01BS0VfQlVJTERfVFlQRSBPUiBDTUFLRV9CVUlMRF9UWVBFIFNUUkVRVUFMICIiKQogIHNldChDTUFLRV9CVUlMRF9UWVBFICJEZWJ1ZyIpCmVuZGlmKE5PVCBDTUFLRV9CVUlMRF9UWVBFIE9SIENNQUtFX0JVSUxEX1RZUEUgU1RSRVFVQUwgIiIpCgppZihXSU4zMikKICBzZXQoTElCV1MyXzMyIHdzMl8zMikKZWxzZShXSU4zMikKCmVuZGlmKFdJTjMyKQoKaW5jbHVkZShGaW5kVGhyZWFkcykKaW5jbHVkZShGaW5kUGtnQ29uZmlnKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9GdW5jdGlvbnMuY21ha2UpCmluY2x1ZGUoJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NtYWtlL0NoZWNrRmxhZ3MuY21ha2UpCmluY2x1ZGUoJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NtYWtlL0ZpbmRRdWlja0pTLmNtYWtlKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9KU0JpbmRpbmdzLmNtYWtlKQppbmNsdWRlKCR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9PcGVuQ1YuY21ha2UpCgppZihFTkFCTEVfQ0NBQ0hFKQogIGluY2x1ZGUoJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NtYWtlL0NDYWNoZS5jbWFrZSkKICBlbmFibGVfY2NhY2hlKCkKZW5kaWYoRU5BQkxFX0NDQUNIRSkKCmNoZWNrX3NpemUoImxvbmciIFNJWkVPRl9MT05HKQpjaGVja19zaXplKCJsb25nIGxvbmciIFNJWkVPRl9MT05HX0xPTkcpCmNoZWNrX3NpemUoInNpemVfdCIgU0laRU9GX1NJWkVfVCkKCmlmKE5PVCBQT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFKQogIHNldChQT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFIE9OKQplbmRpZihOT1QgUE9TSVRJT05fSU5ERVBFTkRFTlRfQ09ERSkKb3B0aW9uKEJVSUxEX1NIQVJFRF9MSUJTICJCdWlsZCBzaGFyZWQgbGlicmFyaWVzIiBPTikKCm1lc3NhZ2UoIlRocmVhZCBsaWJyYXJ5OiAke0NNQUtFX1RIUkVBRF9MSUJTX0lOSVR9IikKaWYoQ01BS0VfVEhSRUFEX0xJQlNfSU5JVCkKICBzZXQoTElCUFRIUkVBRCAke0NNQUtFX1RIUkVBRF9MSUJTX0lOSVR9KQplbmRpZihDTUFLRV9USFJFQURfTElCU19JTklUKQoKY2hlY2tfbGlicmFyeV9leGlzdHMobSBhdGFuMiAvdXNyL2xpYiBIQVZFX0xJQk0pCmlmKEhBVkVfTElCTSkKICBzZXQoTElCTSBtKQogICMgbWVzc2FnZSgiRm91bmQgbWF0aCBsaWJyYXJ5OiAke0xJQk19IikKZW5kaWYoSEFWRV9MSUJNKQoKY2hlY2tfbGlicmFyeV9leGlzdHMoZGwgZGxvcGVuIC91c3IvbGliIEhBVkVfTElCREwpCmlmKEhBVkVfTElCREwpCiAgc2V0KExJQkRMIGRsKQogICMgbWVzc2FnZSgiRm91bmQgZGxmY24gbGlicmFyeTogJHtMSUJETH0iKQplbmRpZihIQVZFX0xJQkRMKQoKY2hlY2tfbGlicmFyeV9leGlzdHMoanNvbi1jcHAgWk40WUFNTDZkZXRhaWw5bm9kZV9kYXRhOXJlc2V0X21hcEV2IC91c3IKICAgICAgICAgICAgICAgICAgICAgSlNPTl9DUFApCgpmaW5kX3F1aWNranMoKQpmaW5kX29wZW5jdigpCgpzZXQoQ01BS0VfSU5TVEFMTF9SUEFUSCAiJHtPUEVOQ1ZfTElCX0RJUn0iCiAgICBDQUNIRSBQQVRIICJCdWlsZCB3aXRoIGluc3RhbGwgcnBhdGgiIEZPUkNFKQoKaW5jbHVkZV9kaXJlY3RvcmllcygKICAke09QRU5DVl9JTkNMVURFX0RJUlN9ICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfQogICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9vcGVuY3YgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3NyYwogICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9pbmNsdWRlICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9xdWlja2pzKQoKY2hlY2tfY3h4X3N0YW5kYXJkX2ZsYWcoKQoKc3RyaW5nKFJFR0VYIFJFUExBQ0UgIiAtV2FsbCIgIiIgQ01BS0VfQ19GTEFHUyAiJHtDTUFLRV9DX0ZMQUdTfSIpCnN0cmluZyhSRUdFWCBSRVBMQUNFICIgLVdhbGwiICIiIENNQUtFX0NYWF9GTEFHUyAiJHtDTUFLRV9DWFhfRkxBR1N9IikKCmNoZWNrX25vd2Fybl9mbGFnKC1Xbm8tdW51c2VkLXZhbHVlKQpjaGVja19ub3dhcm5fZmxhZygtV25vLXVudXNlZC12YXJpYWJsZSkKCmlmKCIke0NNQUtFX0NYWF9DT01QSUxFUl9JRH0iIE1BVENIRVMgIi4qQ2xhbmcuKiIpCiAgY2hlY2tfbm93YXJuX2ZsYWcoLVduby1kZXByZWNhdGVkLWFub24tZW51bS1lbnVtLWNvbnZlcnNpb24pCiAgY2hlY2tfbm93YXJuX2ZsYWcoLVduby1leHRlcm4tYy1jb21wYXQpCiAgY2hlY2tfbm93YXJuX2ZsYWcoLVduby1pbXBsaWNpdC1pbnQtZmxvYXQtY29udmVyc2lvbikKICBjaGVja19ub3dhcm5fZmxhZygtV25vLWRlcHJlY2F0ZWQtZW51bS1lbnVtLWNvbnZlcnNpb24pCmVuZGlmKCIke0NNQUtFX0NYWF9DT01QSUxFUl9JRH0iIE1BVENIRVMgIi4qQ2xhbmcuKiIpCgojIGR1bXAoQ01BS0VfQ19GTEFHUyBDTUFLRV9DWFhfRkxBR1MpIGR1bXAoQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHKQoKY2hlY2tfcGljX2ZsYWcoKQoKc2V0KERFQlVHX09VVFBVVCBUUlVFIENBQ0hFIEJPT0wgIkRlYnVnIG91dHB1dCIgRk9SQ0UpCnNldChERUJVR19NQVQgRkFMU0UgQ0FDSEUgQk9PTCAiRGVidWcgY3Y6Ok1hdCIgRk9SQ0UpCgpjaGVja19vcHRfbm9uZV9mbGFnKCkKCmNoZWNrX2RlYnVnX2dkYl9mbGFnKCkKCmNoZWNrX2NfY29tcGlsZXJfZmxhZygiLWZsdG8iIEhBU19GX0xUT19GTEFHKQoKaWYoSEFTX0ZfTFRPX0ZMQUcpCiAgb3B0aW9uKEVOQUJMRV9MVE8gIkVuYWJsZSBsaW5rLXRpbWUgb3B0aW1pemF0aW9uIiBPRkYpCmVuZGlmKEhBU19GX0xUT19GTEFHKQoKaWYoRU5BQkxFX0xUTykKICBzZXQoQ01BS0VfQ19GTEFHUyAiJHtDTUFLRV9DX0ZMQUdTfSAtZmx0byIpCiAgc2V0KENNQUtFX0VYRV9MSU5LRVJfRkxBR1MgIiR7Q01BS0VfRVhFX0xJTktFUl9GTEFHU30gLWZsdG8iKQplbmRpZihFTkFCTEVfTFRPKQoKbGlua19kaXJlY3RvcmllcyhCRUZPUkUgJHtxdWlja2pzX0JJTkFSWV9ESVJ9KQoKbGlua19kaXJlY3RvcmllcygiJHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9L3F1aWNranMiKQoKc2V0KFFVSUNLSlNfTElCUkFSWSBxdWlja2pzKQpsaW5rX2RpcmVjdG9yaWVzKCR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfS9xdWlja2pzKQoKb3B0aW9uKFFVSUNLSlNfTU9EVUxFUyAiQnVpbGQgLnNvIG1vZHVsZXMgZm9yIHF1aWNranMiIE9OKQoKb3B0aW9uKEJVSUxEX1FVSUNLSlMgIkJ1aWxkIFF1aWNrSlMiIE9OKQoKZmlsZShHTE9CIE9QRU5DVl9TT1VSQ0VTICouaHBwICouY3BwKQojIGR1bXAoT1BFTkNWX1NPVVJDRVMpCgpsaXN0KEZJTFRFUiBPUEVOQ1ZfU09VUkNFUyBFWENMVURFIFJFR0VYICJpbml0X21vZHVsZS5jcHAiKQphZGRfbGlicmFyeShxanMtb3BlbmN2IFNUQVRJQyAke09QRU5DVl9TT1VSQ0VTfSkKc2V0X3RhcmdldF9wcm9wZXJ0aWVzKAogIHFqcy1vcGVuY3YgUFJPUEVSVElFUyBQUkVGSVggIiIgT1VUUFVUX05BTUUgb3BlbmN2IENPTVBJTEVfRkxBR1MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJHtRVUlDS0pTX01PRFVMRV9DRkxBR1N9ICR7Rl9QSUN9IikKdGFyZ2V0X2NvbXBpbGVfZGVmaW5pdGlvbnMocWpzLW9wZW5jdgogICAgICAgICAgICAgICAgICAgICAgICAgICBQUklWQVRFIENPTkZJR19QUkVGSVg9IiR7Q01BS0VfSU5TVEFMTF9QUkVGSVh9IikKaW5zdGFsbChUQVJHRVRTIHFqcy1vcGVuY3YgREVTVElOQVRJT04gbGliL3F1aWNranMpCnNldChqc2JpbmRpbmdzX0xJQlJBUklFUyBxanMtb3BlbmN2KQoKIyBtYWtlX3N0YXRpY19tb2R1bGUob3BlbmN2IGluaXRfbW9kdWxlLmNwcCkKbWFrZV9zaGFyZWRfbW9kdWxlKG9wZW5jdiBpbml0X21vZHVsZS5jcHApCgAAAAAAAAAAdhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATA4AAAAAAABMDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1098,
					1,
					"insert",
					{
						"characters": "PIC_FLAG"
					},
					"CAAAACsLAAAAAAAALAsAAAAAAAAAAAAALAsAAAAAAAAtCwAAAAAAAAAAAAAtCwAAAAAAAC4LAAAAAAAAAAAAAC4LAAAAAAAALwsAAAAAAAAAAAAALwsAAAAAAAAwCwAAAAAAAAAAAAAwCwAAAAAAADELAAAAAAAAAAAAADELAAAAAAAAMgsAAAAAAAAAAAAAMgsAAAAAAAAzCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwsAAAAAAAArCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1110,
					1,
					"insert",
					{
						"characters": "QUICKJS_MO"
					},
					"CwAAACsLAAAAAAAALAsAAAAAAAAAAAAALAsAAAAAAAAsCwAAAAAAAAgAAABQSUNfRkxBRywLAAAAAAAALQsAAAAAAAAAAAAALQsAAAAAAAAuCwAAAAAAAAAAAAAuCwAAAAAAAC8LAAAAAAAAAAAAAC8LAAAAAAAAMAsAAAAAAAAAAAAAMAsAAAAAAAAxCwAAAAAAAAAAAAAxCwAAAAAAADILAAAAAAAAAAAAADILAAAAAAAAMwsAAAAAAAAAAAAAMwsAAAAAAAA0CwAAAAAAAAAAAAA0CwAAAAAAADULAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwsAAAAAAAAzCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1112,
					1,
					"insert_completion",
					{
						"completion": "QUICKJS_MODULE_CFLAGS",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "QUICKJS_MODULE_CFLAGS"
					},
					"AgAAACsLAAAAAAAAKwsAAAAAAAAKAAAAUVVJQ0tKU19NTysLAAAAAAAAQAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQsAAAAAAAA1CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1120,
					1,
					"left_delete",
					null,
					"AQAAAF4PAAAAAAAAXg8AAAAAAAAFAAAARl9QSUM",
					"AQAAAAAAAAABAAAAXg8AAAAAAABjDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1121,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAF0PAAAAAAAAXQ8AAAAAAAABAAAAe10PAAAAAAAAXQ8AAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAXg8AAAAAAABeDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1122,
					2,
					"left_delete",
					null,
					"AgAAAFwPAAAAAAAAXA8AAAAAAAABAAAAJFsPAAAAAAAAWw8AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAXQ8AAAAAAABdDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1123,
					1,
					"right_delete",
					null,
					"AQAAAFsPAAAAAAAAWw8AAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAAWw8AAAAAAABbDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1124,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAFsPAAAAAAAAXQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWw8AAAAAAABbDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1125,
					1,
					"right_delete",
					null,
					"AQAAAFwPAAAAAAAAXA8AAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAAXA8AAAAAAABcDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1143,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAGIOAAAAAAAAYw4AAAAAAAAAAAAAYw4AAAAAAABkDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYg4AAAAAAABiDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1145,
					1,
					"insert",
					{
						"characters": "dump/"
					},
					"BQAAAGMOAAAAAAAAZA4AAAAAAAAAAAAAZA4AAAAAAABlDgAAAAAAAAAAAABlDgAAAAAAAGYOAAAAAAAAAAAAAGYOAAAAAAAAZw4AAAAAAAAAAAAAZw4AAAAAAABoDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYw4AAAAAAABjDgAAAAAAAAAAAAAAAAAA"
				],
				[
					1146,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGgOAAAAAAAAag4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaA4AAAAAAABoDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1147,
					1,
					"insert",
					{
						"characters": "Q"
					},
					"AQAAAGkOAAAAAAAAag4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQ4AAAAAAABpDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1148,
					3,
					"left_delete",
					null,
					"AwAAAGkOAAAAAAAAaQ4AAAAAAAABAAAAUWgOAAAAAAAAaA4AAAAAAAABAAAAKGcOAAAAAAAAZw4AAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAag4AAAAAAABqDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1149,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGcOAAAAAAAAaQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZw4AAAAAAABnDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1150,
					1,
					"insert",
					{
						"characters": "QUICKJS_"
					},
					"CAAAAGgOAAAAAAAAaQ4AAAAAAAAAAAAAaQ4AAAAAAABqDgAAAAAAAAAAAABqDgAAAAAAAGsOAAAAAAAAAAAAAGsOAAAAAAAAbA4AAAAAAAAAAAAAbA4AAAAAAABtDgAAAAAAAAAAAABtDgAAAAAAAG4OAAAAAAAAAAAAAG4OAAAAAAAAbw4AAAAAAAAAAAAAbw4AAAAAAABwDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaA4AAAAAAABoDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1151,
					1,
					"insert_completion",
					{
						"completion": "QUICKJS_MODULE_CFLAGS",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "QUICKJS_MODULE_CFLAGS"
					},
					"AgAAAGgOAAAAAAAAaA4AAAAAAAAIAAAAUVVJQ0tKU19oDgAAAAAAAH0OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcA4AAAAAAABwDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1153,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAH4OAAAAAAAAfw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfg4AAAAAAAB+DgAAAAAAAAAAAAAAAPC/"
				],
				[
					1154,
					1,
					"left_delete",
					null,
					"AQAAAH4OAAAAAAAAfg4AAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAfw4AAAAAAAB/DgAAAAAAAAAAAAAAAPC/"
				],
				[
					1155,
					1,
					"right_delete",
					null,
					"AQAAAH4OAAAAAAAAfg4AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAfg4AAAAAAAB+DgAAAAAAAAAAAAAAAPC/"
				],
				[
					1160,
					1,
					"insert",
					{
						"characters": " F_PIC"
					},
					"BgAAAH0OAAAAAAAAfg4AAAAAAAAAAAAAfg4AAAAAAAB/DgAAAAAAAAAAAAB/DgAAAAAAAIAOAAAAAAAAAAAAAIAOAAAAAAAAgQ4AAAAAAAAAAAAAgQ4AAAAAAACCDgAAAAAAAAAAAACCDgAAAAAAAIMOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQ4AAAAAAAB9DgAAAAAAAAAAAAAAAPC/"
				],
				[
					1163,
					1,
					"insert",
					{
						"characters": " ${F_PIC}"
					},
					"CQAAAH4PAAAAAAAAfw8AAAAAAAAAAAAAfw8AAAAAAACADwAAAAAAAAAAAACADwAAAAAAAIEPAAAAAAAAAAAAAIEPAAAAAAAAgg8AAAAAAAAAAAAAgg8AAAAAAACDDwAAAAAAAAAAAACDDwAAAAAAAIQPAAAAAAAAAAAAAIQPAAAAAAAAhQ8AAAAAAAAAAAAAhQ8AAAAAAACGDwAAAAAAAAAAAACGDwAAAAAAAIcPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfg8AAAAAAAB+DwAAAAAAAAAAAAAAAPC/"
				],
				[
					1175,
					1,
					"left_delete",
					null,
					"AQAAAA4IAAAAAAAADggAAAAAAACPAAAACiAgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L29wZW5jdiAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vc3JjCiAgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2luY2x1ZGUgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3F1aWNranM",
					"AQAAAAAAAAABAAAADggAAAAAAACdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1177,
					3,
					"right_delete",
					null,
					"AwAAANkHAAAAAAAA2QcAAAAAAAABAAAACtkHAAAAAAAA2QcAAAAAAAABAAAAINkHAAAAAAAA2QcAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA2QcAAAAAAADZBwAAAAAAAAAAAAAAQIBA"
				],
				[
					1183,
					1,
					"cut",
					null,
					"AQAAAPQNAAAAAAAA9A0AAAAAAAA8AAAAbGlzdChGSUxURVIgT1BFTkNWX1NPVVJDRVMgRVhDTFVERSBSRUdFWCAiaW5pdF9tb2R1bGUuY3BwIikK",
					"AQAAAAAAAAABAAAA9A0AAAAAAAAwDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1184,
					2,
					"paste",
					null,
					"AgAAAPQNAAAAAAAAMA4AAAAAAAAAAAAAMA4AAAAAAABsDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9A0AAAAAAAD0DQAAAAAAAAAAAAAAAPC/"
				],
				[
					1188,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AgAAAFoOAAAAAAAAWw4AAAAAAAAAAAAAWw4AAAAAAABbDgAAAAAAAAsAAABpbml0X21vZHVsZQ",
					"AQAAAAAAAAABAAAAWg4AAAAAAABlDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1189,
					1,
					"left_delete",
					null,
					"AQAAAFoOAAAAAAAAWg4AAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAAWw4AAAAAAABbDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1190,
					1,
					"insert",
					{
						"characters": "js"
					},
					"AgAAAFoOAAAAAAAAWw4AAAAAAAAAAAAAWw4AAAAAAABcDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWg4AAAAAAABaDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1193,
					1,
					"insert",
					{
						"characters": "\\\\"
					},
					"AgAAAFwOAAAAAAAAXQ4AAAAAAAAAAAAAXQ4AAAAAAABeDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXA4AAAAAAABcDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1195,
					1,
					"insert",
					{
						"characters": "[h"
					},
					"AgAAAF8OAAAAAAAAYA4AAAAAAAAAAAAAYA4AAAAAAABhDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXw4AAAAAAABfDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1197,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAGIOAAAAAAAAYw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYg4AAAAAAABiDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1199,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGcOAAAAAAAAaA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZw4AAAAAAABnDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1202,
					1,
					"insert",
					{
						"characters": "\\\\"
					},
					"AgAAACkOAAAAAAAAKg4AAAAAAAAAAAAAKg4AAAAAAAArDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQ4AAAAAAAApDgAAAAAAAAAAAAAAkIBA"
				],
				[
					1205,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAKQPAAAAAAAApQ8AAAAAAAAAAAAApQ8AAAAAAADADwAAAAAAAAAAAAClDwAAAAAAAKUPAAAAAAAAGwAAACAgICAgICAgICAgICAgICAgICAgICAgICAgIKUPAAAAAAAApQ8AAAAAAAAAAAAApQ8AAAAAAACmDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApA8AAAAAAACkDwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "cmake/Functions.cmake",
			"settings":
			{
				"buffer_size": 944,
				"line_ending": "Unix"
			}
		},
		{
			"file": "init_module.cpp",
			"settings":
			{
				"buffer_size": 2361,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA5CQAAI2luY2x1ZGUgInF1aWNranMvcXVpY2tqcy5oIgojaW5jbHVkZSAidXRpbC5ocHAiCgpleHRlcm4gIkMiIGludCBqc19jbGFoZV9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CmV4dGVybiAiQyIgaW50IGpzX2NvbnRvdXJfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwpleHRlcm4gIkMiIGludCBqc19jdl9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CmV4dGVybiAiQyIgaW50IGpzX2RyYXdfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwpleHRlcm4gIkMiIGludCBqc19saW5lX2luaXQoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKZXh0ZXJuICJDIiBpbnQganNfbWF0X2luaXQoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKZXh0ZXJuICJDIiBpbnQganNfcG9pbnRfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwpleHRlcm4gIkMiIGludCBqc19wb2ludF9pdGVyYXRvcl9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CmV4dGVybiAiQyIgaW50IGpzX3JlY3RfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwpleHRlcm4gIkMiIGludCBqc19zaXplX2luaXQoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKZXh0ZXJuICJDIiBpbnQganNfc2xpY2VfaXRlcmF0b3JfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwpleHRlcm4gIkMiIGludCBqc19zdWJkaXYyZF9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CmV4dGVybiAiQyIgaW50IGpzX3VtYXRfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwpleHRlcm4gIkMiIGludCBqc191dGlsaXR5X2luaXQoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKZXh0ZXJuICJDIiBpbnQganNfdmlkZW9fY2FwdHVyZV9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CgpleHRlcm4gIkMiIHZvaWQganNfY3ZfZXhwb3J0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CgppbnQKanNfb3BlbmN2X2luaXQoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtKSB7CiAganNfY2xhaGVfaW5pdChjdHgsIG0pOwogIGpzX2NvbnRvdXJfaW5pdChjdHgsIG0pOwogIGpzX2N2X2luaXQoY3R4LCBtKTsKICBqc19kcmF3X2luaXQoY3R4LCBtKTsKICBqc19saW5lX2luaXQoY3R4LCBtKTsKICBqc19tYXRfaW5pdChjdHgsIG0pOwogIGpzX3BvaW50X2luaXQoY3R4LCBtKTsKICBqc19wb2ludF9pdGVyYXRvcl9pbml0KGN0eCwgbSk7CiAganNfcmVjdF9pbml0KGN0eCwgbSk7CiAganNfc2l6ZV9pbml0KGN0eCwgbSk7CiAganNfc2xpY2VfaXRlcmF0b3JfaW5pdChjdHgsIG0pOwogIGpzX3N1YmRpdjJkX2luaXQoY3R4LCBtKTsKICBqc191bWF0X2luaXQoY3R4LCBtKTsKICBqc191dGlsaXR5X2luaXQoY3R4LCBtKTsKICBqc192aWRlb19jYXB0dXJlX2luaXQoY3R4LCBtKTsKCiAgcmV0dXJuIDA7Cn0KCiNpZmRlZiBKU19PUEVOQ1ZfTU9EVUxFCiNkZWZpbmUgSlNfSU5JVF9NT0RVTEUganNfaW5pdF9tb2R1bGUKI2Vsc2UKI2RlZmluZSBKU19JTklUX01PRFVMRSBqc19pbml0X21vZHVsZV9vcGVuY3YKI2VuZGlmCgpleHRlcm4gIkMiIFZJU0lCTEUgSlNNb2R1bGVEZWYqCkpTX0lOSVRfTU9EVUxFKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBtb2R1bGVfbmFtZSkgewogIEpTTW9kdWxlRGVmKiBtOwogIG0gPSBKU19OZXdDTW9kdWxlKGN0eCwgbW9kdWxlX25hbWUsICZqc19vcGVuY3ZfaW5pdCk7CiAgaWYoIW0pCiAgICByZXR1cm4gTlVMTDsKCiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIkNMQUhFIik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIkNvbnRvdXIiKTsKICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiRHJhdyIpOwogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJMaW5lIik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIk1hdCIpOwogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJQb2ludCIpOwogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJQb2ludEl0ZXJhdG9yIik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIlJlY3QiKTsKICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiU2l6ZSIpOwogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJTbGljZUl0ZXJhdG9yIik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIlN1YmRpdjJEIik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIlVNYXQiKTsKICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiVGlja01ldGVyIik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIlZpZGVvQ2FwdHVyZSIpOwoKICBqc19jdl9leHBvcnQoY3R4LCBtKTsKCiAgcmV0dXJuIG07Cn0KAAAAAAAAAAA5CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7AMAAAAAAADuAwAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA5CQAAI2luY2x1ZGUgInF1aWNranMvcXVpY2tqcy5oIgojaW5jbHVkZSAidXRpbC5ocHAiCgpleHRlcm4gIkMiIGludCBqc19jbGFoZV9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CmV4dGVybiAiQyIgaW50IGpzX2NvbnRvdXJfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwpleHRlcm4gIkMiIGludCBqc19jdl9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CmV4dGVybiAiQyIgaW50IGpzX2RyYXdfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwpleHRlcm4gIkMiIGludCBqc19saW5lX2luaXQoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKZXh0ZXJuICJDIiBpbnQganNfbWF0X2luaXQoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKZXh0ZXJuICJDIiBpbnQganNfcG9pbnRfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwpleHRlcm4gIkMiIGludCBqc19wb2ludF9pdGVyYXRvcl9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CmV4dGVybiAiQyIgaW50IGpzX3JlY3RfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwpleHRlcm4gIkMiIGludCBqc19zaXplX2luaXQoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKZXh0ZXJuICJDIiBpbnQganNfc2xpY2VfaXRlcmF0b3JfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwpleHRlcm4gIkMiIGludCBqc19zdWJkaXYyZF9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CmV4dGVybiAiQyIgaW50IGpzX3VtYXRfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwpleHRlcm4gIkMiIGludCBqc191dGlsaXR5X2luaXQoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKZXh0ZXJuICJDIiBpbnQganNfdmlkZW9fY2FwdHVyZV9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CgpleHRlcm4gIkMiIHZvaWQganNfY3ZfZXhwb3J0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CgppbnQKanNfb3BlbmN2X2luaXQoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtKSB7CiAganNfY2xhaGVfaW5pdChjdHgsIG0pOwogIGpzX2NvbnRvdXJfaW5pdChjdHgsIG0pOwogIGpzX2N2X2luaXQoY3R4LCBtKTsKICBqc19kcmF3X2luaXQoY3R4LCBtKTsKICBqc19saW5lX2luaXQoY3R4LCBtKTsKICBqc19tYXRfaW5pdChjdHgsIG0pOwogIGpzX3BvaW50X2luaXQoY3R4LCBtKTsKICBqc19wb2ludF9pdGVyYXRvcl9pbml0KGN0eCwgbSk7CiAganNfcmVjdF9pbml0KGN0eCwgbSk7CiAganNfc2l6ZV9pbml0KGN0eCwgbSk7CiAganNfc2xpY2VfaXRlcmF0b3JfaW5pdChjdHgsIG0pOwogIGpzX3N1YmRpdjJkX2luaXQoY3R4LCBtKTsKICBqc191bWF0X2luaXQoY3R4LCBtKTsKICBqc191dGlsaXR5X2luaXQoY3R4LCBtKTsKICBqc192aWRlb19jYXB0dXJlX2luaXQoY3R4LCBtKTsKCiAgcmV0dXJuIDA7Cn0KCiNpZmRlZiBKU19PUEVOQ1ZfTU9EVUxFCiNkZWZpbmUgSlNfSU5JVF9NT0RVTEUganNfaW5pdF9tb2R1bGUKI2Vsc2UKI2RlZmluZSBKU19JTklUX01PRFVMRSBqc19pbml0X21vZHVsZV9vcGVuY3YKI2VuZGlmCgpleHRlcm4gIkMiIFZJU0lCTEUgSlNNb2R1bGVEZWYqCkpTX0lOSVRfTU9EVUxFKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBtb2R1bGVfbmFtZSkgewogIEpTTW9kdWxlRGVmKiBtOwogIG0gPSBKU19OZXdDTW9kdWxlKGN0eCwgbW9kdWxlX25hbWUsICZqc19vcGVuY3ZfaW5pdCk7CiAgaWYoIW0pCiAgICByZXR1cm4gTlVMTDsKCiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIkNMQUhFIik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIkNvbnRvdXIiKTsKICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiRHJhdyIpOwogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJMaW5lIik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIk1hdCIpOwogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJQb2ludCIpOwogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJQb2ludEl0ZXJhdG9yIik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIlJlY3QiKTsKICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiU2l6ZSIpOwogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJTbGljZUl0ZXJhdG9yIik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIlN1YmRpdjJEIik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIlVNYXQiKTsKICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiVGlja01ldGVyIik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIlZpZGVvQ2FwdHVyZSIpOwoKICBqc19jdl9leHBvcnQoY3R4LCBtKTsKCiAgcmV0dXJuIG07Cn0KAAAAAAAAAAA5CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQUAAAAAAAC1BQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_contour.cpp",
			"settings":
			{
				"buffer_size": 32329,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					20,
					1,
					"paste",
					null,
					"AQAAAE9+AAAAAAAAeH4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAT34AAAAAAABPfgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"cut",
					null,
					"AQAAAAJ+AAAAAAAAAn4AAAAAAAB3AAAACmV4dGVybiAiQyIgVklTSUJMRSB2b2lkIGpzX2NvbnRvdXJfZXhwb3J0KEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJDb250b3VyIik7Cn0",
					"AQAAAAAAAAABAAAAAn4AAAAAAAB5fgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"paste",
					null,
					"AQAAAIN8AAAAAAAA+nwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAg3wAAAAAAACDfAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPp8AAAAAAAA+3wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+nwAAAAAAAD6fAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"paste",
					null,
					"AgAAAEN+AAAAAAAAVH4AAAAAAAAAAAAAVH4AAAAAAABUfgAAAAAAABIAAABKU19BZGRNb2R1bGVFeHBvcnQ",
					"AQAAAAAAAAABAAAAQ34AAAAAAABVfgAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					2,
					"left_delete",
					null,
					"AgAAAFx+AAAAAAAAXH4AAAAAAAALAAAAICJDb250b3VyIilbfgAAAAAAAFt+AAAAAAAAAQAAACw",
					"AQAAAAAAAAABAAAAXH4AAAAAAABnfgAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAFt+AAAAAAAAXH4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAW34AAAAAAABbfgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAXH4AAAAAAABcfgAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"left_delete",
					null,
					"AQAAAMsgAAAAAAAAyyAAAAAAAAAVAAAAICAgIC8vIGpzcnQganMoY3R4KTsK",
					"AQAAAAAAAAABAAAAyyAAAAAAAADgIAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAyyAAAAAAAADLIAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAyyAAAAAAAADLIAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_line.cpp",
			"settings":
			{
				"buffer_size": 14400,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"join_lines",
					null,
					"AgAAABA0AAAAAAAAEDQAAAAAAAABAAAAChA0AAAAAAAAETQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEDQAAAAAAAAQNAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAazkAAAAAAACROQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"cut",
					null,
					"AQAAAKA5AAAAAAAAoDkAAAAAAABMAAAACmV4dGVybiAiQyIgVklTSUJMRSB2b2lkIGpzX2xpbmVfZXhwb3J0KEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewp9Cg",
					"AQAAAAAAAAABAAAA7DkAAAAAAACgOQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"paste",
					null,
					"AQAAAGM3AAAAAAAArzcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYzcAAAAAAABjNwAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGM3AAAAAAAAZDcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYzcAAAAAAABjNwAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"left_delete",
					null,
					"AQAAAK83AAAAAAAArzcAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAsDcAAAAAAACwNwAAAAAAAAAAAAAAAAAA"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAK03AAAAAAAArjcAAAAAAAAAAAAArjcAAAAAAACwNwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArTcAAAAAAACtNwAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"cut",
					null,
					"AQAAALo5AAAAAAAAujkAAAAAAAAmAAAAICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiTGluZSIpOwo",
					"AQAAAAAAAAABAAAAujkAAAAAAADgOQAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"paste",
					null,
					"AQAAALA3AAAAAAAA1jcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsDcAAAAAAACwNwAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOs5AAAAAAAA7DkAAAAAAAAAAAAA7DkAAAAAAADuOQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6zkAAAAAAADrOQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					2,
					"left_delete",
					null,
					"AgAAAOw5AAAAAAAA7DkAAAAAAAACAAAAICDrOQAAAAAAAOs5AAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAA7jkAAAAAAADuOQAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "\njs_line_export"
					},
					"EgAAAN85AAAAAAAA4DkAAAAAAAAAAAAA4DkAAAAAAADkOQAAAAAAAAAAAADgOQAAAAAAAOA5AAAAAAAABAAAACAgICDgOQAAAAAAAOI5AAAAAAAAAAAAAOI5AAAAAAAA4zkAAAAAAAAAAAAA4zkAAAAAAADkOQAAAAAAAAAAAADkOQAAAAAAAOU5AAAAAAAAAAAAAOU5AAAAAAAA5jkAAAAAAAAAAAAA5jkAAAAAAADnOQAAAAAAAAAAAADnOQAAAAAAAOg5AAAAAAAAAAAAAOg5AAAAAAAA6TkAAAAAAAAAAAAA6TkAAAAAAADqOQAAAAAAAAAAAADqOQAAAAAAAOs5AAAAAAAAAAAAAOs5AAAAAAAA7DkAAAAAAAAAAAAA7DkAAAAAAADtOQAAAAAAAAAAAADtOQAAAAAAAO45AAAAAAAAAAAAAO45AAAAAAAA7zkAAAAAAAAAAAAA7zkAAAAAAADwOQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3zkAAAAAAADfOQAAAAAAAP///////+9/"
				],
				[
					59,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPA5AAAAAAAA8jkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8DkAAAAAAADwOQAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "ctx,m"
					},
					"BQAAAPE5AAAAAAAA8jkAAAAAAAAAAAAA8jkAAAAAAADzOQAAAAAAAAAAAADzOQAAAAAAAPQ5AAAAAAAAAAAAAPQ5AAAAAAAA9TkAAAAAAAAAAAAA9TkAAAAAAAD2OQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8TkAAAAAAADxOQAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPc5AAAAAAAA+DkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9zkAAAAAAAD3OQAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA+DkAAAAAAAD4OQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAI0mAAAAAAAAjiYAAAAAAAAAAAAAjiYAAAAAAACOJgAAAAAAALcBAAAKLyoKc3RhdGljIEpTVmFsdWUKanNfbGluZV9zeW1ib2xfaXRlcmF0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCogYXJndikgewogIEpTVmFsdWUgYXJyLCBpdGVyOwogIGpzcnQganMoY3R4KTsKICBhcnIgPSBqc19saW5lX3RvX2FycmF5KGN0eCwgdGhpc192YWwsIGFyZ2MsIGFyZ3YpOwoKICBpZihKU19Jc1VuZGVmaW5lZChpdGVyYXRvcl9zeW1ib2wpKQogICAgaXRlcmF0b3Jfc3ltYm9sID0ganMuZ2V0X3N5bWJvbCgiaXRlcmF0b3IiKTsKCiAgaWYoIUpTX0lzRnVuY3Rpb24oY3R4LCAoaXRlciA9IGpzLmdldF9wcm9wZXJ0eShhcnIsIGl0ZXJhdG9yX3N5bWJvbCkpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CiAgcmV0dXJuIEpTX0NhbGwoY3R4LCBpdGVyLCBhcnIsIDAsIGFyZ3YpOwp9Ki8K",
					"AQAAAAAAAAABAAAARCgAAAAAAACNJgAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"left_delete",
					null,
					"AQAAAI0mAAAAAAAAjSYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAjiYAAAAAAACOJgAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAI0mAAAAAAAAjiYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjSYAAAAAAACNJgAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABQOAAAI2luY2x1ZGUgImpzYmluZGluZ3MuaHBwIgojaW5jbHVkZSAianNfcG9pbnQuaHBwIgojaW5jbHVkZSAianNfYWxsb2MuaHBwIgojaW5jbHVkZSAianNfbGluZS5ocHAiCiNpbmNsdWRlICJqc19hcnJheS5ocHAiCiNpbmNsdWRlICJqc190eXBlZF9hcnJheS5ocHAiCiNpbmNsdWRlICJ1dGlsLmhwcCIKI2luY2x1ZGUgImxpbmUuaHBwIgoKZW51bSB7IFBST1BfU0xPUEUgPSAwLCBQUk9QX1BJVk9ULCBQUk9QX1RPLCBQUk9QX0FOR0xFLCBQUk9QX0xFTkdUSCB9OwplbnVtIHsgTUVUSE9EX1NXQVAgPSAwLCBNRVRIT0RfQVQsIE1FVEhPRF9JTlRFUlNFQ1QsIE1FVEhPRF9FTkRQT0lOVF9ESVNUQU5DRVMsIE1FVEhPRF9ESVNUQU5DRSB9OwoKZXh0ZXJuICJDIiB7CgpKU1ZhbHVlIGxpbmVfcHJvdG8gPSBKU19VTkRFRklORUQsIGxpbmVfY2xhc3MgPSBKU19VTkRFRklORUQ7CkpTQ2xhc3NJRCBqc19saW5lX2NsYXNzX2lkID0gMDsKClZJU0lCTEUgSlNWYWx1ZQpqc19saW5lX25ldyhKU0NvbnRleHQqIGN0eCwgZG91YmxlIHgxLCBkb3VibGUgeTEsIGRvdWJsZSB4MiwgZG91YmxlIHkyKSB7CiAgSlNWYWx1ZSByZXQ7CiAgSlNMaW5lRGF0YTxkb3VibGU+KiBsbjsKCiAgaWYoSlNfSXNVbmRlZmluZWQobGluZV9wcm90bykpCiAgICBqc19saW5lX2luaXQoY3R4LCBOVUxMKTsKCiAgcmV0ID0gSlNfTmV3T2JqZWN0UHJvdG9DbGFzcyhjdHgsIGxpbmVfcHJvdG8sIGpzX2xpbmVfY2xhc3NfaWQpOwoKICBsbiA9IGpzX2FsbG9jYXRlPEpTTGluZURhdGE8ZG91YmxlPj4oY3R4KTsKCiAgbG4tPmFycmF5WzBdID0geDE7CiAgbG4tPmFycmF5WzFdID0geTE7CiAgbG4tPmFycmF5WzJdID0geDI7CiAgbG4tPmFycmF5WzNdID0geTI7CgogIEpTX1NldE9wYXF1ZShyZXQsIGxuKTsKICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgSlNWYWx1ZQpqc19saW5lX2N0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBuZXdfdGFyZ2V0LCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgSlNMaW5lRGF0YTxkb3VibGU+KiBsbjsKICBKU1ZhbHVlIG9iaiA9IEpTX1VOREVGSU5FRDsKICBKU1ZhbHVlIHByb3RvOwogIGF1dG8gYXJncyA9IGFyZ3VtZW50X3JhbmdlKHN0ZDo6bWluKDQsIGFyZ2MpLCBhcmd2KTsKCiAgbG4gPSBqc19hbGxvY2F0ZTxKU0xpbmVEYXRhPGRvdWJsZT4+KGN0eCk7CiAgaWYoIWxuKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgaWYoYXJnYyA+PSA0ICYmIHN0ZDo6cmFuZ2VzOjphbGxfb2YoYXJncywgSlNfSXNOdW1iZXIpKSB7CiAgICBpZihKU19Ub0Zsb2F0NjQoY3R4LCAmbG4tPmFycmF5WzBdLCBhcmd2WzBdKSkKICAgICAgZ290byBmYWlsOwogICAgaWYoSlNfVG9GbG9hdDY0KGN0eCwgJmxuLT5hcnJheVsxXSwgYXJndlsxXSkpCiAgICAgIGdvdG8gZmFpbDsKICAgIGlmKEpTX1RvRmxvYXQ2NChjdHgsICZsbi0+YXJyYXlbMl0sIGFyZ3ZbMl0pKQogICAgICBnb3RvIGZhaWw7CiAgICBpZihKU19Ub0Zsb2F0NjQoY3R4LCAmbG4tPmFycmF5WzNdLCBhcmd2WzNdKSkKICAgICAgZ290byBmYWlsOwogIH0gZWxzZSBpZighanNfbGluZV9yZWFkKGN0eCwgYXJndlswXSwgbG4pKSB7CiAgICByZXR1cm4gSlNfVGhyb3dUeXBlRXJyb3IoY3R4LCAiYXJndW1lbnQgMSBpcyBub3QgYSB2YWxpZCBsaW5lIik7CiAgfQogIC8qIHVzaW5nIG5ld190YXJnZXQgdG8gZ2V0IHRoZSBwcm90b3R5cGUgaXMgbmVjZXNzYXJ5IHdoZW4gdGhlCiAgICAgY2xhc3MgaXMgZXh0ZW5kZWQuICovCiAgcHJvdG8gPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG5ld190YXJnZXQsICJwcm90b3R5cGUiKTsKICBpZihKU19Jc0V4Y2VwdGlvbihwcm90bykpCiAgICBnb3RvIGZhaWw7CiAgb2JqID0gSlNfTmV3T2JqZWN0UHJvdG9DbGFzcyhjdHgsIHByb3RvLCBqc19saW5lX2NsYXNzX2lkKTsKICBKU19GcmVlVmFsdWUoY3R4LCBwcm90byk7CiAgaWYoSlNfSXNFeGNlcHRpb24ob2JqKSkKICAgIGdvdG8gZmFpbDsKICBKU19TZXRPcGFxdWUob2JqLCBsbik7CiAgcmV0dXJuIG9iajsKZmFpbDoKICBqc19kZWFsbG9jYXRlKGN0eCwgbG4pOwogIEpTX0ZyZWVWYWx1ZShjdHgsIG9iaik7CiAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKfQoKSlNMaW5lRGF0YTxkb3VibGU+Kgpqc19saW5lX2RhdGEoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWwpIHsKICByZXR1cm4gc3RhdGljX2Nhc3Q8SlNMaW5lRGF0YTxkb3VibGU+Kj4oSlNfR2V0T3BhcXVlMihjdHgsIHZhbCwganNfbGluZV9jbGFzc19pZCkpOwp9CgpzdGF0aWMgSlNWYWx1ZQpqc19saW5lX2dldF94eTEyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBtYWdpYykgewogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwogIEpTTGluZURhdGE8ZG91YmxlPiogbG4gPSBzdGF0aWNfY2FzdDxKU0xpbmVEYXRhPGRvdWJsZT4qPihKU19HZXRPcGFxdWUyKGN0eCwgdGhpc192YWwsIGpzX2xpbmVfY2xhc3NfaWQpKTsKICBpZighbG4pCiAgICByZXQgPSBKU19FWENFUFRJT047CiAgZWxzZSBpZihtYWdpYyA9PSAwKQogICAgcmV0ID0gSlNfTmV3RmxvYXQ2NChjdHgsIGxuLT5hcnJheVswXSk7CiAgZWxzZSBpZihtYWdpYyA9PSAxKQogICAgcmV0ID0gSlNfTmV3RmxvYXQ2NChjdHgsIGxuLT5hcnJheVsxXSk7CiAgZWxzZSBpZihtYWdpYyA9PSAyKQogICAgcmV0ID0gSlNfTmV3RmxvYXQ2NChjdHgsIGxuLT5hcnJheVsyXSk7CiAgZWxzZSBpZihtYWdpYyA9PSAzKQogICAgcmV0ID0gSlNfTmV3RmxvYXQ2NChjdHgsIGxuLT5hcnJheVszXSk7CiAgcmV0dXJuIHJldDsKfQoKc3RhdGljIEpTVmFsdWUKanNfbGluZV9nZXRfYWIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IG1hZ2ljKSB7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CiAgSlNMaW5lRGF0YTxkb3VibGU+KiBsbiA9IHN0YXRpY19jYXN0PEpTTGluZURhdGE8ZG91YmxlPio+KEpTX0dldE9wYXF1ZTIoY3R4LCB0aGlzX3ZhbCwganNfbGluZV9jbGFzc19pZCkpOwogIGlmKCFsbikKICAgIHJldCA9IEpTX0VYQ0VQVElPTjsKICBlbHNlIGlmKG1hZ2ljID09IDApCiAgICByZXQgPSBqc19wb2ludF9uZXcoY3R4LCBsbi0+YXJyYXlbMF0sIGxuLT5hcnJheVsxXSk7CiAgZWxzZSBpZihtYWdpYyA9PSAxKQogICAgcmV0ID0ganNfcG9pbnRfbmV3KGN0eCwgbG4tPmFycmF5WzJdLCBsbi0+YXJyYXlbM10pOwoKICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgSlNWYWx1ZQpqc19saW5lX2dldChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgbWFnaWMpIHsKICBKU0xpbmVEYXRhPGRvdWJsZT4qIGxuOwoKICBpZighKGxuID0gc3RhdGljX2Nhc3Q8SlNMaW5lRGF0YTxkb3VibGU+Kj4oSlNfR2V0T3BhcXVlMihjdHgsIHRoaXNfdmFsLCBqc19saW5lX2NsYXNzX2lkKSkpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgUFJPUF9TTE9QRTogewogICAgICBMaW5lPGRvdWJsZT4gbGluZShsbi0+YXJyYXkpOwogICAgICByZXR1cm4ganNfcG9pbnRfd3JhcChjdHgsIGxpbmUuc2xvcGUoKSk7CiAgICB9CiAgICBjYXNlIFBST1BfUElWT1Q6IHsKICAgICAgSlNQb2ludERhdGE8ZG91YmxlPiBwaXZvdChsbi0+eDEsIGxuLT55MSk7CiAgICAgIHJldHVybiBqc19wb2ludF93cmFwKGN0eCwgcGl2b3QpOwogICAgfQogICAgY2FzZSBQUk9QX1RPOiB7CiAgICAgIEpTUG9pbnREYXRhPGRvdWJsZT4gdG8obG4tPngyLCBsbi0+eTIpOwogICAgICByZXR1cm4ganNfcG9pbnRfd3JhcChjdHgsIHRvKTsKICAgIH0KICAgIGNhc2UgUFJPUF9BTkdMRTogewogICAgICBMaW5lPGRvdWJsZT4gbGluZShsbi0+YXJyYXkpOwogICAgICByZXR1cm4gSlNfTmV3RmxvYXQ2NChjdHgsIHN0ZDo6YXRhbjIobG4tPngyIC0gbG4tPngxLCBsbi0+eTIgLSBsbi0+eTEpKTsKICAgIH0KICAgIGNhc2UgUFJPUF9MRU5HVEg6IHsKICAgICAgTGluZTxkb3VibGU+IGxpbmUobG4tPmFycmF5KTsKICAgICAgcmV0dXJuIEpTX05ld0Zsb2F0NjQoY3R4LCBsaW5lLmxlbmd0aCgpKTsKICAgIH0KICB9CiAgcmV0dXJuIEpTX1VOREVGSU5FRDsKfQoKc3RhdGljIEpTVmFsdWUKanNfbGluZV9zZXQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgSlNWYWx1ZUNvbnN0IHZhbCwgaW50IG1hZ2ljKSB7CiAgSlNMaW5lRGF0YTxkb3VibGU+KiBsbjsKICBkb3VibGUgdjsKICBpZighKGxuID0gc3RhdGljX2Nhc3Q8SlNMaW5lRGF0YTxkb3VibGU+Kj4oSlNfR2V0T3BhcXVlMihjdHgsIHRoaXNfdmFsLCBqc19saW5lX2NsYXNzX2lkKSkpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgUFJPUF9QSVZPVDogewogICAgICBKU1BvaW50RGF0YTxkb3VibGU+IHBpdm90OwogICAgICBqc19wb2ludF9yZWFkKGN0eCwgdmFsLCAmcGl2b3QpOwoKICAgICAgbG4tPngxID0gcGl2b3QueDsKICAgICAgbG4tPnkxID0gcGl2b3QueTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIFBST1BfVE86IHsKICAgICAgSlNQb2ludERhdGE8ZG91YmxlPiB0bzsKICAgICAganNfcG9pbnRfcmVhZChjdHgsIHZhbCwgJnRvKTsKCiAgICAgIGxuLT54MiA9IHRvLng7CiAgICAgIGxuLT55MiA9IHRvLnk7CiAgICAgIGJyZWFrOwogICAgfQogIH0KCiAgcmV0dXJuIEpTX1VOREVGSU5FRDsKfQoKc3RhdGljIEpTVmFsdWUKanNfbGluZV9zZXRfeHkxMihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBKU1ZhbHVlQ29uc3QgdmFsLCBpbnQgbWFnaWMpIHsKICBKU0xpbmVEYXRhPGRvdWJsZT4qIGxuID0gc3RhdGljX2Nhc3Q8SlNMaW5lRGF0YTxkb3VibGU+Kj4oSlNfR2V0T3BhcXVlMihjdHgsIHRoaXNfdmFsLCBqc19saW5lX2NsYXNzX2lkKSk7CiAgZG91YmxlIHY7CiAgaWYoIWxuKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKICBpZihKU19Ub0Zsb2F0NjQoY3R4LCAmdiwgdmFsKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CiAgaWYobWFnaWMgPT0gMCkKICAgIGxuLT5hcnJheVswXSA9IHY7CiAgZWxzZSBpZihtYWdpYyA9PSAxKQogICAgbG4tPmFycmF5WzFdID0gdjsKICBlbHNlIGlmKG1hZ2ljID09IDIpCiAgICBsbi0+YXJyYXlbMl0gPSB2OwogIGVsc2UgaWYobWFnaWMgPT0gMykKICAgIGxuLT5hcnJheVszXSA9IHY7CgogIHJldHVybiBKU19VTkRFRklORUQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX2xpbmVfc2V0X2FiKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIEpTVmFsdWVDb25zdCB2YWwsIGludCBtYWdpYykgewogIEpTTGluZURhdGE8ZG91YmxlPiogbG47CiAgSlNQb2ludERhdGE8ZG91YmxlPiBwdDsKCiAgaWYoIShsbiA9IHN0YXRpY19jYXN0PEpTTGluZURhdGE8ZG91YmxlPio+KEpTX0dldE9wYXF1ZTIoY3R4LCB0aGlzX3ZhbCwganNfbGluZV9jbGFzc19pZCkpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CgogIGpzX3BvaW50X3JlYWQoY3R4LCB2YWwsICZwdCk7CgogIGlmKG1hZ2ljID09IDApIHsKICAgIGxuLT5hcnJheVswXSA9IHB0Lng7CiAgICBsbi0+YXJyYXlbMV0gPSBwdC55OwoKICB9IGVsc2UgaWYobWFnaWMgPT0gMSkgewogICAgbG4tPmFycmF5WzJdID0gcHQueDsKICAgIGxuLT5hcnJheVszXSA9IHB0Lnk7CiAgfQoKICByZXR1cm4gSlNfVU5ERUZJTkVEOwp9CgpzdGF0aWMgSlNWYWx1ZQpqc19saW5lX3BvaW50cyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgSlNMaW5lRGF0YTxkb3VibGU+KiBsbjsKCiAgaWYoIShsbiA9IHN0YXRpY19jYXN0PEpTTGluZURhdGE8ZG91YmxlPio+KEpTX0dldE9wYXF1ZTIoY3R4LCB0aGlzX3ZhbCwganNfbGluZV9jbGFzc19pZCkpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CgogIHJldHVybiBqc19hcnJheV9mcm9tKGN0eCwgbG4tPnBvaW50cyk7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX2xpbmVfaW5zcGVjdChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgSlNMaW5lRGF0YTxkb3VibGU+KiBsbiA9IGpzX2xpbmVfZGF0YShjdHgsIHRoaXNfdmFsKTsKICBKU1ZhbHVlIG9iaiA9IEpTX05ld09iamVjdFByb3RvKGN0eCwgbGluZV9wcm90byk7CgogIEpTX0RlZmluZVByb3BlcnR5VmFsdWVTdHIoY3R4LCBvYmosICJ4MSIsIEpTX05ld0Zsb2F0NjQoY3R4LCBsbi0+eDEpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogIEpTX0RlZmluZVByb3BlcnR5VmFsdWVTdHIoY3R4LCBvYmosICJ5MSIsIEpTX05ld0Zsb2F0NjQoY3R4LCBsbi0+eTEpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogIEpTX0RlZmluZVByb3BlcnR5VmFsdWVTdHIoY3R4LCBvYmosICJ4MiIsIEpTX05ld0Zsb2F0NjQoY3R4LCBsbi0+eDIpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogIEpTX0RlZmluZVByb3BlcnR5VmFsdWVTdHIoY3R4LCBvYmosICJ5MiIsIEpTX05ld0Zsb2F0NjQoY3R4LCBsbi0+eTIpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogIHJldHVybiBvYmo7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX2xpbmVfbWV0aG9kcyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2LCBpbnQgbWFnaWMpIHsKICBKU0xpbmVEYXRhPGRvdWJsZT4qIGxuOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwogIGlmKCEobG4gPSBzdGF0aWNfY2FzdDxKU0xpbmVEYXRhPGRvdWJsZT4qPihKU19HZXRPcGFxdWUyKGN0eCwgdGhpc192YWwsIGpzX2xpbmVfY2xhc3NfaWQpKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgTUVUSE9EX1NXQVA6IHsKICAgICAgSlNQb2ludERhdGE8ZG91YmxlPiBhID0gbG4tPnBvaW50c1swXSwgYiA9IGxuLT5wb2ludHNbMV07CiAgICAgIGxuLT5wb2ludHNbMF0gPSBiOwogICAgICBsbi0+cG9pbnRzWzFdID0gYTsKICAgICAgcmV0ID0gSlNfRHVwVmFsdWUoY3R4LCB0aGlzX3ZhbCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBNRVRIT0RfQVQ6IHsKICAgICAgZG91YmxlIHNpZ21hOwogICAgICBKU1BvaW50RGF0YTxkb3VibGU+IHA7CiAgICAgIGpzX3ZhbHVlX3RvKGN0eCwgYXJndlswXSwgc2lnbWEpOwoKICAgICAgc2lnbWEgPSBmbWluKGZtYXgoc2lnbWEsIDEpLCAwKTsKCiAgICAgIHAueCA9IGxuLT5wb2ludHNbMF0ueCAqICgxLjAgLSBzaWdtYSkgKyBsbi0+cG9pbnRzWzFdLnggKiBzaWdtYTsKICAgICAgcC55ID0gbG4tPnBvaW50c1swXS55ICogKDEuMCAtIHNpZ21hKSArIGxuLT5wb2ludHNbMV0ueSAqIHNpZ21hOwoKICAgICAgcmV0ID0ganNfcG9pbnRfd3JhcChjdHgsIHApOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgTUVUSE9EX0lOVEVSU0VDVDogewogICAgICBzdGQ6OmFycmF5PGRvdWJsZSwgND4gYXJnID0ganNfbGluZV9nZXQ8ZG91YmxlPihjdHgsIGFyZ3ZbMF0pOwogICAgICBKU1BvaW50RGF0YTxkb3VibGU+KiBwb2ludCA9IG51bGxwdHI7CgogICAgICBpZihhcmdjID4gMSkKICAgICAgICBwb2ludCA9IGpzX3BvaW50X2RhdGEoY3R4LCBhcmd2WzFdKTsKCiAgICAgIExpbmU8ZG91YmxlPiBsaW5lID0gTGluZShsbi0+YXJyYXkpOwogICAgICBMaW5lPGRvdWJsZT4gb3RoZXIgPSBMaW5lKGFyZyk7CgogICAgICByZXQgPSBKU19OZXdCb29sKGN0eCwgbGluZS5pbnRlcnNlY3Qob3RoZXIsIHBvaW50KSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBNRVRIT0RfRU5EUE9JTlRfRElTVEFOQ0VTOiB7CiAgICAgIEpTUG9pbnREYXRhPGRvdWJsZT4gcHQ7CiAgICAgIGpzX3BvaW50X3JlYWQoY3R4LCBhcmd2WzBdLCAmcHQpOwogICAgICBMaW5lPGRvdWJsZT4gbGluZSA9IExpbmUobG4tPmFycmF5KTsKICAgICAgYXV0byBkaXN0YW5jZXMgPSBsaW5lLmVuZHBvaW50X2Rpc3RhbmNlcyhwdCk7CiAgICAgIHJldCA9IEpTX05ld0FycmF5KGN0eCk7CiAgICAgIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCAwLCBqc19udW1iZXJfbmV3KGN0eCwgZGlzdGFuY2VzLmZpcnN0KSk7CiAgICAgIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCAxLCBqc19udW1iZXJfbmV3KGN0eCwgZGlzdGFuY2VzLnNlY29uZCkpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgTUVUSE9EX0RJU1RBTkNFOiB7CiAgICAgIGN2OjpQb2ludDJkIHB0OwogICAgICBqc19wb2ludF9yZWFkKGN0eCwgYXJndlswXSwgJnB0KTsKICAgICAgTGluZTxkb3VibGU+IGxpbmUgPSBMaW5lKGxuLT5hcnJheSk7CiAgICAgIHJldCA9IGpzX251bWJlcl9uZXcoY3R4LCBsaW5lLmRpc3RhbmNlKHB0KSk7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgSlNWYWx1ZQpqc19saW5lX3RvYXJyYXkoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBsaW5lLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmcpIHsKICBKU0xpbmVEYXRhPGRvdWJsZT4qIGxuOwoKICBpZighKGxuID0gc3RhdGljX2Nhc3Q8SlNMaW5lRGF0YTxkb3VibGU+Kj4oSlNfR2V0T3BhcXVlMihjdHgsIGxpbmUsIGpzX2xpbmVfY2xhc3NfaWQpKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICByZXR1cm4ganNfdHlwZWRhcnJheV9mcm9tKGN0eCwgbG4tPmFycmF5KTsKfQoKc3RhdGljIEpTVmFsdWUKanNfY2FsbF9tZXRob2QoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWUgb2JqLCBjb25zdCBjaGFyKiBuYW1lLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgSlNWYWx1ZSBmbiwgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBmbiA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb2JqLCBuYW1lKTsKICBpZighSlNfSXNVbmRlZmluZWQoZm4pKQogICAgcmV0ID0gSlNfQ2FsbChjdHgsIGZuLCBvYmosIGFyZ2MsIGFyZ3YpOwogIHJldHVybiByZXQ7Cn0KCiNkZWZpbmUgSlNfTElORV9BU19QT0lOVFMgMHgwMQojZGVmaW5lIEpTX0xJTkVfQVNfVkVDVE9SIDB4MDIKCiNkZWZpbmUgSlNfTElORV9HRVRfSVRFUkFUT1IgMHg4MAojZGVmaW5lIEpTX0xJTkVfVE9fU1RSSU5HIDB4NDAKCnN0YXRpYyBKU1ZhbHVlCmpzX2xpbmVfaXRlcmF0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCogYXJndiwgaW50IG1hZ2ljKSB7CiAgSlNMaW5lRGF0YTxkb3VibGU+KiBsbiA9IHN0YXRpY19jYXN0PEpTTGluZURhdGE8ZG91YmxlPio+KEpTX0dldE9wYXF1ZTIoY3R4LCB0aGlzX3ZhbCwganNfbGluZV9jbGFzc19pZCkpOwogIEpTVmFsdWUgbWV0aG9kLCByZXQgPSBKU19VTkRFRklORUQ7CgogIGlmKG1hZ2ljICYgSlNfTElORV9BU19QT0lOVFMpCiAgICByZXQgPSBqc19saW5lX3BvaW50cyhjdHgsIHRoaXNfdmFsLCBhcmdjLCBhcmd2KTsKICBpZihtYWdpYyAmIEpTX0xJTkVfQVNfVkVDVE9SKQogICAgcmV0ID0ganNfbGluZV90b2FycmF5KGN0eCwgdGhpc192YWwsIGFyZ2MsIGFyZ3YpOwoKICBpZihtYWdpYyAmIEpTX0xJTkVfR0VUX0lURVJBVE9SKQogICAgcmV0ID0ganNfY2FsbF9tZXRob2QoY3R4LCByZXQsICJ2YWx1ZXMiLCAwLCBOVUxMKTsKCiAgaWYobWFnaWMgJiBKU19MSU5FX1RPX1NUUklORykgewogICAgSlNWYWx1ZUNvbnN0IGFyZ3NbMV0gPSB7MH07CiAgICBhcmdzWzBdID0gSlNfTmV3U3RyaW5nKGN0eCwgIiAiKTsKCiAgICByZXQgPSBqc19jYWxsX21ldGhvZChjdHgsIHJldCwgImpvaW4iLCAxLCBhcmdzKTsKICB9CgogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX2xpbmVfZnJvbShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgSlNMaW5lRGF0YTxkb3VibGU+IGxpbmUgPSB7MCwgMCwgMCwgMH07CiAgSlNWYWx1ZSByZXQgPSBKU19FWENFUFRJT047CgogIGlmKEpTX0lzU3RyaW5nKGFyZ3ZbMF0pKSB7CiAgICBjb25zdCBjaGFyKiBzdHIgPSBKU19Ub0NTdHJpbmcoY3R4LCBhcmd2WzBdKTsKICAgIGNoYXIqIGVuZHB0ciA9IG51bGxwdHI7CiAgICBmb3Ioc2l6ZV90IGkgPSAwOyBpIDwgNDsgaSsrKSB7CiAgICAgIHdoaWxlKCFpc2RpZ2l0KCpzdHIpICYmICpzdHIgIT0gJy0nICYmICpzdHIgIT0gJysnICYmICEoKnN0ciA9PSAnLicgJiYgaXNkaWdpdChzdHJbMV0pKSkgc3RyKys7CiAgICAgIGlmKCpzdHIgPT0gJ1wwJykKICAgICAgICBicmVhazsKICAgICAgbGluZS5hcnJheVtpXSA9IHN0cnRvZChzdHIsICZlbmRwdHIpOwogICAgICBzdHIgPSBlbmRwdHI7CiAgICB9CiAgfSBlbHNlIHsKICAgIGpzX2xpbmVfcmVhZChjdHgsIGFyZ3ZbMF0sICZsaW5lKTsKICB9CiAgaWYobGluZS5hcnJheVsyXSA+IDAgJiYgbGluZS5hcnJheVszXSA+IDApCiAgICByZXQgPSBqc19saW5lX25ldyhjdHgsIGxpbmUuYXJyYXlbMF0sIGxpbmUuYXJyYXlbMV0sIGxpbmUuYXJyYXlbMl0sIGxpbmUuYXJyYXlbM10pOwogIHJldHVybiByZXQ7Cn0KCnZvaWQKanNfbGluZV9maW5hbGl6ZXIoSlNSdW50aW1lKiBydCwgSlNWYWx1ZSB2YWwpIHsKICBKU0xpbmVEYXRhPGRvdWJsZT4qIGxuOwoKICBpZigobG4gPSBzdGF0aWNfY2FzdDxKU0xpbmVEYXRhPGRvdWJsZT4qPihKU19HZXRPcGFxdWUodmFsLCBqc19saW5lX2NsYXNzX2lkKSkpKQogICAgLyogTm90ZTogJ2xuJyBjYW4gYmUgTlVMTCBpbiBjYXNlIEpTX1NldE9wYXF1ZSgpIHdhcyBub3QgY2FsbGVkICovCiAgICBqc19kZWFsbG9jYXRlKHJ0LCBsbik7Cn0KCkpTQ2xhc3NEZWYganNfbGluZV9jbGFzcyA9IHsKICAgIC5jbGFzc19uYW1lID0gIkxpbmUiLAogICAgLmZpbmFsaXplciA9IGpzX2xpbmVfZmluYWxpemVyLAp9OwoKY29uc3QgSlNDRnVuY3Rpb25MaXN0RW50cnkganNfbGluZV9wcm90b19mdW5jc1tdID0gewogICAgSlNfQ0dFVFNFVF9FTlVNRVJBQkxFX0RFRigieDEiLCBqc19saW5lX2dldF94eTEyLCBqc19saW5lX3NldF94eTEyLCAwKSwKICAgIEpTX0NHRVRTRVRfRU5VTUVSQUJMRV9ERUYoInkxIiwganNfbGluZV9nZXRfeHkxMiwganNfbGluZV9zZXRfeHkxMiwgMSksCiAgICBKU19DR0VUU0VUX0VOVU1FUkFCTEVfREVGKCJ4MiIsIGpzX2xpbmVfZ2V0X3h5MTIsIGpzX2xpbmVfc2V0X3h5MTIsIDIpLAogICAgSlNfQ0dFVFNFVF9FTlVNRVJBQkxFX0RFRigieTIiLCBqc19saW5lX2dldF94eTEyLCBqc19saW5lX3NldF94eTEyLCAzKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJhIiwganNfbGluZV9nZXRfYWIsIGpzX2xpbmVfc2V0X2FiLCAwKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJiIiwganNfbGluZV9nZXRfYWIsIGpzX2xpbmVfc2V0X2FiLCAxKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCIwIiwganNfbGluZV9nZXRfYWIsIGpzX2xpbmVfc2V0X2FiLCAwKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCIxIiwganNfbGluZV9nZXRfYWIsIGpzX2xpbmVfc2V0X2FiLCAxKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJzbG9wZSIsIGpzX2xpbmVfZ2V0LCAwLCBQUk9QX1NMT1BFKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJhbmdsZSIsIGpzX2xpbmVfZ2V0LCAwLCBQUk9QX0FOR0xFKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJsZW5ndGgiLCBqc19saW5lX2dldCwgMCwgUFJPUF9MRU5HVEgpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInBpdm90IiwganNfbGluZV9nZXQsIGpzX2xpbmVfc2V0LCBQUk9QX1BJVk9UKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJ0byIsIGpzX2xpbmVfZ2V0LCBqc19saW5lX3NldCwgUFJPUF9UTyksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoInN3YXAiLCAwLCBqc19saW5lX21ldGhvZHMsIE1FVEhPRF9TV0FQKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiYXQiLCAxLCBqc19saW5lX21ldGhvZHMsIE1FVEhPRF9BVCksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImludGVyc2VjdCIsIDEsIGpzX2xpbmVfbWV0aG9kcywgTUVUSE9EX0lOVEVSU0VDVCksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImVuZHBvaW50RGlzdGFuY2VzIiwgMSwganNfbGluZV9tZXRob2RzLCBNRVRIT0RfRU5EUE9JTlRfRElTVEFOQ0VTKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZGlzdGFuY2UiLCAxLCBqc19saW5lX21ldGhvZHMsIE1FVEhPRF9ESVNUQU5DRSksCiAgICBKU19DRlVOQ19ERUYoInRvQXJyYXkiLCAwLCBqc19saW5lX3RvYXJyYXkpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJ0b1BvaW50cyIsIDAsIGpzX2xpbmVfaXRlcmF0b3IsIEpTX0xJTkVfQVNfUE9JTlRTKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigidG9TdHJpbmciLCAwLCBqc19saW5lX2l0ZXJhdG9yLCBKU19MSU5FX0FTX1BPSU5UUyB8IEpTX0xJTkVfVE9fU1RSSU5HKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigidmFsdWVzIiwgMCwganNfbGluZV9pdGVyYXRvciwgSlNfTElORV9BU19WRUNUT1IgfCBKU19MSU5FX0dFVF9JVEVSQVRPUiksCiAgICBKU19BTElBU19ERUYoInN0YXJ0IiwgInBpdm90IiksCiAgICBKU19BTElBU19ERUYoImVuZCIsICJ0byIpLAogICAgSlNfQUxJQVNfREVGKCJbU3ltYm9sLml0ZXJhdG9yXSIsICJ2YWx1ZXMiKSwKICAgIEpTX1BST1BfU1RSSU5HX0RFRigiW1N5bWJvbC50b1N0cmluZ1RhZ10iLCAiTGluZSIsIEpTX1BST1BfQ09ORklHVVJBQkxFKSwKfTsKCmNvbnN0IEpTQ0Z1bmN0aW9uTGlzdEVudHJ5IGpzX2xpbmVfc3RhdGljX2Z1bmNzW10gPSB7SlNfQ0ZVTkNfREVGKCJmcm9tIiwgMSwganNfbGluZV9mcm9tKX07CgppbnQKanNfbGluZV9pbml0KEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewoKICBpZihqc19saW5lX2NsYXNzX2lkID09IDApIHsKICAgIC8qIGNyZWF0ZSB0aGUgTGluZSBjbGFzcyAqLwogICAgSlNfTmV3Q2xhc3NJRCgmanNfbGluZV9jbGFzc19pZCk7CiAgICBKU19OZXdDbGFzcyhKU19HZXRSdW50aW1lKGN0eCksIGpzX2xpbmVfY2xhc3NfaWQsICZqc19saW5lX2NsYXNzKTsKCiAgICBsaW5lX3Byb3RvID0gSlNfTmV3T2JqZWN0KGN0eCk7CiAgICBKU19TZXRQcm9wZXJ0eUZ1bmN0aW9uTGlzdChjdHgsIGxpbmVfcHJvdG8sIGpzX2xpbmVfcHJvdG9fZnVuY3MsIGNvdW50b2YoanNfbGluZV9wcm90b19mdW5jcykpOwogICAgSlNfU2V0Q2xhc3NQcm90byhjdHgsIGpzX2xpbmVfY2xhc3NfaWQsIGxpbmVfcHJvdG8pOwoKICAgIGxpbmVfY2xhc3MgPSBKU19OZXdDRnVuY3Rpb24yKGN0eCwganNfbGluZV9jdG9yLCAiTGluZSIsIDIsIEpTX0NGVU5DX2NvbnN0cnVjdG9yLCAwKTsKICAgIC8qIHNldCBwcm90by5jb25zdHJ1Y3RvciBhbmQgY3Rvci5wcm90b3R5cGUgKi8KICAgIEpTX1NldENvbnN0cnVjdG9yKGN0eCwgbGluZV9jbGFzcywgbGluZV9wcm90byk7CiAgICBKU19TZXRQcm9wZXJ0eUZ1bmN0aW9uTGlzdChjdHgsIGxpbmVfY2xhc3MsIGpzX2xpbmVfc3RhdGljX2Z1bmNzLCBjb3VudG9mKGpzX2xpbmVfc3RhdGljX2Z1bmNzKSk7CgogICAganNfc2V0X2luc3BlY3RfbWV0aG9kKGN0eCwgbGluZV9wcm90bywganNfbGluZV9pbnNwZWN0KTsKICB9CgogIGlmKG0pCiAgICBKU19TZXRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiTGluZSIsIGxpbmVfY2xhc3MpOwoKICByZXR1cm4gMDsKfQoKZXh0ZXJuICJDIiBWSVNJQkxFIHZvaWQKanNfbGluZV9leHBvcnQoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtKSB7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIkxpbmUiKTsKfQoKdm9pZApqc19saW5lX2NvbnN0cnVjdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlIHBhcmVudCwgY29uc3QgY2hhciogbmFtZSkgewogIGlmKEpTX0lzVW5kZWZpbmVkKGxpbmVfY2xhc3MpKQogICAganNfbGluZV9pbml0KGN0eCwgMCk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcGFyZW50LCBuYW1lID8gbmFtZSA6ICJMaW5lIiwgbGluZV9jbGFzcyk7Cn0KCiNpZmRlZiBKU19MSU5FX01PRFVMRQojZGVmaW5lIEpTX0lOSVRfTU9EVUxFIC8qVklTSUJMRSovIGpzX2luaXRfbW9kdWxlCiNlbHNlCiNkZWZpbmUgSlNfSU5JVF9NT0RVTEUgLypWSVNJQkxFKi8ganNfaW5pdF9tb2R1bGVfbGluZQojZW5kaWYKCkpTTW9kdWxlRGVmKgpKU19JTklUX01PRFVMRShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbW9kdWxlX25hbWUpIHsKICBKU01vZHVsZURlZiogbTsKICBtID0gSlNfTmV3Q01vZHVsZShjdHgsIG1vZHVsZV9uYW1lLCAmanNfbGluZV9pbml0KTsKICBpZighbSkKICAgIHJldHVybiBOVUxMOwogIGpzX2xpbmVfZXhwb3J0KGN0eCwgbSk7CiAgcmV0dXJuIG07Cn0KfQAAAAAAAAAAUDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjiYAAAAAAACOJgAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAjiYAAAAAAACOJgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "#include \"jsbindings.hpp\"\n#include \"js_cv.hpp\"\n#include \"js_mat.hpp\"\n#include \"js_size.hpp\"\n#include \"js_point.hpp\"\n#include \"js_rect.hpp\"\n#include \"js_array.hpp\"\n#include \"js_typed_array.hpp\"\n#include \"js_alloc.hpp\"\n#include \"js_umat.hpp\"\n#include \"geometry.hpp\"\n#include \"util.hpp\"\n#include \"../quickjs/cutils.h\"\n#include <list>\n#include <map>\n#include <fstream>\n\nenum {\n  PROP_COLS = 0,\n  PROP_ROWS,\n  PROP_CHANNELS,\n  PROP_TYPE,\n  PROP_DEPTH,\n  PROP_EMPTY,\n  PROP_TOTAL,\n  PROP_SIZE,\n  PROP_CONTINUOUS,\n  PROP_SUBMATRIX,\n  PROP_STEP,\n  PROP_ELEMSIZE,\n  PROP_ELEMSIZE1\n};\nenum {\n  METHOD_COL = 0,\n  METHOD_ROW,\n  METHOD_COL_RANGE,\n  METHOD_ROW_RANGE,\n  METHOD_CLONE,\n  METHOD_ROI,\n  METHOD_RELEASE,\n  METHOD_DUP,\n  METHOD_CLEAR,\n  METHOD_RESET,\n  METHOD_RESIZE,\n  METHOD_STEP1,\n  METHOD_LOCATE_ROI,\n  METHOD_PTR\n};\nenum { MAT_EXPR_AND = 0, MAT_EXPR_OR, MAT_EXPR_XOR, MAT_EXPR_MUL };\nenum { MAT_ITERATOR_KEYS, MAT_ITERATOR_VALUES, MAT_ITERATOR_ENTRIES };\nextern \"C\" {\nJSValue mat_proto = JS_UNDEFINED, mat_class = JS_UNDEFINED, mat_iterator_proto = JS_UNDEFINED,\n        mat_iterator_class = JS_UNDEFINED;\nJSClassID js_mat_class_id = 0, js_mat_iterator_class_id = 0;\n\nJSValue umat_proto = JS_UNDEFINED, umat_class = JS_UNDEFINED;\nJSClassID js_umat_class_id = 0;\n\ntypedef struct JSMatIteratorData {\n  JSValue obj, buf;\n  uint32_t row, col;\n  int magic;\n  TypedArrayType type;\n} JSMatIteratorData;\n\nstatic void\njs_mat_free_func(JSRuntime* rt, void* opaque, void* ptr) {\n  static_cast<JSMatData*>(opaque)->release();\n}\n}\n\nstatic std::vector<JSMatData*> mat_list;\nstatic std::list<JSMatData*> mat_freed;\n\nstatic inline std::vector<int>\njs_mat_sizes(const JSMatData& mat) {\n  const cv::MatSize size(mat.size);\n  std::vector<int> sizes;\n  if(mat.dims == 2) {\n    sizes.push_back(mat.rows);\n    sizes.push_back(mat.cols);\n  } else {\n    std::copy(&size[0], &size[size.dims()], std::back_inserter(sizes));\n  }\n  return sizes;\n}\n\nstatic inline std::vector<std::string>\njs_mat_dimensions(const JSMatData& mat) {\n  std::vector<int> sizes = js_mat_sizes(mat);\n  std::vector<std::string> dimensions;\n\n  std::transform(sizes.cbegin(),\n                 sizes.cend(),\n                 std::back_inserter(dimensions),\n                 static_cast<std::string (*)(int)>(&std::to_string));\n  return dimensions;\n}\n\nstatic inline JSMatData*\njs_mat_track(JSContext* ctx, JSMatData* s) {\n  std::vector<cv::Mat*> deallocate;\n\n  for(;;) {\n    auto it2 = std::find(mat_freed.cbegin(), mat_freed.cend(), s);\n    if(it2 != mat_freed.cend()) {\n      deallocate.push_back(s);\n\n      // std::cerr << \"allocated @\" << static_cast<void*>(s) << \" which is in free list\" <<\n      // std::endl;\n\n      // mat_freed.erase(it2);\n      s = js_allocate<cv::Mat>(ctx);\n      memcpy(s, deallocate[deallocate.size() - 1], sizeof(JSMatData));\n\n    } else {\n      break;\n    }\n  }\n\n  mat_list.push_back(s);\n\n  for(const auto& ptr : deallocate) js_deallocate(ctx, ptr);\n  return s;\n}\n\nVISIBLE JSValue\njs_mat_new(JSContext* ctx, uint32_t rows, uint32_t cols, int type) {\n  JSValue ret;\n  JSMatData* s;\n  if(JS_IsUndefined(mat_proto))\n    js_mat_init(ctx, NULL);\n  ret = JS_NewObjectProtoClass(ctx, mat_proto, js_mat_class_id);\n  s = js_mat_track(ctx, js_allocate<cv::Mat>(ctx));\n  if(cols || rows || type) {\n    new(s) cv::Mat(rows, cols, type);\n  } else {\n    new(s) cv::Mat();\n  }\n#ifdef DEBUG_MAT\n  std::cerr << ((cols > 0 || rows > 0) ? \"js_mat_new (h,w)\" : \"js_mat_new      \");\n  js_mat_dump(s);\n  std::cerr << std::endl;\n#endif\n  JS_SetOpaque(ret, s);\n  return ret;\n}\n\nVISIBLE JSValue\njs_mat_wrap(JSContext* ctx, const cv::Mat& mat) {\n  JSValue ret;\n  JSMatData* s;\n  ret = JS_NewObjectProtoClass(ctx, mat_proto, js_mat_class_id);\n\n  s = js_mat_track(ctx, js_allocate<cv::Mat>(ctx));\n  new(s) cv::Mat();\n  *s = mat;\n#ifdef DEBUG_MAT\n  std::cerr << \"js_mat_wrap     \";\n  auto posList = std::find(mat_list.cbegin(), mat_list.cend(), const_cast<JSMatData*>(&mat));\n  bool inList;\n  if((inList = posList != mat_list.cend())) {\n    std::cerr << \"arg[\" << (posList - mat_list.cbegin()) << \"]=\" << static_cast<const void*>(&mat);\n    std::cerr << \", inList(arg)=\" << (inList ? \"true\" : \"false\");\n  } else {\n    std::cerr << \"arg=\" << static_cast<const void*>(&mat);\n  }\n  js_mat_dump(s);\n  std::cerr << std::endl;\n#endif\n\n  JS_SetOpaque(ret, s);\n  return ret;\n}\n\n#ifdef DEBUG_MAT\nstatic inline std::map<void*, std::vector<JSMatData*>>\njs_mat_data(void* data = nullptr) {\n  std::map<void*, std::vector<JSMatData*>> ret;\n  for(auto mat : mat_list) {\n    const auto u = mat->u;\n    if(u != nullptr && (data == nullptr || u == data)) {\n      void* data = u;\n      if(ret.find(data) == ret.end()) {\n        std::vector<JSMatData*> v{mat};\n        ret.insert({data, v});\n      } else {\n        ret[data].push_back(mat);\n      }\n    }\n  }\n  return ret;\n}\n\nstatic inline void\njs_mat_print_data(const std::map<void*, std::vector<JSMatData*>>& data, size_t minSize = 1) {\n\n  for(const auto& [key, value] : data) {\n\n    if(value.size() >= minSize) {\n      std::cerr << \"data @\" << key << \" =\";\n\n      for(const auto& ptr : value) {\n        size_t refcount = ptr->u ? ptr->u->refcount : 0;\n        std::cerr << \" mat @\" << static_cast<void*>(ptr);\n        if(refcount > 1)\n          std::cerr << \" (refcount=\" << refcount << \")\";\n      }\n      std::cerr << std::endl;\n    }\n  }\n}\n\nstatic inline void\njs_mat_dump(JSMatData* const s) {\n  auto posList = std::find(mat_list.cbegin(), mat_list.cend(), s);\n  bool inList = posList != mat_list.cend();\n  bool inFreed = std::find(mat_freed.cbegin(), mat_freed.cend(), s) != mat_freed.cend();\n  const auto u = s->u;\n  std::cerr << \" mat\"\n            << \"[\" << (posList - mat_list.cbegin()) << \"]=\" << static_cast<void*>(s);\n\n  if(inList)\n    std::cerr << \", inList=\" << (inList ? \"true\" : \"false\");\n  if(inFreed)\n    std::cerr << \", inFreed=\" << (inFreed ? \"true\" : \"false\");\n\n  if(s->rows || s->cols || s->channels() > 1 || s->depth() > 0) {\n    std::cerr << \", rows=\" << s->rows;\n    std::cerr << \", cols=\" << s->cols;\n    std::cerr << \", channels=\" << s->channels();\n    std::cerr << \", depth=\" << s->depth();\n  }\n\n  if(u != nullptr) {\n\n    // if(u->refcount)\n    std::cerr << \", refcount=\" << u->refcount;\n    if(u->data)\n      std::cerr << \", data=\" << static_cast<void*>(u->data);\n    if(u->size)\n      std::cerr << \", size=\" << u->size;\n  }\n}\n#endif\n\nstatic std::pair<JSSizeData<uint32_t>, int>\njs_mat_params(JSContext* ctx, int argc, JSValueConst* argv) {\n  JSSizeData<uint32_t> size;\n  int32_t type = 0;\n  if(argc > 0) {\n    if(js_size_read(ctx, argv[0], &size)) {\n      argv++;\n      argc--;\n    } else {\n      JS_ToUint32(ctx, &size.height, argv[0]);\n      JS_ToUint32(ctx, &size.width, argv[1]);\n      argv += 2;\n      argc -= 2;\n    }\n    if(argc > 0) {\n      if(!JS_ToInt32(ctx, &type, argv[0])) {\n        argv++;\n        argc--;\n      }\n    }\n  }\n  return std::make_pair(size, type);\n}\n\nstatic JSValue\njs_mat_ctor(JSContext* ctx, JSValueConst new_target, int argc, JSValueConst* argv) {\n\n  const auto& [size, type] = js_mat_params(ctx, argc, argv);\n\n  return js_mat_new(ctx, size.height, size.width, type);\n}\n\nstatic JSValue\njs_mat_funcs(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv, int magic) {\n  JSValue ret = JS_UNDEFINED;\n  int64_t i = -1, i2 = -1;\n  JSPointData<double> pt;\n  JSMatData* m = js_mat_data(ctx, this_val);\n\n  if(argc > 0) {\n    JS_ToInt64(ctx, &i, argv[0]);\n    pt = js_point_get(ctx, argv[0]);\n    if(argc > 1) {\n      JS_ToInt64(ctx, &i2, argv[1]);\n    }\n  }\n\n  switch(magic) {\n    case METHOD_COL: {\n      ret = js_mat_wrap(ctx, m->col(i));\n      break;\n    }\n    case METHOD_ROW: {\n      ret = js_mat_wrap(ctx, m->row(i));\n      break;\n    }\n    case METHOD_COL_RANGE: {\n      ret = js_mat_wrap(ctx, m->colRange(i, i2));\n      break;\n    }\n    case METHOD_ROW_RANGE: {\n      ret = js_mat_wrap(ctx, m->rowRange(i, i2));\n      break;\n    }\n    case METHOD_CLONE: {\n      ret = js_mat_wrap(ctx, m->clone());\n      break;\n    }\n    case METHOD_ROI: {\n      JSRectData<double> rect = {0, 0, 0, 0};\n\n      if(argc > 0)\n        rect = js_rect_get(ctx, argv[0]);\n\n      ret = js_mat_wrap(ctx, (*m)(rect));\n      break;\n    }\n    case METHOD_RELEASE: {\n      m->release();\n      break;\n    }\n    case METHOD_DUP: {\n      ret = js_mat_wrap(ctx, *m);\n      break;\n    }\n    case METHOD_CLEAR: {\n      *m = cv::Mat::zeros(m->rows, m->cols, m->type());\n      break;\n    }\n    case METHOD_RESET: {\n      *m = cv::Mat();\n      break;\n    }\n    case METHOD_RESIZE: {\n      uint32_t rows = 0;\n      cv::Scalar color{0, 0, 0, 0};\n\n      JS_ToUint32(ctx, &rows, argv[0]);\n      if(argc > 1) {\n        js_color_read(ctx, argv[1], &color);\n        m->resize(rows, color);\n      } else {\n        m->resize(rows);\n      }\n      break;\n    }\n    case METHOD_STEP1: {\n      int32_t i = 0;\n\n      JS_ToInt32(ctx, &i, argv[0]);\n      ret = JS_NewInt64(ctx, m->step1(i));\n      break;\n    }\n    case METHOD_LOCATE_ROI: {\n      cv::Size wholeSize;\n      cv::Point ofs;\n      m->locateROI(wholeSize, ofs);\n      js_size_write(ctx, argv[0], wholeSize);\n      js_point_write(ctx, argv[0], ofs);\n      break;\n    }\n    case METHOD_PTR: {\n      uint32_t row = 0, col = 0;\n      uchar* ptr;\n      std::ostringstream os;\n      if(argc > 0)\n        JS_ToUint32(ctx, &row, argv[0]);\n      if(argc > 1)\n        JS_ToUint32(ctx, &col, argv[1]);\n      ptr = m->ptr<uchar>(row, col);\n\n      os << static_cast<void*>(ptr);\n\n      ret = js_value_from(ctx, os.str());\n      break;\n    }\n  }\n\n  return ret;\n}\n\nstatic JSValue\njs_mat_expr(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv, int magic) {\n  JSValue ret = JS_UNDEFINED;\n  JSColorData<double> color;\n  double value = 0;\n  JSMatData *input = nullptr, *output = nullptr, *other = nullptr;\n  double scale = 1.0;\n\n  if((input = js_mat_data(ctx, this_val)) == nullptr)\n    return JS_EXCEPTION;\n\n  if(argc < 1)\n    return JS_EXCEPTION;\n\n  if(JS_IsNumber(argv[0])) {\n    JS_ToFloat64(ctx, &value, argv[0]);\n\n  } else if((other = js_mat_data_nothrow(argv[0])) == nullptr)\n    js_color_read(ctx, argv[0], &color);\n\n  if(magic == 3 && argc > 1) {\n    JS_ToFloat64(ctx, &scale, argv[1]);\n    argv++;\n    argc--;\n  }\n\n  if(argc > 1)\n    output = js_mat_data(ctx, argv[1]);\n\n  if(output == nullptr)\n    output = input;\n\n  {\n    cv::MatExpr expr;\n    cv::Mat tmp(input->rows, input->cols, input->type());\n\n    if(other == nullptr) {\n      cv::Mat& mat = *input;\n\n      if(mat.channels() == 1) {\n\n        if(mat.depth() == 0) {\n          switch(magic) {\n            case MAT_EXPR_AND: mat &= (uchar)value; break;\n            case MAT_EXPR_OR: cv::bitwise_or(mat, cv::Scalar(value, value, value, value), mat); break;\n            case MAT_EXPR_XOR: mat ^= (uchar)value; break;\n            case MAT_EXPR_MUL: mat = mat * value; break;\n          }\n        } else {\n          switch(magic) {\n            case MAT_EXPR_AND: mat &= value; break;\n            case MAT_EXPR_OR: cv::bitwise_or(mat, cv::Scalar(value, value, value, value), mat); break;\n            case MAT_EXPR_XOR: mat ^= value; break;\n            case MAT_EXPR_MUL: mat *= value; break;\n          }\n        }\n      } else {\n        cv::Scalar& scalar = *reinterpret_cast<cv::Scalar*>(&color);\n\n        // std::cerr << \"js_mat_expr input=\" << (void*)input << \" output=\" << (void*)output << \" scalar=\" <<\n        // scalar << std::endl;\n\n        switch(magic) {\n          case MAT_EXPR_AND: expr = mat & scalar; break;\n          case MAT_EXPR_OR: expr = mat | scalar; break;\n          case MAT_EXPR_XOR: expr = mat ^ scalar; break;\n          case MAT_EXPR_MUL: expr = mat.mul(scalar, scale); break;\n        }\n        tmp = static_cast<cv::Mat>(expr);\n      }\n\n    } else {\n\n      if(input->rows != other->rows || input->cols != other->cols) {\n        ret = JS_ThrowInternalError(ctx, \"Mat dimensions mismatch\");\n      } else if(input->type() != other->type()) {\n        ret = JS_ThrowInternalError(ctx, \"Mat type mismatch\");\n      } else if(input->channels() != other->channels()) {\n        ret = JS_ThrowInternalError(ctx, \"Mat channels mismatch\");\n      } else {\n\n        if(input == output) {\n          switch(magic) {\n            case MAT_EXPR_AND: (*input) &= (*other); break;\n            case MAT_EXPR_OR: (*input) |= (*other); break;\n            case MAT_EXPR_XOR: (*input) ^= (*other); break;\n            case MAT_EXPR_MUL: (*input) *= (*other); break;\n          }\n        } else {\n          switch(magic) {\n            case MAT_EXPR_AND: (*output) = (*input) & (*other); break;\n            case MAT_EXPR_OR: (*output) = (*input) | (*other); break;\n            case MAT_EXPR_XOR: (*output) = (*input) ^ (*other); break;\n            case MAT_EXPR_MUL: (*output) = (*input) * (*other); break;\n          }\n        }\n      }\n    }\n  }\n\n  return ret;\n}\n\nstatic JSValue\njs_mat_init(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv, int magic) {\n  JSValue ret = JS_UNDEFINED;\n  JSMatData* m;\n\n  auto [size, type] = js_mat_params(ctx, argc, argv);\n\n  if((m = js_mat_data(ctx, this_val))) {\n    if(size.width == 0 || size.height == 0) {\n      if(m->rows && m->cols) {\n        size.width = m->cols;\n        size.height = m->rows;\n        type = m->type();\n      }\n    }\n    ret = JS_DupValue(ctx, this_val);\n  } else if(size.width > 0 && size.height > 0) {\n    ret = js_mat_new(ctx, size.height, size.width, type);\n\n    m = js_mat_data(ctx, ret);\n  } else {\n    return JS_EXCEPTION;\n  }\n\n  cv::Mat& mat = *m;\n\n  switch(magic) {\n    case 0: {\n      mat = cv::Mat::zeros(size, type);\n      break;\n    }\n    case 1: {\n      mat = cv::Mat::ones(size, type);\n      break;\n    }\n  }\n\n  return ret;\n}\n\ntemplate<class T>\nvoid\njs_mat_get(JSContext* ctx, JSValueConst this_val, uint32_t row, uint32_t col, T& value) {\n  cv::Mat* m = js_mat_data(ctx, this_val);\n\n  if(m)\n    value = (*m).at<T>(row, col);\n  else\n    value = T();\n}\n\nstatic JSValue\njs_mat_get(JSContext* ctx, JSValueConst this_val, uint32_t row, uint32_t col) {\n  JSValue ret = JS_EXCEPTION;\n  cv::Mat* m = js_mat_data(ctx, this_val);\n\n  if(m) {\n    uint32_t bytes = m->elemSize();\n    size_t channels = mat_channels(*m);\n    size_t offset = mat_offset(*m, row, col);\n\n    if(channels == 1) {\n      switch(m->type()) {\n\n        case CV_8UC1: {\n          uint8_t value;\n          js_mat_get(ctx, this_val, row, col, value);\n          ret = JS_NewUint32(ctx, value);\n          break;\n        }\n\n        case CV_16UC1: {\n          uint16_t value;\n          js_mat_get(ctx, this_val, row, col, value);\n          ret = JS_NewUint32(ctx, value);\n          break;\n        }\n        case CV_32SC1: {\n          int32_t value;\n          js_mat_get(ctx, this_val, row, col, value);\n          ret = JS_NewInt32(ctx, value);\n          break;\n        }\n        case CV_32FC1: {\n          float value;\n          js_mat_get(ctx, this_val, row, col, value);\n          ret = JS_NewFloat64(ctx, value);\n          break;\n        }\n        case CV_64FC1: {\n          double value;\n          js_mat_get(ctx, this_val, row, col, value);\n          ret = JS_NewFloat64(ctx, value);\n          break;\n        }\n        default: {\n          ret = JS_ThrowTypeError(ctx, \"Invalid Mat type %u\", m->type());\n          break;\n        }\n      }\n\n    } else {\n      JSValue buffer = js_arraybuffer_from(ctx, begin(*m), end(*m));\n      TypedArrayType type(*m);\n\n      ret = js_typedarray_new(ctx, buffer, offset, channels, type);\n    }\n    return ret;\n  }\n  return JS_UNDEFINED;\n}\n\nstatic int\njs_mat_get_wh(JSContext* ctx, JSMatDimensions* size, JSValueConst obj) {\n  cv::Mat* m = js_mat_data(ctx, obj);\n\n  if(m) {\n    size->rows = m->rows;\n    size->cols = m->cols;\n    return 1;\n  }\n  return 0;\n}\n\nstatic JSValue\njs_mat_at(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv) {\n  JSMatData* m = js_mat_data(ctx, this_val);\n  if(!m)\n    return JS_EXCEPTION;\n  JSPointData<double> pt;\n  JSValue ret;\n  uint32_t row = 0, col = 0;\n  if(js_point_read(ctx, argv[0], &pt)) {\n    col = pt.x;\n    row = pt.y;\n  } else if(argc >= 2 && JS_IsNumber(argv[0]) && JS_IsNumber(argv[1])) {\n    JS_ToUint32(ctx, &row, argv[0]);\n    JS_ToUint32(ctx, &col, argv[1]);\n    argc -= 2;\n    argv += 2;\n  } else if(argc >= 1 && JS_IsNumber(argv[0])) {\n    JSMatDimensions dim = {uint32_t(m->rows), uint32_t(m->cols)};\n    uint32_t idx;\n\n    JS_ToUint32(ctx, &idx, argv[0]);\n    row = idx / dim.cols;\n    col = idx % dim.cols;\n  }\n  return js_mat_get(ctx, this_val, row, col);\n}\n\nstatic JSValue\njs_mat_set(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv) {\n  cv::Mat* m = js_mat_data(ctx, this_val);\n  uint32_t bytes;\n  if(!m)\n    return JS_EXCEPTION;\n\n  JSPointData<double> pt;\n  JSValue ret;\n  int32_t col = -1, row = -1;\n\n  if(js_point_read(ctx, argv[0], &pt)) {\n    col = pt.x;\n    row = pt.y;\n    argc--;\n    argv++;\n  } else {\n    if(argc >= 1) {\n      JS_ToInt32(ctx, &row, argv[0]);\n      argc--;\n      argv++;\n    }\n    if(argc >= 1) {\n      JS_ToInt32(ctx, &col, argv[0]);\n      argc--;\n      argv++;\n    }\n  }\n  bytes = m->elemSize();\n  if(m->type() == CV_32FC1) {\n    double data;\n    if(JS_ToFloat64(ctx, &data, argv[0]))\n      return JS_EXCEPTION;\n    (*m).at<float>(row, col) = (float)data;\n  } else if(bytes <= sizeof(uint)) {\n    uint32_t mask = (1LU << (bytes * 8)) - 1;\n    uint32_t data;\n    if(JS_ToUint32(ctx, &data, argv[0]))\n      return JS_EXCEPTION;\n\n    if(bytes <= 1) {\n      uint8_t* p = &(*m).at<uint8_t>(row, col);\n      *p = (uint8_t)data & mask;\n    } else if(bytes <= 2) {\n      uint16_t* p = &(*m).at<uint16_t>(row, col);\n      *p = (uint16_t)data & mask;\n\n    } else if(bytes <= 4) {\n      uint* p = &(*m).at<uint>(row, col);\n      *p = (uint)data & mask;\n    }\n\n  } else\n    return JS_UNDEFINED;\n  return JS_UNDEFINED;\n}\n/*\ntemplate<class T>\ntypename std::enable_if<std::is_integral<T>::value, void>::type\njs_mat_vector_get(JSContext* ctx, int argc, JSValueConst* argv, std::vector<T>& output,\nstd::vector<bool>& defined) { output.resize(static_cast<size_t>(argc));\n  defined.resize(static_cast<size_t>(argc));\n  for(int i = 0; i < argc; i++) {\n    uint32_t val = 0;\n    bool isDef = JS_IsNumber(argv[i]) && !JS_ToUint32(ctx, &val, argv[i]);\n\n    output[i] = val;\n    defined[i] = isDef;\n  }\n}\n\ntemplate<class T>\ntypename std::enable_if<std::is_floating_point<T>::value, void>::type\njs_mat_vector_get(JSContext* ctx, int argc, JSValueConst* argv, std::vector<T>& output,\nstd::vector<bool>& defined) { output.resize(static_cast<size_t>(argc));\n  defined.resize(static_cast<size_t>(argc));\n  for(int i = 0; i < argc; i++) {\n    double val = 0;\n    bool isDef = JS_IsNumber(argv[i]) && !JS_ToFloat64(ctx, &val, argv[i]);\n\n    output[i] = val;\n    defined[i] = isDef;\n  }\n}\n\ntemplate<class T>\ntypename std::enable_if<std::is_integral<typename T::value_type>::value, void>::type\njs_mat_vector_get(JSContext* ctx, int argc, JSValueConst* argv, std::vector<T>& output,\nstd::vector<bool>& defined) { const size_t bits = (sizeof(typename T::value_type) * 8); const size_t\nn = T::channels; output.resize(static_cast<size_t>(argc));\n  defined.resize(static_cast<size_t>(argc));\n  for(int i = 0; i < argc; i++) {\n    double val = 0;\n    bool isDef = JS_IsNumber(argv[i]) && !JS_ToFloat64(ctx, &val, argv[i]);\n    if(isDef) {\n      const uint64_t mask = (1U << bits) - 1;\n      uint64_t ival = val;\n      for(int j = 0; j < n; j++) {\n        output[i][j] = ival & mask;\n        ival >>= bits;\n      }\n    }\n    defined[i] = isDef;\n  }\n};\n*/\n/*\ntemplate<class T>\nstatic std::vector<T>\njs_mat_set_vector(JSContext* ctx, JSMatData* m, int argc, JSValueConst* argv) {\n  JSMatDimensions dim = {static_cast<uint32_t>(m->rows), static_cast<uint32_t>(m->cols)};\n  uint32_t idx;\n  std::vector<bool> defined;\n  std::vector<T> v;\n  js_mat_vector_get(ctx, argc, argv, v, defined);\n\n  for(idx = 0; idx < v.size(); idx++)\n    if(defined[idx])\n      m->at<T>(idx / dim.cols, idx % dim.cols) = v[idx];\n  return v;\n}\n*/\nstatic JSValue\njs_mat_set_to(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv) {\n  JSMatData* m = js_mat_data(ctx, this_val);\n  uint32_t bytes;\n  std::vector<bool> defined;\n\n  if(!m)\n    return JS_EXCEPTION;\n\n  if(m->channels() == 1) {\n    double value;\n    js_value_to(ctx, argv[0], value);\n    m->setTo(cv::Scalar(value));\n\n  } else if(js_is_array(ctx, argv[0])) {\n    cv::Scalar s;\n    size_t n = js_array_to(ctx, argv[0], s);\n\n    // std::cerr << \"Scalar [ \" << s[0] << \", \" << s[1] << \", \" << s[2] << \", \" << s[3] << \" ]\" <<\n    // std::endl; std::cerr << \"Scalar.size() = \" << n << std::endl;\n\n    if(n >= m->channels()) {\n      m->setTo(s);\n      return JS_UNDEFINED;\n    }\n  }\n\n  bytes = m->elemSize();\n  /*  if(m->depth() == CV_16U && m->channels() > 1) {\n      if(m->channels() == 2)\n        js_mat_set_vector<cv::Vec<uint16_t, 2>>(ctx, m, argc, argv);\n      else if(m->channels() == 3)\n        js_mat_set_vector<cv::Vec<uint16_t, 3>>(ctx, m, argc, argv);\n      else if(m->channels() == 4)\n        js_mat_set_vector<cv::Vec<uint16_t, 4>>(ctx, m, argc, argv);\n    } else if(m->depth() == CV_32F) {\n      if(m->channels() == 1)\n        js_mat_set_vector<float>(ctx, m, argc, argv);\n    } else if(bytes <= sizeof(uint)) {\n      if(bytes <= 1) {\n        std::vector<uint8_t> v;\n        js_mat_vector_get(ctx, argc, argv, v, defined);\n        m->setTo(cv::InputArray(v), defined);\n      } else if(bytes <= 2) {\n        std::vector<uint16_t> v;\n        js_mat_vector_get(ctx, argc, argv, v, defined);\n        m->setTo(cv::InputArray(v), defined);\n      } else if(bytes <= 4) {\n\n        js_mat_set_vector<uint32_t>(ctx, m, argc, argv);\n      } else if(bytes <= 8) {\n        js_mat_set_vector<uint64_t>(ctx, m, argc, argv);\n      }\n    }*/\n\n  return JS_UNDEFINED;\n}\n\nstatic JSValue\njs_mat_get_props(JSContext* ctx, JSValueConst this_val, int magic) {\n  cv::Mat* m;\n  JSValue ret = JS_UNDEFINED;\n\n  if(!(m = js_mat_data(ctx, this_val)))\n    return JS_EXCEPTION;\n\n  if(m->empty())\n    return JS_NULL;\n\n  switch(magic) {\n    case PROP_COLS: {\n      ret = JS_NewUint32(ctx, m->cols);\n      break;\n    }\n    case PROP_ROWS: {\n      ret = JS_NewUint32(ctx, m->rows);\n      break;\n    }\n    case PROP_CHANNELS: {\n      ret = JS_NewUint32(ctx, m->channels());\n      break;\n    }\n    case PROP_TYPE: {\n      ret = JS_NewUint32(ctx, m->type());\n      break;\n    }\n    case PROP_DEPTH: {\n      ret = JS_NewUint32(ctx, m->depth());\n      break;\n    }\n    case PROP_EMPTY: {\n      ret = JS_NewBool(ctx, m->empty());\n      break;\n    }\n    case PROP_TOTAL: {\n      ret = JS_NewFloat64(ctx, m->total());\n      break;\n    }\n    case PROP_SIZE: {\n      ret = js_size_new(ctx, m->cols, m->rows);\n      break;\n    }\n    case PROP_CONTINUOUS: {\n      ret = JS_NewBool(ctx, m->isContinuous());\n      break;\n    }\n    case PROP_SUBMATRIX: {\n      ret = JS_NewBool(ctx, m->isSubmatrix());\n      break;\n    }\n    case PROP_STEP: {\n      ret = JS_NewUint32(ctx, m->step);\n      break;\n    }\n    case PROP_ELEMSIZE: {\n      ret = JS_NewUint32(ctx, m->elemSize());\n      break;\n    }\n    case PROP_ELEMSIZE1: {\n      ret = JS_NewUint32(ctx, m->elemSize1());\n      break;\n    }\n  }\n\n  return ret;\n}\n\nstatic JSValue\njs_mat_tostring(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv) {\n  cv::Mat* m = js_mat_data(ctx, this_val);\n  int x, y;\n\n  std::ostringstream os;\n  std::string str;\n  int i = 0;\n  if(!m)\n    return JS_EXCEPTION;\n\n  os << \"Mat(\";\n\n  if(false && (m->rows > 0 && m->cols > 0) && m->dims == 2) {\n    os << m->rows << \", \" << m->cols;\n  } else {\n    std::vector<std::string> sizeStrs = js_mat_dimensions(*m);\n    os << \"[\" << join(sizeStrs.cbegin(), sizeStrs.cend(), \", \") << \"]\";\n  }\n\n  if(m->depth() == CV_8U || m->channels() > 1) {\n    os << \", \";\n    const char* tstr;\n    switch(m->depth() & 7) {\n      case CV_8U: tstr = \"CV_8U\"; break;\n      case CV_8S: tstr = \"CV_8S\"; break;\n      case CV_16U: tstr = \"CV_16U\"; break;\n      case CV_16S: tstr = \"CV_16S\"; break;\n      case CV_32S: tstr = \"CV_32S\"; break;\n      case CV_32F: tstr = \"CV_32F\"; break;\n      case CV_64F: tstr = \"CV_64F\"; break;\n    }\n    os << tstr << 'C' << m->channels() << \")\" /*<< std::endl*/;\n  } else {\n    os << \"Mat[\";\n    for(y = 0; y < m->rows; y++) {\n      os << \"\\n  \";\n\n      for(x = 0; x < m->cols; x++) {\n        if(x > 0)\n          os << ',';\n        if(m->type() == CV_32FC1)\n          os << m->at<float>(y, x);\n        else\n          os << std::setfill('0') << std::setbase(16) << std::setw(m->type() == CV_8UC4 ? 8 : m->type() == CV_8UC1 ? 2 : 6)\n             << m->at<uint32_t>(y, x);\n      }\n    }\n\n    os << ']' /*<< std::endl*/;\n  }\n  os << ' ';\n  os << (void*)m->elemSize();\n  os << \"x\";\n  os << (void*)m->total();\n  os << \" @\";\n  os << (void*)m->ptr();\n\n  str = os.str();\n\n  return JS_NewStringLen(ctx, str.data(), str.size());\n}\n\nstatic JSValue\njs_mat_inspect(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv) {\n  JSMatData* mat = js_mat_data(ctx, this_val);\n  JSValue obj = JS_NewObjectProto(ctx, mat_proto);\n\n  JS_DefinePropertyValueStr(ctx, obj, \"cols\", JS_NewUint32(ctx, mat->cols), JS_PROP_ENUMERABLE);\n  JS_DefinePropertyValueStr(ctx, obj, \"rows\", JS_NewUint32(ctx, mat->rows), JS_PROP_ENUMERABLE);\n  JS_DefinePropertyValueStr(ctx, obj, \"depth\", JS_NewUint32(ctx, mat->depth()), JS_PROP_ENUMERABLE);\n  JS_DefinePropertyValueStr(ctx, obj, \"channels\", JS_NewUint32(ctx, mat->channels()), JS_PROP_ENUMERABLE);\n  return obj;\n}\n\nstatic JSValue\njs_mat_getrotationmatrix2d(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv) {\n  JSPointData<double> s;\n\n  double angle = 0, scale = 1;\n  cv::Mat m;\n\n  JSValue ret;\n  if(argc == 0)\n    return JS_EXCEPTION;\n  if(argc > 0) {\n    s = js_point_get(ctx, argv[0]);\n    if(argc > 1) {\n      JS_ToFloat64(ctx, &angle, argv[1]);\n      if(argc > 2) {\n        JS_ToFloat64(ctx, &scale, argv[2]);\n      }\n    }\n  }\n\n  m = cv::getRotationMatrix2D(s, angle, scale);\n\n  ret = js_mat_wrap(ctx, m);\n  return ret;\n}\n\nstatic JSValue\njs_mat_convert_to(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv) {\n  JSMatData *m, *output;\n  int32_t rtype;\n  double alpha = 1, beta = 0;\n\n  m = js_mat_data(ctx, this_val);\n  output = js_mat_data(ctx, argv[0]);\n\n  if(m == nullptr || output == nullptr)\n    return JS_EXCEPTION;\n\n  JS_ToInt32(ctx, &rtype, argv[1]);\n\n  if(argc >= 3)\n    JS_ToFloat64(ctx, &alpha, argv[2]);\n\n  if(argc >= 4)\n    JS_ToFloat64(ctx, &beta, argv[3]);\n\n  m->convertTo(*output, rtype, alpha, beta);\n\n  return JS_UNDEFINED;\n}\n\nstatic JSValue\njs_mat_copy_to(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv) {\n  JSMatData* m;\n  JSOutputArray output;\n  JSInputArray /*output,*/ mask = cv::noArray();\n\n  m = js_mat_data(ctx, this_val);\n\n  output = js_umat_or_mat(ctx, argv[0]);\n  // output = js_umat_or_mat(ctx, argv[0]);\n\n  if(js_is_noarray(output))\n    return JS_ThrowInternalError(ctx, \"argument 1 not an array!\");\n\n  if(argc > 1)\n    mask = js_umat_or_mat(ctx, argv[1]);\n\n  try {\n    if(!js_is_noarray(mask))\n      m->copyTo(output, mask);\n    else\n      m->copyTo(output);\n  } catch(const cv::Exception& e) { return JS_ThrowInternalError(ctx, \"cv::Exception what='%s'\", e.what()); }\n    \n  return JS_UNDEFINED;\n}\n\nstatic JSValue\njs_mat_reshape(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv) {\n  JSMatData *m, mat;\n  int32_t cn, rows = 0;\n  JSValue ret = JS_EXCEPTION;\n\n  m = js_mat_data(ctx, this_val);\n\n  if(m == nullptr || argc < 1)\n    return ret;\n\n  if(argc >= 1 && JS_IsNumber(argv[0])) {\n    JS_ToInt32(ctx, &cn, argv[0]);\n    argv++;\n    argc--;\n  } else {\n    cn = m->channels();\n  }\n\n  if(argc >= 1) {\n    std::vector<int> newshape;\n    if(js_is_array(ctx, argv[0])) {\n      js_array_to(ctx, argv[0], newshape);\n      if(argc >= 2 && JS_IsNumber(argv[1])) {\n        uint32_t ndims;\n        JS_ToUint32(ctx, &ndims, argv[1]);\n        if(ndims > newshape.size())\n          return JS_EXCEPTION;\n        mat = m->reshape(cn, ndims, &newshape[0]);\n      } else {\n        mat = m->reshape(cn, newshape);\n      }\n    } else if(JS_IsNumber(argv[0])) {\n      JS_ToInt32(ctx, &rows, argv[0]);\n      mat = m->reshape(cn, rows);\n    }\n    ret = js_mat_wrap(ctx, mat);\n  }\n\n  return ret;\n}\n\nstatic JSValue\njs_mat_getumat(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv) {\n  JSMatData* m;\n  JSUMatData umat;\n  int32_t accessFlags, usageFlags = cv::USAGE_DEFAULT;\n  JSValue ret = JS_EXCEPTION;\n\n  m = js_mat_data(ctx, this_val);\n\n  if(m == nullptr || argc < 1)\n    return ret;\n\n  if(js_umat_class_id == 0)\n    return JS_NULL;\n\n  JS_ToInt32(ctx, &accessFlags, argv[0]);\n\n  if(argc > 1)\n    JS_ToInt32(ctx, &usageFlags, argv[1]);\n\n  umat = m->getUMat(cv::AccessFlag(accessFlags), cv::UMatUsageFlags(usageFlags));\n\n  return js_umat_wrap(ctx, umat);\n}\n\nstatic JSValue\njs_mat_class_func(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv, int magic) {\n  JSValueConst *v = argv, *e = &argv[argc];\n  JSMatData result;\n  JSMatData *prev = nullptr, *mat = nullptr;\n\n  while(v < e) {\n    JSValueConst arg = *v++;\n\n    if(nullptr == (mat = js_mat_data(ctx, arg)))\n      return JS_EXCEPTION;\n\n    if(prev) {\n      JSMatData const &a = *prev, &b = *mat;\n      switch(magic) {\n        case 0: result = a + b; break;\n        case 1: result = a - b; break;\n        case 2: result = a * b; break;\n        case 3: result = a / b; break;\n        case 4: result = a & b; break;\n        case 5: result = a | b; break;\n        case 6: result = a ^ b; break;\n      }\n      prev = &result;\n    } else {\n      prev = mat;\n      result = cv::Mat::zeros(mat->rows, mat->cols, mat->type());\n      mat->copyTo(result);\n    }\n  }\n\n  return js_mat_wrap(ctx, result);\n}\n\nstatic JSValue\njs_mat_fill(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv, int magic) {\n  JSMatData* m;\n\n  m = js_mat_data(ctx, this_val);\n\n  if(m == nullptr)\n    return JS_EXCEPTION;\n\n  if(m->empty() || m->rows == 0 || m->cols == 0)\n    return JS_EXCEPTION;\n\n  cv::Mat& mat = *m;\n\n  switch(magic) {\n    case 0: {\n      mat = cv::Mat::zeros(mat.rows, mat.cols, mat.type());\n      break;\n    }\n    case 1: {\n      mat = cv::Mat::ones(mat.rows, mat.cols, mat.type());\n      break;\n    }\n  }\n\n  return JS_DupValue(ctx, this_val);\n}\n\nstatic JSValue\njs_mat_class_create(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv, int magic) {\n  JSValue ret = JS_UNDEFINED;\n\n  const auto& [size, type] = js_mat_params(ctx, argc, argv);\n\n  if(size.width == 0 || size.height == 0)\n    return JS_EXCEPTION;\n\n  ret = js_mat_new(ctx, uint32_t(0), uint32_t(0), int(0));\n  JSMatData& mat = *js_mat_data(ctx, ret);\n\n  switch(magic) {\n    case 0: {\n      mat = cv::Scalar::all(0);\n      break;\n    }\n    case 1: {\n      mat = cv::Scalar::all(1);\n      break;\n    }\n  }\n\n  return ret;\n}\n\n/*static JSValue\njs_mat_create_vec(JSContext* ctx, int len, JSValue* vec) {\n  JSValue obj = JS_EXCEPTION;\n  int i;\n\n  obj = JS_NewArray(ctx);\n  if(!JS_IsException(obj)) {\n\n    for(i = 0; i < len; i++) {\n\n      if(JS_SetPropertyUint32(ctx, obj, i, vec[i]) < 0) {\n        JS_FreeValue(ctx, obj);\n        return JS_EXCEPTION;\n      }\n    }\n  }\n  return obj;\n}*/\n\nstatic JSValue\njs_mat_buffer(JSContext* ctx, JSValueConst this_val) {\n  JSMatData* m;\n  JSValue buf;\n  /*  buf = JS_GetPropertyStr(ctx, this_val, \"arrayBuffer\");\n\n    if(JS_IsObject(buf))\n      return buf;*/\n\n  if((m = js_mat_data(ctx, this_val))) {\n    JSValue buf;\n    size_t byte_size;\n    m->addref();\n    // m->addref();\n    byte_size = mat_bytesize(*m);\n\n    if(byte_size == 0)\n      byte_size = end(*m) - begin(*m);\n    if(byte_size == 0)\n      byte_size = m->elemSize() * m->total();\n    assert(byte_size);\n    buf = js_arraybuffer_from(\n        ctx, mat_ptr(*m), mat_ptr(*m) + byte_size, *(JSFreeArrayBufferDataFunc*)&js_mat_free_func, (void*)m);\n\n    //   JS_SetPropertyStr(ctx, this_val, \"arrayBuffer\", JS_DupValue(ctx, buf));\n    return buf;\n  }\n  return JS_EXCEPTION;\n}\n\nstatic JSValue\njs_mat_array(JSContext* ctx, JSValueConst this_val) {\n  JSMatData* m;\n  const char* ctor;\n\n  if((m = js_mat_data(ctx, this_val))) {\n    JSValue buffer, typed_array;\n    TypedArrayType type(*m);\n    buffer = js_mat_buffer(ctx, this_val);\n\n    std::ranges::subrange<uint8_t*> range(begin(*m), end(*m));\n\n    /*printf(\"m->rows=%i m->cols=%i m->step=%zu m->total()=%zu range.size()=%zu type.byte_size=%u\n       size=%zu\\n\", m->rows, m->cols, size_t(m->step), range.size() / type.byte_size, range.size(),\n           type.byte_size,\n           range.size() / type.byte_size);*/\n\n    return js_typedarray_new(ctx, buffer, 0, range.size() / type.byte_size, type);\n  }\n  return JS_EXCEPTION;\n}\n\nJSValue\njs_mat_call(JSContext* ctx, JSValueConst func_obj, JSValueConst this_val, int argc, JSValueConst* argv, int flags) {\n  cv::Rect rect = {0, 0, 0, 0};\n  JSMatData* src;\n\n  if((src = js_mat_data(ctx, func_obj)) == nullptr)\n    return JS_EXCEPTION;\n\n  if(!js_rect_read(ctx, argv[0], &rect))\n    return JS_ThrowTypeError(ctx, \"argument 1 expecting Rect\");\n  // printf(\"js_mat_call %u,%u %ux%u\\n\", rect.x, rect.y, rect.width, rect.height);\n\n  cv::Mat mat = src->operator()(rect);\n  return js_mat_wrap(ctx, mat);\n}\n\nvoid\njs_mat_finalizer(JSRuntime* rt, JSValue val) {\n  JSMatData* s;\n\n  if((s = static_cast<JSMatData*>(JS_GetOpaque(val, js_mat_class_id)))) {\n    js_deallocate(rt, s);\n  }\n  return;\n\n  /*auto it2 = std::find(mat_freed.cbegin(), mat_freed.cend(), s);\n  auto it = std::find(mat_list.cbegin(), mat_list.cend(), s);\n\n  if(it2 != mat_freed.cend()) {\n#ifdef DEBUG_MAT\n    std::cerr << \"js_mat_finalizer\";\n    js_mat_dump(s);\n#endif\n\n    std::cerr << \" ERROR: already freed\" << std::endl;\n    return;\n  }\n  JS_FreeValueRT(rt, val);\n  if(it != mat_list.cend()) {\n    size_t refcount = s->u != nullptr ? s->u->refcount : 0;\n    if(s->u) {\n      auto data = s->u;\n#ifdef DEBUG_MAT\n      std::cerr << \"cv::Mat::release\";\n      std::cerr << \" mat=\" << static_cast<void*>(s);\n      std::cerr << \", refcount=\" << refcount;\n      std::cerr << std::endl;\n#endif\n      if(refcount > 1)\n        s->release();\n      if(s->u)\n        refcount = s->u->refcount;\n      else\n        refcount = 0;\n    }\n    if(s->u == nullptr) {\n      mat_list.erase(it);\n      mat_freed.push_front(s);\n    }\n#ifdef DEBUG_MAT\n    std::cerr << \"js_mat_finalizer\";\n    js_mat_dump(s);\n    std::cerr << \", refcount=\" << refcount;\n    std::cerr << \", mat_list.size()=\" << mat_list.size();\n    std::cerr << \", mat_freed.size()=\" << mat_freed.size() << std::endl;\n#endif\n  } else {\n#ifdef DEBUG_MAT\n    std::cerr << \"js_mat_finalizer\";\n    js_mat_dump(s);\n#endif\n    std::cerr << \" ERROR: not found\" << std::endl;\n  }*/\n}\n\nJSValue\njs_mat_iterator_new(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv, int magic) {\n  JSValue enum_obj, mat;\n  JSMatData* m;\n  JSMatIteratorData* it;\n\n  if(!(m = static_cast<JSMatData*>(JS_GetOpaque(this_val, js_mat_class_id))))\n    return JS_EXCEPTION;\n\n  mat = JS_DupValue(ctx, this_val);\n  if(!JS_IsException(mat)) {\n    enum_obj = JS_NewObjectProtoClass(ctx, mat_iterator_proto, js_mat_iterator_class_id);\n    if(!JS_IsException(enum_obj)) {\n      it = js_allocate<JSMatIteratorData>(ctx);\n\n      it->obj = mat;\n      it->buf = m->empty() ? JS_UNDEFINED : js_mat_buffer(ctx, this_val);\n      it->row = 0;\n      it->col = 0;\n      it->magic = magic;\n      it->type = TypedArrayType(*m);\n\n      // printf(\"js_mat_iterator_new type=%s\\n\", it->type.constructor_name().c_str());\n\n      JS_SetOpaque(/*ctx, */ enum_obj, it);\n      return enum_obj;\n    }\n    JS_FreeValue(ctx, enum_obj);\n  }\n  JS_FreeValue(ctx, mat);\n  return JS_EXCEPTION;\n}\n\n/*typedef struct JSMatIteratorData {\n  JSValue obj, buf;\n  uint32_t row, col;\n  int magic;\n  TypedArrayType type;\n} JSMatIteratorData;\n*/\n\nvoid\njs_mat_iterator_dump(JSMatIteratorData* it) {\n  std::cout << \"MatIterator { row: \" << it->row << \", col: \" << it->col << \", magic: \" << it->magic << \", type: \" << it->type\n            << \" }\" << std::endl;\n}\n\nJSValue\njs_mat_iterator_next(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv, BOOL* pdone, int magic) {\n  JSMatIteratorData* it;\n  JSValue ret = JS_UNDEFINED;\n  *pdone = FALSE;\n  it = static_cast<JSMatIteratorData*>(JS_GetOpaque(this_val, js_mat_iterator_class_id));\n  if(it) {\n    JSMatData* m;\n    uint32_t row, col;\n    size_t offset, channels;\n    JSMatDimensions dim;\n    if((m = js_mat_data(ctx, it->obj)) == nullptr)\n      return JS_EXCEPTION;\n    dim = mat_dimensions(*m);\n\n    /*std::cout << \"mat_dimensions(*m) = \" << dim.cols << \"x\" << dim.rows << std::endl;\n    js_mat_iterator_dump(it);*/\n\n    row = it->row;\n    col = it->col;\n    if(row >= m->rows) {\n      JS_FreeValue(ctx, it->obj);\n      it->obj = JS_UNDEFINED;\n    done:\n      *pdone = TRUE;\n      return JS_UNDEFINED;\n    }\n    if(col + 1 < dim.cols) {\n      it->col = col + 1;\n    } else {\n      it->col = 0;\n      it->row = row + 1;\n    }\n    *pdone = FALSE;\n    channels = mat_channels(*m);\n    offset = mat_offset(*m, row, col);\n    switch(it->magic) {\n      case MAT_ITERATOR_KEYS: {\n        std::array<uint32_t, 2> pos = {row, col};\n        ret = js_array_from(ctx, pos);\n        break;\n      }\n      case MAT_ITERATOR_VALUES: {\n        TypedArrayType type(*m);\n\n        /*   printf(\"js_mat_iterator_next is_signed=%d\\n\", type.is_signed);\n           printf(\"js_mat_iterator_next is_floating_point=%d\\n\", type.is_floating_point);\n           printf(\"js_mat_iterator_next byte_size=%d\\n\", type.byte_size);\n           printf(\"js_mat_iterator_next channels=%d type=%d\\n\", m->channels(), m->type());\n           printf(\"js_mat_iterator_next %s\\n\", type.constructor_name().c_str());*/\n\n        if(channels == 1)\n          return js_mat_get(ctx, it->obj, row, col);\n\n        ret = js_typedarray_new(ctx, it->buf, offset, channels, type);\n        break;\n      }\n      case MAT_ITERATOR_ENTRIES: {\n        JSValue value = channels == 1 ? js_mat_get(ctx, it->obj, row, col)\n                                      : js_typedarray_new(ctx, it->buf, offset, channels, TypedArrayType(*m));\n        std::array<uint32_t, 2> pos = {row, col};\n        std::array<JSValue, 2> entry = {js_array_from(ctx, pos), value};\n        ret = js_array_from(ctx, entry);\n        break;\n      }\n    }\n  }\n  return ret;\n}\n\nvoid\njs_mat_iterator_finalizer(JSRuntime* rt, JSValue val) {\n  JSMatIteratorData* it = static_cast<JSMatIteratorData*>(JS_GetOpaque(val, js_mat_iterator_class_id));\n  js_deallocate(rt, it);\n}\n\nstatic JSValue\njs_mat_iterator_dup(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv) {\n  return JS_DupValue(ctx, this_val);\n}\n\nJSClassDef js_mat_class = {\n    .class_name = \"Mat\",\n    .finalizer = js_mat_finalizer,\n    .call = js_mat_call,\n};\n\nJSClassDef js_mat_iterator_class = {\n    .class_name = \"MatIterator\",\n    .finalizer = js_mat_iterator_finalizer,\n};\n\nconst JSCFunctionListEntry js_mat_proto_funcs[] = {JS_CGETSET_MAGIC_DEF(\"cols\", js_mat_get_props, NULL, PROP_COLS),\n                                                   JS_CGETSET_MAGIC_DEF(\"rows\", js_mat_get_props, NULL, PROP_ROWS),\n                                                   JS_CGETSET_MAGIC_DEF(\"channels\", js_mat_get_props, NULL, PROP_CHANNELS),\n                                                   JS_CGETSET_MAGIC_DEF(\"type\", js_mat_get_props, NULL, PROP_TYPE),\n                                                   JS_CGETSET_MAGIC_DEF(\"depth\", js_mat_get_props, NULL, PROP_DEPTH),\n                                                   JS_CGETSET_MAGIC_DEF(\"empty\", js_mat_get_props, NULL, PROP_EMPTY),\n                                                   JS_CGETSET_MAGIC_DEF(\"total\", js_mat_get_props, NULL, PROP_TOTAL),\n                                                   JS_CGETSET_MAGIC_DEF(\"size\", js_mat_get_props, NULL, PROP_SIZE),\n                                                   JS_CGETSET_MAGIC_DEF(\"continuous\", js_mat_get_props, NULL, PROP_CONTINUOUS),\n                                                   JS_CGETSET_MAGIC_DEF(\"submatrix\", js_mat_get_props, NULL, PROP_SUBMATRIX),\n                                                   JS_CGETSET_MAGIC_DEF(\"step\", js_mat_get_props, NULL, PROP_STEP),\n                                                   JS_CGETSET_MAGIC_DEF(\"elemSize\", js_mat_get_props, NULL, PROP_ELEMSIZE),\n                                                   JS_CGETSET_MAGIC_DEF(\"elemSize1\", js_mat_get_props, NULL, PROP_ELEMSIZE1),\n                                                   JS_CGETSET_DEF(\"buffer\", js_mat_buffer, NULL),\n                                                   JS_CGETSET_DEF(\"array\", js_mat_array, NULL),\n                                                   JS_CFUNC_MAGIC_DEF(\"col\", 1, js_mat_funcs, METHOD_COL),\n                                                   JS_CFUNC_MAGIC_DEF(\"row\", 1, js_mat_funcs, METHOD_ROW),\n                                                   JS_CFUNC_MAGIC_DEF(\"colRange\", 2, js_mat_funcs, METHOD_COL_RANGE),\n                                                   JS_CFUNC_MAGIC_DEF(\"rowRange\", 2, js_mat_funcs, METHOD_ROW_RANGE),\n                                                   JS_CFUNC_MAGIC_DEF(\"clone\", 0, js_mat_funcs, METHOD_CLONE),\n                                                   JS_CFUNC_MAGIC_DEF(\"roi\", 0, js_mat_funcs, METHOD_ROI),\n                                                   JS_CFUNC_MAGIC_DEF(\"release\", 0, js_mat_funcs, METHOD_RELEASE),\n                                                   JS_CFUNC_MAGIC_DEF(\"dup\", 0, js_mat_funcs, METHOD_DUP),\n                                                   JS_CFUNC_MAGIC_DEF(\"clear\", 0, js_mat_funcs, METHOD_CLEAR),\n                                                   JS_CFUNC_MAGIC_DEF(\"reset\", 0, js_mat_funcs, METHOD_RESET),\n                                                   JS_CFUNC_MAGIC_DEF(\"resize\", 1, js_mat_funcs, METHOD_RESIZE),\n                                                   JS_CFUNC_MAGIC_DEF(\"step1\", 0, js_mat_funcs, METHOD_STEP1),\n                                                   JS_CFUNC_MAGIC_DEF(\"locateROI\", 0, js_mat_funcs, METHOD_LOCATE_ROI),\n                                                   JS_CFUNC_MAGIC_DEF(\"ptr\", 0, js_mat_funcs, METHOD_PTR),\n\n                                                   JS_CFUNC_MAGIC_DEF(\"and\", 2, js_mat_expr, MAT_EXPR_AND),\n                                                   JS_CFUNC_MAGIC_DEF(\"or\", 2, js_mat_expr, MAT_EXPR_OR),\n                                                   JS_CFUNC_MAGIC_DEF(\"xor\", 3, js_mat_expr, MAT_EXPR_XOR),\n                                                   JS_CFUNC_MAGIC_DEF(\"mul\", 3, js_mat_expr, MAT_EXPR_MUL),\n\n                                                   JS_CFUNC_MAGIC_DEF(\"zero\", 2, js_mat_fill, 0),\n                                                   JS_CFUNC_MAGIC_DEF(\"one\", 2, js_mat_fill, 1),\n\n                                                   JS_CFUNC_DEF(\"toString\", 0, js_mat_tostring),\n                                                   JS_CFUNC_DEF(\"at\", 1, js_mat_at),\n                                                   JS_CFUNC_DEF(\"set\", 2, js_mat_set),\n                                                   JS_CFUNC_DEF(\"setTo\", 1, js_mat_set_to),\n                                                   JS_CFUNC_DEF(\"convertTo\", 2, js_mat_convert_to),\n                                                   JS_CFUNC_DEF(\"copyTo\", 1, js_mat_copy_to),\n                                                   JS_CFUNC_DEF(\"reshape\", 1, js_mat_reshape),\n                                                   JS_CFUNC_DEF(\"getUMat\", 1, js_mat_getumat),\n                                                   JS_CFUNC_MAGIC_DEF(\"keys\", 0, js_mat_iterator_new, MAT_ITERATOR_KEYS),\n                                                   JS_CFUNC_MAGIC_DEF(\"values\", 0, js_mat_iterator_new, MAT_ITERATOR_VALUES),\n                                                   JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_mat_iterator_new, MAT_ITERATOR_ENTRIES),\n                                                   JS_ALIAS_DEF(\"[Symbol.iterator]\", \"values\"),\n                                                   JS_ALIAS_DEF(\"[Symbol.toPrimitive]\", \"toString\"),\n\n                                                   JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Mat\", JS_PROP_CONFIGURABLE)\n\n};\n\nconst JSCFunctionListEntry js_mat_iterator_proto_funcs[] = {\n    JS_ITERATOR_NEXT_DEF(\"next\", 0, js_mat_iterator_next, 0),\n    JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MatIterator\", JS_PROP_CONFIGURABLE),\n    JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, js_mat_iterator_dup),\n\n};\n\nconst JSCFunctionListEntry js_mat_static_funcs[] = {\n    JS_CFUNC_DEF(\"getRotationMatrix2D\", 3, js_mat_getrotationmatrix2d),\n    JS_CFUNC_MAGIC_DEF(\"add\", 2, js_mat_class_func, 0),\n    JS_CFUNC_MAGIC_DEF(\"sub\", 2, js_mat_class_func, 1),\n    JS_CFUNC_MAGIC_DEF(\"mul\", 2, js_mat_class_func, 2),\n    JS_CFUNC_MAGIC_DEF(\"div\", 2, js_mat_class_func, 3),\n    JS_CFUNC_MAGIC_DEF(\"and\", 2, js_mat_class_func, 4),\n    JS_CFUNC_MAGIC_DEF(\"or\", 2, js_mat_class_func, 5),\n    JS_CFUNC_MAGIC_DEF(\"xor\", 3, js_mat_class_func, 6),\n    JS_CFUNC_MAGIC_DEF(\"zeros\", 1, js_mat_class_create, 0),\n    JS_CFUNC_MAGIC_DEF(\"ones\", 1, js_mat_class_create, 1),\n    JS_PROP_INT32_DEF(\"CV_8U\", CV_MAKETYPE(CV_8U, 1), JS_PROP_ENUMERABLE),\n};\n\nint\njs_mat_init(JSContext* ctx, JSModuleDef* m) {\n  if(js_mat_class_id == 0) {\n    /* create the Mat class */\n    JS_NewClassID(&js_mat_class_id);\n    JS_NewClassID(&js_mat_iterator_class_id);\n    JS_NewClass(JS_GetRuntime(ctx), js_mat_class_id, &js_mat_class);\n    JS_NewClass(JS_GetRuntime(ctx), js_mat_iterator_class_id, &js_mat_iterator_class);\n\n    mat_proto = JS_NewObject(ctx);\n    JS_SetPropertyFunctionList(ctx, mat_proto, js_mat_proto_funcs, countof(js_mat_proto_funcs));\n    JS_SetClassProto(ctx, js_mat_class_id, mat_proto);\n\n    mat_iterator_proto = JS_NewObject(ctx);\n    JS_SetPropertyFunctionList(ctx, mat_iterator_proto, js_mat_iterator_proto_funcs, countof(js_mat_iterator_proto_funcs));\n    JS_SetClassProto(ctx, js_mat_iterator_class_id, mat_iterator_proto);\n\n    mat_class = JS_NewCFunction2(ctx, js_mat_ctor, \"Mat\", 2, JS_CFUNC_constructor, 0);\n    /* set proto.constructor and ctor.prototype */\n    JS_SetConstructor(ctx, mat_class, mat_proto);\n\n    JS_SetPropertyFunctionList(ctx, mat_class, js_mat_static_funcs, countof(js_mat_static_funcs));\n\n    js_set_inspect_method(ctx, mat_proto, js_mat_inspect);\n    /*   JSValue g = JS_GetGlobalObject(ctx);\n       int32array_ctor = JS_GetProperty(ctx, g, JS_ATOM_Int32Array);\n       int32array_proto = JS_GetPrototype(ctx, int32array_ctor);\n\n       JS_FreeValue(ctx, g);*/\n  }\n\n  if(m)\n    JS_SetModuleExport(ctx, m, \"Mat\", mat_class);\n  return 0;\n}\n\nextern \"C\" VISIBLE void\njs_mat_export(JSContext* ctx, JSModuleDef* m) {\n  JS_AddModuleExport(ctx, m, \"Mat\");\n}\n\n#if defined(JS_MAT_MODULE)\n#define JS_INIT_MODULE VISIBLE js_init_module\n#else\n#define JS_INIT_MODULE js_init_module_mat\n#endif\n\nextern \"C\" JSModuleDef*\nJS_INIT_MODULE(JSContext* ctx, const char* module_name) {\n  JSModuleDef* m;\n  m = JS_NewCModule(ctx, module_name, &js_mat_init);\n  if(!m)\n    return NULL;\n  js_mat_export(ctx, m);\n  return m;\n}\n",
			"file": "js_mat.cpp",
			"file_size": 46998,
			"file_write_time": 132653242556048378,
			"settings":
			{
				"buffer_size": 47000,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					89,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAABJpAAAAAAAAE2kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEmkAAAAAAAASaQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "\nry"
					},
					"AwAAABNpAAAAAAAAFGkAAAAAAAAAAAAAFGkAAAAAAAAVaQAAAAAAAAAAAAAVaQAAAAAAABZpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAE2kAAAAAAAATaQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					4,
					"left_delete",
					null,
					"BQAAABVpAAAAAAAAFWkAAAAAAAABAAAAeRRpAAAAAAAAFGkAAAAAAAABAAAAchNpAAAAAAAAE2kAAAAAAAABAAAAChJpAAAAAAAAEmkAAAAAAAABAAAAdBJpAAAAAAAAFGkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFmkAAAAAAAAWaQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "\ntry"
					},
					"BgAAABRpAAAAAAAAFWkAAAAAAAAAAAAAFWkAAAAAAAAXaQAAAAAAAAAAAAASaQAAAAAAABJpAAAAAAAAAgAAACAgFWkAAAAAAAAWaQAAAAAAAAAAAAAWaQAAAAAAABdpAAAAAAAAAAAAABdpAAAAAAAAGGkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFGkAAAAAAAAUaQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABhpAAAAAAAAGmkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGGkAAAAAAAAYaQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAABhpAAAAAAAAGGkAAAAAAAABAAAAexhpAAAAAAAAGGkAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAGWkAAAAAAAAZaQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": " }"
					},
					"AgAAABhpAAAAAAAAGWkAAAAAAAAAAAAAGWkAAAAAAAAaaQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGGkAAAAAAAAYaQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"left_delete",
					null,
					"AQAAABlpAAAAAAAAGWkAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAGmkAAAAAAAAaaQAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABlpAAAAAAAAG2kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGWkAAAAAAAAZaQAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"right_delete",
					null,
					"AQAAABppAAAAAAAAGmkAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAGmkAAAAAAAAaaQAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "}cta"
					},
					"BAAAAHFpAAAAAAAAcmkAAAAAAAAAAAAAcmkAAAAAAABzaQAAAAAAAAAAAABzaQAAAAAAAHRpAAAAAAAAAAAAAHRpAAAAAAAAdWkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcWkAAAAAAABxaQAAAAAAAAAAAAAAgFFA"
				],
				[
					101,
					1,
					"left_delete",
					null,
					"AQAAAHRpAAAAAAAAdGkAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAdWkAAAAAAAB1aQAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "at"
					},
					"AgAAAHRpAAAAAAAAdWkAAAAAAAAAAAAAdWkAAAAAAAB2aQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdGkAAAAAAAB0aQAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					3,
					"left_delete",
					null,
					"AwAAAHVpAAAAAAAAdWkAAAAAAAABAAAAdHRpAAAAAAAAdGkAAAAAAAABAAAAYXNpAAAAAAAAc2kAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAdmkAAAAAAAB2aQAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "atch"
					},
					"BAAAAHNpAAAAAAAAdGkAAAAAAAAAAAAAdGkAAAAAAAB1aQAAAAAAAAAAAAB1aQAAAAAAAHZpAAAAAAAAAAAAAHZpAAAAAAAAd2kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAc2kAAAAAAABzaQAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHdpAAAAAAAAeWkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAd2kAAAAAAAB3aQAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "cv::Exception"
					},
					"DQAAAHhpAAAAAAAAeWkAAAAAAAAAAAAAeWkAAAAAAAB6aQAAAAAAAAAAAAB6aQAAAAAAAHtpAAAAAAAAAAAAAHtpAAAAAAAAfGkAAAAAAAAAAAAAfGkAAAAAAAB9aQAAAAAAAAAAAAB9aQAAAAAAAH5pAAAAAAAAAAAAAH5pAAAAAAAAf2kAAAAAAAAAAAAAf2kAAAAAAACAaQAAAAAAAAAAAACAaQAAAAAAAIFpAAAAAAAAAAAAAIFpAAAAAAAAgmkAAAAAAAAAAAAAgmkAAAAAAACDaQAAAAAAAAAAAACDaQAAAAAAAIRpAAAAAAAAAAAAAIRpAAAAAAAAhWkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeGkAAAAAAAB4aQAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"left_delete",
					null,
					"AQAAAIVpAAAAAAAAhWkAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAhmkAAAAAAACGaQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIVpAAAAAAAAhmkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhWkAAAAAAACFaQAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"left_delete",
					null,
					"AQAAAIVpAAAAAAAAhWkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAhmkAAAAAAACGaQAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAIVpAAAAAAAAhmkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhWkAAAAAAACFaQAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": " ex"
					},
					"AwAAAIZpAAAAAAAAh2kAAAAAAAAAAAAAh2kAAAAAAACIaQAAAAAAAAAAAACIaQAAAAAAAIlpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhmkAAAAAAACGaQAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"left_delete",
					null,
					"AQAAAIhpAAAAAAAAiGkAAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAAiWkAAAAAAACJaQAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAIhpAAAAAAAAiWkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiGkAAAAAAACIaQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIlpAAAAAAAAimkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiWkAAAAAAACJaQAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"wrap_block",
					{
						"begin": "{",
						"end": "}"
					},
					"AgAAAIppAAAAAAAAi2kAAAAAAAAAAAAAo2kAAAAAAAClaQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAimkAAAAAAACKaQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAItpAAAAAAAAjGkAAAAAAAAAAAAAjGkAAAAAAACOaQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAi2kAAAAAAACLaQAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BgAAAHhpAAAAAAAAeWkAAAAAAAAAAAAAjWkAAAAAAACNaQAAAAAAAAIAAAAgIHlpAAAAAAAAemkAAAAAAAAAAAAAemkAAAAAAAB7aQAAAAAAAAAAAAB7aQAAAAAAAHxpAAAAAAAAAAAAAHxpAAAAAAAAfWkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeGkAAAAAAAB4aQAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH1pAAAAAAAAfmkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfWkAAAAAAAB9aQAAAAAAAAAAAAAAAF5A"
				],
				[
					126,
					1,
					"cut",
					null,
					"AQAAAKppAAAAAAAAqmkAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAq2kAAAAAAACqaQAAAAAAAAAAAAAAAAAA"
				],
				[
					128,
					1,
					"paste",
					null,
					"AQAAAJJpAAAAAAAAk2kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkmkAAAAAAACSaQAAAAAAAAAAAAAAAAAA"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAJFpAAAAAAAAkmkAAAAAAAAAAAAAkmkAAAAAAACUaQAAAAAAAAAAAACUaQAAAAAAAJVpAAAAAAAAAAAAAJVpAAAAAAAAl2kAAAAAAAAAAAAAkmkAAAAAAACSaQAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAkWkAAAAAAACRaQAAAAAAAP///////+9/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAJVpAAAAAAAAlmkAAAAAAAAAAAAAlmkAAAAAAACXaQAAAAAAAAAAAACXaQAAAAAAAJhpAAAAAAAAAAAAAJhpAAAAAAAAmWkAAAAAAAAAAAAAmWkAAAAAAACaaQAAAAAAAAAAAACaaQAAAAAAAJtpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlWkAAAAAAACVaQAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": " JS_ThrowInte"
					},
					"DQAAAJtpAAAAAAAAnGkAAAAAAAAAAAAAnGkAAAAAAACdaQAAAAAAAAAAAACdaQAAAAAAAJ5pAAAAAAAAAAAAAJ5pAAAAAAAAn2kAAAAAAAAAAAAAn2kAAAAAAACgaQAAAAAAAAAAAACgaQAAAAAAAKFpAAAAAAAAAAAAAKFpAAAAAAAAomkAAAAAAAAAAAAAomkAAAAAAACjaQAAAAAAAAAAAACjaQAAAAAAAKRpAAAAAAAAAAAAAKRpAAAAAAAApWkAAAAAAAAAAAAApWkAAAAAAACmaQAAAAAAAAAAAACmaQAAAAAAAKdpAAAAAAAAAAAAAKdpAAAAAAAAqGkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAm2kAAAAAAACbaQAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "rnalError"
					},
					"CQAAAKhpAAAAAAAAqWkAAAAAAAAAAAAAqWkAAAAAAACqaQAAAAAAAAAAAACqaQAAAAAAAKtpAAAAAAAAAAAAAKtpAAAAAAAArGkAAAAAAAAAAAAArGkAAAAAAACtaQAAAAAAAAAAAACtaQAAAAAAAK5pAAAAAAAAAAAAAK5pAAAAAAAAr2kAAAAAAAAAAAAAr2kAAAAAAACwaQAAAAAAAAAAAACwaQAAAAAAALFpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqGkAAAAAAACoaQAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALFpAAAAAAAAs2kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsWkAAAAAAACxaQAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAALJpAAAAAAAAs2kAAAAAAAAAAAAAs2kAAAAAAAC0aQAAAAAAAAAAAAC0aQAAAAAAALVpAAAAAAAAAAAAALVpAAAAAAAAtmkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsmkAAAAAAACyaQAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALZpAAAAAAAAt2kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtmkAAAAAAAC2aQAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAALdpAAAAAAAAuWkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAt2kAAAAAAAC3aQAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "cv::Exception"
					},
					"DQAAALhpAAAAAAAAuWkAAAAAAAAAAAAAuWkAAAAAAAC6aQAAAAAAAAAAAAC6aQAAAAAAALtpAAAAAAAAAAAAALtpAAAAAAAAvGkAAAAAAAAAAAAAvGkAAAAAAAC9aQAAAAAAAAAAAAC9aQAAAAAAAL5pAAAAAAAAAAAAAL5pAAAAAAAAv2kAAAAAAAAAAAAAv2kAAAAAAADAaQAAAAAAAAAAAADAaQAAAAAAAMFpAAAAAAAAAAAAAMFpAAAAAAAAwmkAAAAAAAAAAAAAwmkAAAAAAADDaQAAAAAAAAAAAADDaQAAAAAAAMRpAAAAAAAAAAAAAMRpAAAAAAAAxWkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuGkAAAAAAAC4aQAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": " what='"
					},
					"BwAAAMVpAAAAAAAAxmkAAAAAAAAAAAAAxmkAAAAAAADHaQAAAAAAAAAAAADHaQAAAAAAAMhpAAAAAAAAAAAAAMhpAAAAAAAAyWkAAAAAAAAAAAAAyWkAAAAAAADKaQAAAAAAAAAAAADKaQAAAAAAAMtpAAAAAAAAAAAAAMtpAAAAAAAAzGkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxWkAAAAAAADFaQAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "%s'"
					},
					"AwAAAMxpAAAAAAAAzWkAAAAAAAAAAAAAzWkAAAAAAADOaQAAAAAAAAAAAADOaQAAAAAAAM9pAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzGkAAAAAAADMaQAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANBpAAAAAAAA0WkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0GkAAAAAAADQaQAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANFpAAAAAAAA0mkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0WkAAAAAAADRaQAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"paste",
					null,
					"AQAAANJpAAAAAAAA1mkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0mkAAAAAAADSaQAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					4,
					"left_delete",
					null,
					"BAAAANVpAAAAAAAA1WkAAAAAAAABAAAAdNRpAAAAAAAA1GkAAAAAAAABAAAAYdNpAAAAAAAA02kAAAAAAAABAAAAaNJpAAAAAAAA0mkAAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAA1mkAAAAAAADWaQAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "e.what"
					},
					"BgAAANJpAAAAAAAA02kAAAAAAAAAAAAA02kAAAAAAADUaQAAAAAAAAAAAADUaQAAAAAAANVpAAAAAAAAAAAAANVpAAAAAAAA1mkAAAAAAAAAAAAA1mkAAAAAAADXaQAAAAAAAAAAAADXaQAAAAAAANhpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0mkAAAAAAADSaQAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANhpAAAAAAAA2mkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2GkAAAAAAADYaQAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANtpAAAAAAAA3GkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA22kAAAAAAADbaQAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"left_delete",
					null,
					"AQAAAJFpAAAAAAAAkWkAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAkmkAAAAAAACSaQAAAAAAAAAAAAAA0IZA"
				],
				[
					153,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAkWkAAAAAAACRaQAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOZpAAAAAAAA52kAAAAAAAAAAAAA52kAAAAAAADpaQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5mkAAAAAAADmaQAAAAAAAP///////+9/"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAOlpAAAAAAAA62kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6WkAAAAAAADpaQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_point.cpp",
			"settings":
			{
				"buffer_size": 12536,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"cut",
					null,
					"AQAAANMwAAAAAAAA0zAAAAAAAABNAAAACmV4dGVybiAiQyIgVklTSUJMRSB2b2lkIGpzX3BvaW50X2V4cG9ydChKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG0pIHsKfQo",
					"AQAAAAAAAAABAAAAIDEAAAAAAADTMAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAF0vAAAAAAAAqi8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXS8AAAAAAABdLwAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"cut",
					null,
					"AQAAAOowAAAAAAAA6jAAAAAAAAAnAAAAICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiUG9pbnQiKTsK",
					"AQAAAAAAAAABAAAA6jAAAAAAAAARMQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"paste",
					null,
					"AQAAAKgvAAAAAAAAzy8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqC8AAAAAAACoLwAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "\njs_poitn_expor"
					},
					"EgAAABAxAAAAAAAAETEAAAAAAAAAAAAAETEAAAAAAAAVMQAAAAAAAAAAAAARMQAAAAAAABExAAAAAAAABAAAACAgICARMQAAAAAAABMxAAAAAAAAAAAAABMxAAAAAAAAFDEAAAAAAAAAAAAAFDEAAAAAAAAVMQAAAAAAAAAAAAAVMQAAAAAAABYxAAAAAAAAAAAAABYxAAAAAAAAFzEAAAAAAAAAAAAAFzEAAAAAAAAYMQAAAAAAAAAAAAAYMQAAAAAAABkxAAAAAAAAAAAAABkxAAAAAAAAGjEAAAAAAAAAAAAAGjEAAAAAAAAbMQAAAAAAAAAAAAAbMQAAAAAAABwxAAAAAAAAAAAAABwxAAAAAAAAHTEAAAAAAAAAAAAAHTEAAAAAAAAeMQAAAAAAAAAAAAAeMQAAAAAAAB8xAAAAAAAAAAAAAB8xAAAAAAAAIDEAAAAAAAAAAAAAIDEAAAAAAAAhMQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEDEAAAAAAAAQMQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAACExAAAAAAAAIjEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAITEAAAAAAAAhMQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					9,
					"left_delete",
					null,
					"CQAAACExAAAAAAAAITEAAAAAAAABAAAAdCAxAAAAAAAAIDEAAAAAAAABAAAAch8xAAAAAAAAHzEAAAAAAAABAAAAbx4xAAAAAAAAHjEAAAAAAAABAAAAcB0xAAAAAAAAHTEAAAAAAAABAAAAeBwxAAAAAAAAHDEAAAAAAAABAAAAZRsxAAAAAAAAGzEAAAAAAAABAAAAXxoxAAAAAAAAGjEAAAAAAAABAAAAbhkxAAAAAAAAGTEAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAIjEAAAAAAAAiMQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "nt_export"
					},
					"CQAAABkxAAAAAAAAGjEAAAAAAAAAAAAAGjEAAAAAAAAbMQAAAAAAAAAAAAAbMQAAAAAAABwxAAAAAAAAAAAAABwxAAAAAAAAHTEAAAAAAAAAAAAAHTEAAAAAAAAeMQAAAAAAAAAAAAAeMQAAAAAAAB8xAAAAAAAAAAAAAB8xAAAAAAAAIDEAAAAAAAAAAAAAIDEAAAAAAAAhMQAAAAAAAAAAAAAhMQAAAAAAACIxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGTEAAAAAAAAZMQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACIxAAAAAAAAJDEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIjEAAAAAAAAiMQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "ctx,m"
					},
					"BQAAACMxAAAAAAAAJDEAAAAAAAAAAAAAJDEAAAAAAAAlMQAAAAAAAAAAAAAlMQAAAAAAACYxAAAAAAAAAAAAACYxAAAAAAAAJzEAAAAAAAAAAAAAJzEAAAAAAAAoMQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIzEAAAAAAAAjMQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACkxAAAAAAAAKjEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKTEAAAAAAAApMQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA6MQAAI2luY2x1ZGUgImpzYmluZGluZ3MuaHBwIgojaW5jbHVkZSAianMuaHBwIgojaW5jbHVkZSAianNfcG9pbnQuaHBwIgojaW5jbHVkZSAianNfcmVjdC5ocHAiCiNpbmNsdWRlICJqc19tYXQuaHBwIgojaW5jbHVkZSAianNfYXJyYXkuaHBwIgojaW5jbHVkZSAianNfYWxsb2MuaHBwIgojaW5jbHVkZSAianNfdHlwZWRfYXJyYXkuaHBwIgojaW5jbHVkZSAicXVpY2tqcy9jdXRpbHMuaCIKI2luY2x1ZGUgInF1aWNranMvcXVpY2tqcy5oIgoKI2luY2x1ZGUgPGxpc3Q+CiNpbmNsdWRlIDxvcGVuY3YyL2NvcmUvY29yZS5ocHA+CiNpbmNsdWRlIDxvcGVuY3YyL2ltZ3Byb2MvaW1ncHJvYy5ocHA+CgpzdGQ6OnZlY3RvcjxKU1BvaW50RGF0YTxkb3VibGU+Kj4gcG9pbnRzOwoKZXh0ZXJuICJDIiB7CgpKU1ZhbHVlIHBvaW50X3Byb3RvID0gSlNfVU5ERUZJTkVEOwpKU0NsYXNzSUQganNfcG9pbnRfY2xhc3NfaWQgPSAwOwoKVklTSUJMRSBKU1ZhbHVlCmpzX3BvaW50X25ldyhKU0NvbnRleHQqIGN0eCwgZG91YmxlIHgsIGRvdWJsZSB5KSB7CiAgSlNWYWx1ZSByZXQ7CiAgSlNQb2ludERhdGE8ZG91YmxlPiogczsKCiAgaWYoSlNfSXNVbmRlZmluZWQocG9pbnRfcHJvdG8pKQogICAganNfcG9pbnRfaW5pdChjdHgsIE5VTEwpOwoKICByZXQgPSBKU19OZXdPYmplY3RQcm90b0NsYXNzKGN0eCwgcG9pbnRfcHJvdG8sIGpzX3BvaW50X2NsYXNzX2lkKTsKCiAgcyA9IGpzX2FsbG9jYXRlPEpTUG9pbnREYXRhPGRvdWJsZT4+KGN0eCk7CgogIG5ldyhzKSBKU1BvaW50RGF0YTxkb3VibGU+KCk7CiAgcy0+eCA9IHggPD0gREJMX0VQU0lMT04gPyAwIDogeDsKICBzLT55ID0geSA8PSBEQkxfRVBTSUxPTiA/IDAgOiB5OwoKICBwb2ludHMucHVzaF9iYWNrKHMpOwoKICBKU19TZXRPcGFxdWUocmV0LCBzKTsKICByZXR1cm4gcmV0Owp9CgpWSVNJQkxFIEpTVmFsdWUKanNfcG9pbnRfd3JhcChKU0NvbnRleHQqIGN0eCwgY29uc3QgSlNQb2ludERhdGE8ZG91YmxlPiYgcG9pbnQpIHsKICByZXR1cm4ganNfcG9pbnRfbmV3KGN0eCwgcG9pbnQueCwgcG9pbnQueSk7Cn0KCkpTVmFsdWUKanNfcG9pbnRfY2xvbmUoSlNDb250ZXh0KiBjdHgsIGNvbnN0IEpTUG9pbnREYXRhPGRvdWJsZT4mIHBvaW50KSB7CiAgcmV0dXJuIGpzX3BvaW50X25ldyhjdHgsIHBvaW50LngsIHBvaW50LnkpOwp9CgpzdGF0aWMgSlNWYWx1ZQpqc19wb2ludF9jcm9zcyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgSlNQb2ludERhdGE8ZG91YmxlPiogcyA9IGpzX3BvaW50X2RhdGEoY3R4LCB0aGlzX3ZhbCk7CiAgSlNQb2ludERhdGE8ZG91YmxlPiogb3RoZXIgPSBqc19wb2ludF9kYXRhKGN0eCwgYXJndlswXSk7CiAgZG91YmxlIHJldHZhbDsKICBpZighcyB8fCAhb3RoZXIpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogIHJldHZhbCA9IHMtPmNyb3NzKCpvdGhlcik7CiAgcmV0dXJuIEpTX05ld0Zsb2F0NjQoY3R4LCByZXR2YWwpOwp9CgpzdGF0aWMgSlNWYWx1ZQpqc19wb2ludF9jdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgbmV3X3RhcmdldCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCogYXJndikgewogIGRvdWJsZSB4LCB5OwogIEpTUG9pbnREYXRhPGRvdWJsZT4gcG9pbnQ7CgogIGlmKGFyZ2MgPiAwKSB7CiAgICBpZihqc19wb2ludF9yZWFkKGN0eCwgYXJndlswXSwgJnBvaW50KSkgewogICAgICB4ID0gcG9pbnQueDsKICAgICAgeSA9IHBvaW50Lnk7CiAgICB9IGVsc2UgewogICAgICBpZihKU19Ub0Zsb2F0NjQoY3R4LCAmeCwgYXJndlswXSkpCiAgICAgICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKICAgICAgaWYoYXJnYyA8IDIgfHwgSlNfVG9GbG9hdDY0KGN0eCwgJnksIGFyZ3ZbMV0pKQogICAgICAgIHJldHVybiBKU19FWENFUFRJT047CiAgICB9CiAgfQoKICByZXR1cm4ganNfcG9pbnRfbmV3KGN0eCwgeCwgeSk7Cn0KClZJU0lCTEUgSlNQb2ludERhdGE8ZG91YmxlPioKanNfcG9pbnRfZGF0YShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbCkgewogIHJldHVybiBzdGF0aWNfY2FzdDxKU1BvaW50RGF0YTxkb3VibGU+Kj4oSlNfR2V0T3BhcXVlMihjdHgsIHZhbCwganNfcG9pbnRfY2xhc3NfaWQpKTsKfQoKc3RhdGljIEpTVmFsdWUKanNfcG9pbnRfZGRvdChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgSlNQb2ludERhdGE8ZG91YmxlPiogcyA9IGpzX3BvaW50X2RhdGEoY3R4LCB0aGlzX3ZhbCk7CiAgSlNQb2ludERhdGE8ZG91YmxlPiogb3RoZXIgPSBqc19wb2ludF9kYXRhKGN0eCwgYXJndlswXSk7CiAgZG91YmxlIHJldHZhbDsKICBpZighcyB8fCAhb3RoZXIpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogIHJldHZhbCA9IHMtPmRkb3QoKm90aGVyKTsKICByZXR1cm4gSlNfTmV3RmxvYXQ2NChjdHgsIHJldHZhbCk7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX3BvaW50X2RpZmYoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCogYXJndikgewogIEpTUG9pbnREYXRhPGRvdWJsZT4qIHMgPSBqc19wb2ludF9kYXRhKGN0eCwgdGhpc192YWwpOwogIEpTUG9pbnREYXRhPGRvdWJsZT4qIG90aGVyID0ganNfcG9pbnRfZGF0YShjdHgsIGFyZ3ZbMF0pOwoKICBKU1ZhbHVlIHJldDsKICBpZighcyB8fCAhb3RoZXIpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICByZXQgPSBqc19wb2ludF9uZXcoY3R4LCBzLT54IC0gb3RoZXItPngsIHMtPnkgLSBvdGhlci0+eSk7CiAgcmV0dXJuIHJldDsKfQoKc3RhdGljIEpTVmFsdWUKanNfcG9pbnRfZ2V0X3h5KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBtYWdpYykgewogIEpTUG9pbnREYXRhPGRvdWJsZT4qIHMgPSBqc19wb2ludF9kYXRhKGN0eCwgdGhpc192YWwpOwogIGlmKCFzKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKICBpZihtYWdpYyA9PSAwKQogICAgcmV0dXJuIEpTX05ld0Zsb2F0NjQoY3R4LCBzLT54KTsKICBlbHNlIGlmKG1hZ2ljID09IDEpCiAgICByZXR1cm4gSlNfTmV3RmxvYXQ2NChjdHgsIHMtPnkpOwogIHJldHVybiBKU19VTkRFRklORUQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX3BvaW50X2luc2lkZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgSlNQb2ludERhdGE8ZG91YmxlPiogcyA9IGpzX3BvaW50X2RhdGEoY3R4LCB0aGlzX3ZhbCk7CiAgSlNSZWN0RGF0YTxkb3VibGU+IHIgPSBqc19yZWN0X2dldChjdHgsIGFyZ3ZbMF0pOwogIGJvb2wgcmV0dmFsOwogIGlmKCFzIC8qfHwgIXIqLykKICAgIHJldHVybiBKU19FWENFUFRJT047CgogIHJldHZhbCA9IHMtPmluc2lkZShyKTsKCiAgcmV0dXJuIEpTX05ld0Jvb2woY3R4LCByZXR2YWwpOwp9CgpzdGF0aWMgSlNWYWx1ZQpqc19wb2ludF9ub3JtKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YpIHsKICBKU1BvaW50RGF0YTxkb3VibGU+KiBzID0ganNfcG9pbnRfZGF0YShjdHgsIHRoaXNfdmFsKTsKICBpZighcykKICAgIHJldHVybiBKU19FWENFUFRJT047CiAgcmV0dXJuIEpTX05ld0Zsb2F0NjQoY3R4LCBzcXJ0KChkb3VibGUpcy0+eCAqIHMtPnggKyAoZG91YmxlKXMtPnkgKiBzLT55KSk7Cn0KCi8qCnN0YXRpYyBKU1ZhbHVlCmpzX3BvaW50X211bChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgSlNQb2ludERhdGE8ZG91YmxlPiogcyA9IGpzX3BvaW50X2RhdGEoY3R4LCB0aGlzX3ZhbCk7CiAgZG91YmxlIGZhY3RvciA9IDEuMDsKICBKU19Ub0Zsb2F0NjQoY3R4LCAmZmFjdG9yLCBhcmd2WzBdKTsKICBKU1ZhbHVlIHJldDsKICBpZighcyB8fCBhcmdjIDwgMSkKICAgIHJldHVybiBKU19FWENFUFRJT047CgogIHJldHVybiBqc19wb2ludF9uZXcoY3R4LCBzLT54ICogZmFjdG9yLCBzLT55ICogZmFjdG9yKTsKfQoKc3RhdGljIEpTVmFsdWUKanNfcG9pbnRfcXVvdChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgSlNQb2ludERhdGE8ZG91YmxlPiogcyA9IGpzX3BvaW50X2RhdGEoY3R4LCB0aGlzX3ZhbCk7CiAgZG91YmxlIGRpdmlzb3IgPSAxLjA7CiAgSlNfVG9GbG9hdDY0KGN0eCwgJmRpdmlzb3IsIGFyZ3ZbMF0pOwogIEpTVmFsdWUgcmV0OwogIGlmKCFzIHx8IGFyZ2MgPCAxKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgcmV0ID0ganNfcG9pbnRfbmV3KGN0eCwgcy0+eCAvIGRpdmlzb3IsIHMtPnkgLyBkaXZpc29yKTsKICByZXR1cm4gcmV0Owp9Ki8KCnN0YXRpYyBKU1ZhbHVlCmpzX3BvaW50X3NldF94eShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBKU1ZhbHVlQ29uc3QgdmFsLCBpbnQgbWFnaWMpIHsKICBKU1BvaW50RGF0YTxkb3VibGU+KiBzID0ganNfcG9pbnRfZGF0YShjdHgsIHRoaXNfdmFsKTsKICBkb3VibGUgdjsKICBpZighcykKICAgIHJldHVybiBKU19FWENFUFRJT047CiAgaWYoSlNfVG9GbG9hdDY0KGN0eCwgJnYsIHZhbCkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogIGlmKG1hZ2ljID09IDApCiAgICBzLT54ID0gdjsKICBlbHNlCiAgICBzLT55ID0gdjsKICByZXR1cm4gSlNfVU5ERUZJTkVEOwp9CgpzdGF0aWMgSlNWYWx1ZQpqc19wb2ludF9hZGQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCogYXJndiwgaW50IG1hZ2ljKSB7CiAgSlNQb2ludERhdGE8ZG91YmxlPiBvdGhlciwgcG9pbnQsICpzID0ganNfcG9pbnRfZGF0YShjdHgsIHRoaXNfdmFsKTsKICBkb3VibGUgeCwgeTsKCiAgaWYoanNfcG9pbnRfcmVhZChjdHgsIGFyZ3ZbMF0sICZvdGhlcikpIHsKICAgIHggPSBvdGhlci54OwogICAgeSA9IG90aGVyLnk7CiAgfSBlbHNlIHsKICAgIEpTX1RvRmxvYXQ2NChjdHgsICZ4LCBhcmd2WzBdKTsKICAgIGlmKGFyZ2MgPCAyKQogICAgICB5ID0geDsKICAgIGVsc2UKICAgICAgSlNfVG9GbG9hdDY0KGN0eCwgJnksIGFyZ3ZbMV0pOwogIH0KCiAgc3dpdGNoKG1hZ2ljKSB7CiAgICBjYXNlIDA6CiAgICAgIHBvaW50LnggPSBzLT54ICsgeDsKICAgICAgcG9pbnQueSA9IHMtPnkgKyB5OwoKICAgICAgYnJlYWs7CiAgICBjYXNlIDE6CiAgICAgIHBvaW50LnggPSBzLT54IC0geDsKICAgICAgcG9pbnQueSA9IHMtPnkgLSB5OwogICAgICBicmVhazsKICAgIGNhc2UgMjoKICAgICAgcG9pbnQueCA9IHMtPnggKiB4OwogICAgICBwb2ludC55ID0gcy0+eSAqIHk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAzOgogICAgICBwb2ludC54ID0gcy0+eCAvIHg7CiAgICAgIHBvaW50LnkgPSBzLT55IC8geTsKICAgICAgYnJlYWs7CiAgfQogIHJldHVybiBqc19wb2ludF93cmFwKGN0eCwgcG9pbnQpOwp9CgpzdGF0aWMgSlNWYWx1ZQpqc19wb2ludF90b19zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCogYXJndiwgaW50IG1hZ2ljKSB7CiAgSlNQb2ludERhdGE8ZG91YmxlPiogcyA9IGpzX3BvaW50X2RhdGEoY3R4LCB0aGlzX3ZhbCk7CiAgc3RkOjpvc3RyaW5nc3RyZWFtIG9zOwogIEpTVmFsdWUgeHYsIHl2OwogIGNvbnN0IGNoYXIqIGRlbGltID0gIiwiOwogIGRvdWJsZSB4ID0gLTEsIHkgPSAtMTsKICAvKiBpZighcykKICAgICByZXR1cm4gSlNfRVhDRVBUSU9OOyovCiAgaWYoYXJnYyA+IDApCiAgICBkZWxpbSA9IEpTX1RvQ1N0cmluZyhjdHgsIGFyZ3ZbMF0pOwoKICB4diA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgdGhpc192YWwsICJ4Iik7CiAgeXYgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHRoaXNfdmFsLCAieSIpOwoKICBpZihKU19Jc051bWJlcih4dikgJiYgSlNfSXNOdW1iZXIoeXYpKSB7CiAgICBKU19Ub0Zsb2F0NjQoY3R4LCAmeCwgeHYpOwogICAgSlNfVG9GbG9hdDY0KGN0eCwgJnksIHl2KTsKICB9IGVsc2UgaWYocykgewogICAgeCA9IHMtPng7CiAgICB5ID0gcy0+eTsKICB9CgogIHN3aXRjaChtYWdpYykgewogICAgY2FzZSAwOiB7CiAgICAgIG9zIDw8IHggPDwgIiwiIDw8IHk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAxOiB7CiAgICAgIG9zIDw8ICJbIiA8PCB4IDw8ICIsIiA8PCB5IDw8ICJdIjsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIDI6IHsKCiAgICAgIG9zIDw8ICJ7eDoiIDw8IHggPDwgIix5OiIgPDwgeSA8PCAifSI7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICByZXR1cm4gSlNfTmV3U3RyaW5nKGN0eCwgb3Muc3RyKCkuY19zdHIoKSk7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX3BvaW50X3RvX2FycmF5KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YpIHsKICBKU1BvaW50RGF0YTxkb3VibGU+KiBzID0ganNfcG9pbnRfZGF0YShjdHgsIHRoaXNfdmFsKTsKICBzdGQ6OmFycmF5PGRvdWJsZSwgMj4gYXJyOwoKICBhcnJbMF0gPSBzLT54OwogIGFyclsxXSA9IHMtPnk7CgogIHJldHVybiBqc19hcnJheV9mcm9tKGN0eCwgYXJyLmNiZWdpbigpLCBhcnIuY2VuZCgpKTsKfQoKc3RhdGljIEpTVmFsdWUKanNfcG9pbnRfaW5zcGVjdChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgSlNQb2ludERhdGE8ZG91YmxlPiogcyA9IGpzX3BvaW50X2RhdGEoY3R4LCB0aGlzX3ZhbCk7CiAgSlNWYWx1ZSBvYmogPSBKU19OZXdPYmplY3RQcm90byhjdHgsIHBvaW50X3Byb3RvKTsKCiAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgIngiLCBKU19OZXdGbG9hdDY0KGN0eCwgcy0+eCksIEpTX1BST1BfRU5VTUVSQUJMRSk7CiAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgInkiLCBKU19OZXdGbG9hdDY0KGN0eCwgcy0+eSksIEpTX1BST1BfRU5VTUVSQUJMRSk7CgogIHJldHVybiBvYmo7Cn0KCnN0YXRpYyBKU1ZhbHVlIGl0ZXJhdG9yX3N5bWJvbCA9IEpTX1VOREVGSU5FRDsKCnN0YXRpYyBKU1ZhbHVlCmpzX3BvaW50X3N5bWJvbF9pdGVyYXRvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgSlNWYWx1ZSBhcnIsIGl0ZXI7CiAganNydCBqcyhjdHgpOwogIGFyciA9IGpzX3BvaW50X3RvX2FycmF5KGN0eCwgdGhpc192YWwsIGFyZ2MsIGFyZ3YpOwoKICBpZihKU19Jc1VuZGVmaW5lZChpdGVyYXRvcl9zeW1ib2wpKQogICAgaXRlcmF0b3Jfc3ltYm9sID0ganMuZ2V0X3N5bWJvbCgiaXRlcmF0b3IiKTsKCiAgaWYoIUpTX0lzRnVuY3Rpb24oY3R4LCAoaXRlciA9IGpzLmdldF9wcm9wZXJ0eShhcnIsIGl0ZXJhdG9yX3N5bWJvbCkpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CiAgcmV0dXJuIEpTX0NhbGwoY3R4LCBpdGVyLCBhcnIsIDAsIGFyZ3YpOwp9CgpzdGF0aWMgSlNWYWx1ZQpqc19wb2ludF9yb3VuZChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2LCBpbnQgbWFnaWMpIHsKICBKU1BvaW50RGF0YTxkb3VibGU+IHBvaW50LCAqcyA9IGpzX3BvaW50X2RhdGEoY3R4LCB0aGlzX3ZhbCk7CiAgZG91YmxlIHgsIHk7CiAgZG91YmxlIHByZWMgPSAxOwogIHBvaW50ID0gKnM7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CgogIHN3aXRjaChtYWdpYykgewogICAgY2FzZSAwOgogICAgICBpZihhcmdjID4gMCkKICAgICAgICBKU19Ub0Zsb2F0NjQoY3R4LCAmcHJlYywgYXJndlswXSk7CgogICAgICB4ID0gcm91bmQocy0+eCAvIHByZWMpOwogICAgICB5ID0gcm91bmQocy0+eSAvIHByZWMpOwogICAgICByZXQgPSBqc19wb2ludF9uZXcoY3R4LCB4ICogcHJlYywgeSAqIHByZWMpOwogICAgICBicmVhazsKICAgIGNhc2UgMToKICAgICAgaWYoYXJnYyA+IDApCiAgICAgICAgSlNfVG9GbG9hdDY0KGN0eCwgJnByZWMsIGFyZ3ZbMF0pOwoKICAgICAgeCA9IGZsb29yKHMtPnggLyBwcmVjKTsKICAgICAgeSA9IGZsb29yKHMtPnkgLyBwcmVjKTsKICAgICAgcmV0ID0ganNfcG9pbnRfbmV3KGN0eCwgeCAqIHByZWMsIHkgKiBwcmVjKTsKICAgICAgYnJlYWs7CiAgICBjYXNlIDI6CiAgICAgIGlmKGFyZ2MgPiAwKQogICAgICAgIEpTX1RvRmxvYXQ2NChjdHgsICZwcmVjLCBhcmd2WzBdKTsKCiAgICAgIHggPSBjZWlsKHMtPnggLyBwcmVjKTsKICAgICAgeSA9IGNlaWwocy0+eSAvIHByZWMpOwogICAgICByZXQgPSBqc19wb2ludF9uZXcoY3R4LCB4ICogcHJlYywgeSAqIHByZWMpOwogICAgICBicmVhazsKICB9CiAgcmV0dXJuIHJldDsKfQoKc3RhdGljIEpTVmFsdWUKanNfcG9pbnRfZnJvbShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHBvaW50LCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgc3RkOjphcnJheTxkb3VibGUsIDI+IGFycmF5OwogIEpTVmFsdWUgcmV0ID0gSlNfRVhDRVBUSU9OOwoKICBpZihKU19Jc1N0cmluZyhhcmd2WzBdKSkgewogICAgY29uc3QgY2hhciogc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgYXJndlswXSk7CiAgICBjaGFyKiBlbmRwdHIgPSBudWxscHRyOwogICAgZm9yKHNpemVfdCBpID0gMDsgaSA8IDI7IGkrKykgewogICAgICB3aGlsZSghaXNkaWdpdCgqc3RyKSAmJiAqc3RyICE9ICctJyAmJiAqc3RyICE9ICcrJyAmJiAhKCpzdHIgPT0gJy4nICYmIGlzZGlnaXQoc3RyWzFdKSkpIHN0cisrOwogICAgICBpZigqc3RyID09ICdcMCcpCiAgICAgICAgYnJlYWs7CiAgICAgIGFycmF5W2ldID0gc3RydG9kKHN0ciwgJmVuZHB0cik7CiAgICAgIHN0ciA9IGVuZHB0cjsKICAgIH0KICB9IGVsc2UgaWYoanNfaXNfYXJyYXkoY3R4LCBhcmd2WzBdKSkgewogICAganNfYXJyYXlfdG88ZG91YmxlLCAyPihjdHgsIGFyZ3ZbMF0sIGFycmF5KTsKICB9CiAgaWYoYXJyYXlbMF0gPiAwICYmIGFycmF5WzFdID4gMCkKICAgIHJldCA9IGpzX3BvaW50X25ldyhjdHgsIGFycmF5WzBdLCBhcnJheVsxXSk7CiAgcmV0dXJuIHJldDsKfQoKc3RhdGljIHZvaWQKanNfcG9pbnRfZmluYWxpemVyKEpTUnVudGltZSogcnQsIEpTVmFsdWUgdmFsKSB7CiAgSlNQb2ludERhdGE8ZG91YmxlPiogcyA9IHN0YXRpY19jYXN0PEpTUG9pbnREYXRhPGRvdWJsZT4qPihKU19HZXRPcGFxdWUodmFsLCBqc19wb2ludF9jbGFzc19pZCkpOwoKICBpZihzICE9IG51bGxwdHIpIHsKICAgIGpzX2RlYWxsb2NhdGUocnQsIHMpOwogIH0KCiAgLy8gSlNfRnJlZVZhbHVlUlQocnQsIHZhbCk7CgogIC8qICBpZihwb2ludHMuc2l6ZSgpID09IDApCiAgICAgIEpTX0ZyZWVWYWx1ZVJUKHJ0LCBwb2ludF9wcm90byk7Ki8KfQoKSlNWYWx1ZSBwb2ludF9jbGFzcyA9IEpTX1VOREVGSU5FRDsKCkpTQ2xhc3NEZWYganNfcG9pbnRfY2xhc3MgPSB7CiAgICAuY2xhc3NfbmFtZSA9ICJQb2ludCIsCiAgICAuZmluYWxpemVyID0ganNfcG9pbnRfZmluYWxpemVyLAp9OwoKY29uc3QgSlNDRnVuY3Rpb25MaXN0RW50cnkganNfcG9pbnRfcHJvdG9fZnVuY3NbXSA9IHsKICAgIEpTX0NHRVRTRVRfRU5VTUVSQUJMRV9ERUYoIngiLCBqc19wb2ludF9nZXRfeHksIGpzX3BvaW50X3NldF94eSwgMCksCiAgICBKU19DR0VUU0VUX0VOVU1FUkFCTEVfREVGKCJ5IiwganNfcG9pbnRfZ2V0X3h5LCBqc19wb2ludF9zZXRfeHksIDEpLAogICAgSlNfQ0ZVTkNfREVGKCJjcm9zcyIsIDEsIGpzX3BvaW50X2Nyb3NzKSwKICAgIEpTX0NGVU5DX0RFRigiZG90IiwgMSwganNfcG9pbnRfZGRvdCksCiAgICBKU19DRlVOQ19ERUYoImluc2lkZSIsIDEsIGpzX3BvaW50X2luc2lkZSksCiAgICBKU19DRlVOQ19ERUYoImRpZmYiLCAxLCBqc19wb2ludF9kaWZmKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiYWRkIiwgMSwganNfcG9pbnRfYWRkLCAwKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigic3ViIiwgMSwganNfcG9pbnRfYWRkLCAxKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigibXVsIiwgMSwganNfcG9pbnRfYWRkLCAyKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZGl2IiwgMSwganNfcG9pbnRfYWRkLCAzKSwKICAgIEpTX0NGVU5DX0RFRigibm9ybSIsIDAsIGpzX3BvaW50X25vcm0pLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJyb3VuZCIsIDAsIGpzX3BvaW50X3JvdW5kLCAwKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZmxvb3IiLCAwLCBqc19wb2ludF9yb3VuZCwgMSksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImNlaWwiLCAwLCBqc19wb2ludF9yb3VuZCwgMiksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoInRvU3RyaW5nIiwgMCwganNfcG9pbnRfdG9fc3RyaW5nLCAwKSwKICAgIEpTX0NGVU5DX0RFRigidG9BcnJheSIsIDAsIGpzX3BvaW50X3RvX2FycmF5KSwKICAgIEpTX0NGVU5DX0RFRigiW1N5bWJvbC5pdGVyYXRvcl0iLCAwLCBqc19wb2ludF9zeW1ib2xfaXRlcmF0b3IpLAogICAgSlNfUFJPUF9TVFJJTkdfREVGKCJbU3ltYm9sLnRvU3RyaW5nVGFnXSIsICJQb2ludCIsIEpTX1BST1BfQ09ORklHVVJBQkxFKSwKCiAgICAvLyBKU19DRlVOQ19NQUdJQ19ERUYoIltTeW1ib2wudG9TdHJpbmdUYWddIiwgMCwganNfcG9pbnRfdG9fc3RyaW5nLCAxKSwKfTsKY29uc3QgSlNDRnVuY3Rpb25MaXN0RW50cnkganNfcG9pbnRfc3RhdGljX2Z1bmNzW10gPSB7SlNfQ0ZVTkNfREVGKCJmcm9tIiwgMSwganNfcG9pbnRfZnJvbSl9OwoKaW50CmpzX3BvaW50X2luaXQoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtKSB7CgogIGlmKGpzX3BvaW50X2NsYXNzX2lkID09IDApIHsKICAgIC8qIGNyZWF0ZSB0aGUgUG9pbnQgY2xhc3MgKi8KICAgIEpTX05ld0NsYXNzSUQoJmpzX3BvaW50X2NsYXNzX2lkKTsKICAgIEpTX05ld0NsYXNzKEpTX0dldFJ1bnRpbWUoY3R4KSwganNfcG9pbnRfY2xhc3NfaWQsICZqc19wb2ludF9jbGFzcyk7CgogICAgcG9pbnRfcHJvdG8gPSBKU19OZXdPYmplY3QoY3R4KTsKICAgIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgcG9pbnRfcHJvdG8sIGpzX3BvaW50X3Byb3RvX2Z1bmNzLCBjb3VudG9mKGpzX3BvaW50X3Byb3RvX2Z1bmNzKSk7CiAgICBKU19TZXRDbGFzc1Byb3RvKGN0eCwganNfcG9pbnRfY2xhc3NfaWQsIHBvaW50X3Byb3RvKTsKCiAgICBwb2ludF9jbGFzcyA9IEpTX05ld0NGdW5jdGlvbjIoY3R4LCBqc19wb2ludF9jdG9yLCAiUG9pbnQiLCAwLCBKU19DRlVOQ19jb25zdHJ1Y3RvciwgMCk7CiAgICAvKiBzZXQgcHJvdG8uY29uc3RydWN0b3IgYW5kIGN0b3IucHJvdG90eXBlICovCiAgICBKU19TZXRDb25zdHJ1Y3RvcihjdHgsIHBvaW50X2NsYXNzLCBwb2ludF9wcm90byk7CiAgICBKU19TZXRQcm9wZXJ0eUZ1bmN0aW9uTGlzdChjdHgsIHBvaW50X2NsYXNzLCBqc19wb2ludF9zdGF0aWNfZnVuY3MsIGNvdW50b2YoanNfcG9pbnRfc3RhdGljX2Z1bmNzKSk7CgogICAganNfc2V0X2luc3BlY3RfbWV0aG9kKGN0eCwgcG9pbnRfcHJvdG8sIGpzX3BvaW50X2luc3BlY3QpOwogIH0KCiAgaWYobSkKICAgIEpTX1NldE1vZHVsZUV4cG9ydChjdHgsIG0sICJQb2ludCIsIHBvaW50X2NsYXNzKTsKICAvKiBlbHNlCiAgICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCAqc3RhdGljX2Nhc3Q8SlNWYWx1ZSo+KG0pLCBuYW1lLCBwb2ludF9jbGFzcyk7Ki8KICByZXR1cm4gMDsKfQoKdm9pZApqc19wb2ludF9jb25zdHJ1Y3RvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSBwYXJlbnQsIGNvbnN0IGNoYXIqIG5hbWUpIHsKICBpZihKU19Jc1VuZGVmaW5lZChwb2ludF9jbGFzcykpCiAgICBqc19wb2ludF9pbml0KGN0eCwgMCk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcGFyZW50LCBuYW1lID8gbmFtZSA6ICJQb2ludCIsIHBvaW50X2NsYXNzKTsKfQoKZXh0ZXJuICJDIiBWSVNJQkxFIHZvaWQganNfcG9pbnRfZXhwb3J0KEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJQb2ludCIpOwp9CgojaWYgZGVmaW5lZChKU19QT0lOVF9NT0RVTEUpCiNkZWZpbmUgSlNfSU5JVF9NT0RVTEUgLypWSVNJQkxFKi8ganNfaW5pdF9tb2R1bGUKI2Vsc2UKI2RlZmluZSBKU19JTklUX01PRFVMRSAvKlZJU0lCTEUqLyBqc19pbml0X21vZHVsZV9wb2ludAojZW5kaWYKCkpTTW9kdWxlRGVmKgpKU19JTklUX01PRFVMRShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbW9kdWxlX25hbWUpIHsKICBKU01vZHVsZURlZiogbTsKICBtID0gSlNfTmV3Q01vZHVsZShjdHgsIG1vZHVsZV9uYW1lLCAmanNfcG9pbnRfaW5pdCk7CiAgaWYoIW0pCiAgICByZXR1cm4gTlVMTDsKICBqc19wb2ludF9leHBvcnQoY3R4LG0pOwogIHJldHVybiBtOwp9Cn0AAAAAAAAAADsxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKjEAAAAAAAAqMQAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"paste",
					null,
					"AgAAAEwdAAAAAAAAYB0AAAAAAAAAAAAAYB0AAAAAAABgHQAAAAAAAA0AAABqcy5nZXRfc3ltYm9s",
					"AQAAAAAAAAABAAAATB0AAAAAAABZHQAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAGEdAAAAAAAAYh0AAAAAAAAAAAAAYh0AAAAAAABjHQAAAAAAAAAAAABjHQAAAAAAAGQdAAAAAAAAAAAAAGQdAAAAAAAAZR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYR0AAAAAAABhHQAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGUdAAAAAAAAZh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZR0AAAAAAABlHQAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "JS_GetProperty"
					},
					"DwAAAJUdAAAAAAAAlh0AAAAAAAAAAAAAlh0AAAAAAACWHQAAAAAAAA8AAABqcy5nZXRfcHJvcGVydHmWHQAAAAAAAJcdAAAAAAAAAAAAAJcdAAAAAAAAmB0AAAAAAAAAAAAAmB0AAAAAAACZHQAAAAAAAAAAAACZHQAAAAAAAJodAAAAAAAAAAAAAJodAAAAAAAAmx0AAAAAAAAAAAAAmx0AAAAAAACcHQAAAAAAAAAAAACcHQAAAAAAAJ0dAAAAAAAAAAAAAJ0dAAAAAAAAnh0AAAAAAAAAAAAAnh0AAAAAAACfHQAAAAAAAAAAAACfHQAAAAAAAKAdAAAAAAAAAAAAAKAdAAAAAAAAoR0AAAAAAAAAAAAAoR0AAAAAAACiHQAAAAAAAAAAAACiHQAAAAAAAKMdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlR0AAAAAAACkHQAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "ctxm"
					},
					"BAAAAKQdAAAAAAAApR0AAAAAAAAAAAAApR0AAAAAAACmHQAAAAAAAAAAAACmHQAAAAAAAKcdAAAAAAAAAAAAAKcdAAAAAAAAqB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApB0AAAAAAACkHQAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKgdAAAAAAAAqR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqB0AAAAAAACoHQAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					2,
					"left_delete",
					null,
					"AgAAAKgdAAAAAAAAqB0AAAAAAAABAAAAIKcdAAAAAAAApx0AAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAqR0AAAAAAACpHQAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKcdAAAAAAAAqB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApx0AAAAAAACnHQAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKgdAAAAAAAAqR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqB0AAAAAAACoHQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"left_delete",
					null,
					"AQAAAMkcAAAAAAAAyRwAAAAAAAAQAAAAICBqc3J0IGpzKGN0eCk7Cg",
					"AQAAAAAAAAABAAAAyRwAAAAAAADZHAAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "JSAtom"
					},
					"BwAAABwcAAAAAAAAHRwAAAAAAAAAAAAAHRwAAAAAAAAdHAAAAAAAAAcAAABKU1ZhbHVlHRwAAAAAAAAeHAAAAAAAAAAAAAAeHAAAAAAAAB8cAAAAAAAAAAAAAB8cAAAAAAAAIBwAAAAAAAAAAAAAIBwAAAAAAAAhHAAAAAAAAAAAAAAhHAAAAAAAACIcAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHBwAAAAAAAAjHAAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"paste",
					null,
					"AgAAADsdAAAAAAAASR0AAAAAAAAAAAAASR0AAAAAAABJHQAAAAAAABQAAABqc19zeW1ib2xfZ2V0X3N0YXRpYw",
					"AQAAAAAAAAABAAAAOx0AAAAAAABPHQAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					4,
					"left_delete",
					null,
					"BAAAADUcAAAAAAAANRwAAAAAAAAMAAAASlNfVU5ERUZJTkVENBwAAAAAAAA0HAAAAAAAAAEAAAAgMxwAAAAAAAAzHAAAAAAAAAEAAAA9MhwAAAAAAAAyHAAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAANRwAAAAAAABBHAAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					2,
					"right_delete",
					null,
					"AgAAAPUcAAAAAAAA9RwAAAAAAAAOAAAASlNfSXNVbmRlZmluZWT1HAAAAAAAAPUcAAAAAAAAAQAAACg",
					"AQAAAAAAAAABAAAA9RwAAAAAAAADHQAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"left_delete",
					null,
					"AQAAAAQdAAAAAAAABB0AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAABR0AAAAAAAAFHQAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAAQdAAAAAAAABR0AAAAAAAAAAAAABR0AAAAAAAAGHQAAAAAAAAAAAAAGHQAAAAAAAAcdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABB0AAAAAAAAEHQAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAAcdAAAAAAAACB0AAAAAAAAAAAAACB0AAAAAAAAJHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABx0AAAAAAAAHHQAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAACR0AAAAAAAAJHQAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAACR0AAAAAAAAJHQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "util.hpp",
			"settings":
			{
				"buffer_size": 7222,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "#ifndef JSBINDINGS_HPP\n#define JSBINDINGS_HPP\n\n#include \"util.hpp\"\n#include <quickjs/quickjs.h>\n#include <quickjs/cutils.h>\n\n#include <opencv2/core/core.hpp>\n#include <opencv2/imgproc/imgproc.hpp>\n#include <opencv2/videoio.hpp>\n#include <iomanip>\n#include <map>\n#include <iterator>\n#include <ranges>\n#include <array>\n#include <algorithm>\n#include <string>\n#include <cctype>\n\ntypedef struct {\n  BOOL done;\n  JSValue value;\n} IteratorValue;\n\ntypedef cv::Rect2d JSRectDataD;\ntypedef cv::Mat JSMatData;\ntypedef cv::UMat JSUMatData;\ntypedef cv::Size2d JSSizeDataD;\n\ntemplate<class T> using JSPointData = cv::Point_<T>;\ntemplate<class T> using JSSizeData = cv::Size_<T>;\ntemplate<class T> using JSRectData = cv::Rect_<T>;\ntemplate<class T> using JSContourData = std::vector<JSPointData<T>>;\ntemplate<class T> using JSContoursData = std::vector<JSContourData<T>>;\n\n/*typedef JSPointData<int> JSPointData<int>;\ntypedef JSPointData<float> JSPointDataF;\ntypedef JSPointData<double> JSPointDataD;*/\n\ntypedef cv::VideoCapture JSVideoCaptureData;\ntypedef cv::TickMeter JSTickMeterData;\ntypedef cv::Ptr<cv::CLAHE> JSCLAHEData;\n\ntypedef cv::_InputArray JSInputArray;\ntypedef cv::_OutputArray JSOutputArray;\ntypedef cv::_InputOutputArray JSInputOutputArray;\n\ntemplate<class T> union JSLineData {\n  std::array<T, 4> array;\n  // cv::Vec<T, 4> vec;\n  // cv::Scalar_<T> scalar;\n  std::array<JSPointData<T>, 2> points;\n  std::pair<JSPointData<T>, JSPointData<T>> pt;\n  struct {\n    T x1, y1, x2, y2;\n  };\n};\n\ntemplate<class T> struct JSLineTraits {\n  typedef std::array<T, 4> array_type;\n  typedef cv::Vec<T, 4> vector_type;\n  typedef cv::Scalar_<T> scalar_type;\n};\n\ntemplate<class T> union JSColorData {\n  std::array<T, 4> arr;\n  struct {\n    T r, g, b, a;\n  };\n};\n\ntemplate<> union JSColorData<uint8_t> {\n  std::array<uint8_t, 4> arr;\n  struct {\n    uint8_t r, g, b, a;\n  };\n  uint32_t u32;\n};\n\n#if defined(_WIN32) || defined(__MINGW32__)\n#define VISIBLE __declspec(dllexport)\n#define HIDDEN\n#else\n#define VISIBLE __attribute__((visibility(\"default\")))\n#define HIDDEN __attribute__((visibility(\"hidden\")))\n#endif\n\n#define JS_CGETSET_ENUMERABLE_DEF(prop_name, fgetter, fsetter, magic_num)                                                      \\\n  {                                                                                                                            \\\n    .name = prop_name, .prop_flags = JS_PROP_ENUMERABLE | JS_PROP_CONFIGURABLE, .def_type = JS_DEF_CGETSET_MAGIC,              \\\n    .magic = magic_num, .u = {                                                                                                 \\\n      .getset = {.get = {.getter_magic = fgetter}, .set = {.setter_magic = fsetter}}                                           \\\n    }                                                                                                                          \\\n  }\n\nextern \"C\" {\n\nint js_draw_functions(JSContext* ctx, JSValue parent);\nint js_draw_init(JSContext*, JSModuleDef*);\n\nVISIBLE JSValue js_line_new(JSContext* ctx, double x1, double y1, double x2, double y2);\n\nJSModuleDef* js_init_module(JSContext* ctx, const char* module_name);\nJSModuleDef* js_init_module_point(JSContext*, const char*);\nJSModuleDef* js_init_module_size(JSContext*, const char*);\nJSModuleDef* js_init_module_rect(JSContext*, const char*);\nJSModuleDef* js_init_module_mat(JSContext*, const char*);\nJSModuleDef* js_init_module_contour(JSContext*, const char*);\nJSModuleDef* js_init_module_line(JSContext*, const char*);\nJSModuleDef* js_init_module_draw(JSContext*, const char*);\nJSModuleDef* js_init_module_cv(JSContext*, const char*);\nJSModuleDef* js_init_module_video_capture(JSContext*, const char*);\n\nint js_video_capture_init(JSContext*, JSModuleDef*);\n\nVISIBLE JSValue js_video_capture_wrap(JSContext*, cv::VideoCapture* cap);\n\n// extern \"C\" JSValue int32array_ctor, int32array_proto, mat_class, mat_proto, mat_iterator_proto,\n// point_class, line_class,  draw_class,  point_proto,\n// rect_class, rect_proto, size_class, size_proto, line_proto, draw_proto;\n\nVISIBLE JSValue js_mat_wrap(JSContext*, const cv::Mat& mat);\n}\n\nextern \"C\" JSClassDef js_size_class, js_point_class, js_mat_class, js_rect_class;\nextern \"C\" JSClassID js_line_class_id, js_draw_class_id;\n\nextern \"C\" const JSCFunctionListEntry js_rect_proto_funcs[];\n\nextern \"C\" JSClassID js_point_class_id, js_size_class_id, js_rect_class_id, js_mat_class_id, js_mat_iterator_class_id;\n\nextern \"C\" {\nstatic inline JSValue js_global_get(JSContext* ctx, const char* prop);\nstatic inline BOOL js_is_iterable(JSContext* ctx, JSValueConst obj);\nstatic inline JSValue js_iterator_method(JSContext* ctx, JSValueConst obj);\nstatic inline JSValue js_iterator_new(JSContext* ctx, JSValueConst obj);\nstatic inline IteratorValue js_iterator_next(JSContext* ctx, JSValueConst obj);\nstatic inline JSAtom js_symbol_atom(JSContext* ctx, const char* name);\nstatic inline JSValue js_symbol_ctor(JSContext* ctx);\nstatic inline JSValue js_symbol_get_static(JSContext* ctx, const char* name);\n}\n/*\ntemplate<class Type> JSValue js_contour_new(JSContext* ctx, const JSContourData<Type>& points);\n\ntemplate<> JSValue js_contour_new<double>(JSContext* ctx, const JSContourData<double>& points);\n\ntemplate<> JSValue js_contour_new<float>(JSContext* ctx, const JSContourData<float>& points);\n\ntemplate<> JSValue js_contour_new<int>(JSContext* ctx, const JSContourData<int>& points);\n*/\n#define countof(x) (sizeof(x) / sizeof((x)[0]))\n\nJSValue js_vector_vec4i_to_array(JSContext*, const std::vector<cv::Vec4i>& vec);\n\ninline JSValueConst\njs_ctor(JSContext* ctx, const char* name) {\n  JSValue global = JS_GetGlobalObject(ctx);\n  JSValueConst ctor = JS_GetPropertyStr(ctx, global, name);\n  return ctor;\n}\n\ninline JSValueConst\njs_proto(JSContext* ctx, const char* name) {\n  return JS_GetPrototype(ctx, js_ctor(ctx, name));\n}\n\ninline JSValue\njs_new(JSContext* ctx, const char* name) {\n  return JS_NewObjectProto(ctx, js_proto(ctx, name));\n}\n\ntemplate<class T>\nstatic inline int\njs_number_read(JSContext* ctx, JSValueConst num, T* out) {\n  double d;\n  int ret;\n  if((ret = !JS_ToFloat64(ctx, &d, num)))\n    *out = d;\n  return ret;\n}\n\ntemplate<>\ninline int\njs_number_read<int32_t>(JSContext* ctx, JSValueConst num, int32_t* out) {\n  return !JS_ToInt32(ctx, out, num);\n}\n\ntemplate<>\ninline int\njs_number_read<uint32_t>(JSContext* ctx, JSValueConst num, uint32_t* out) {\n  return !JS_ToUint32(ctx, out, num);\n}\n\ntemplate<>\ninline int\njs_number_read<int64_t>(JSContext* ctx, JSValueConst num, int64_t* out) {\n  return !JS_ToInt64(ctx, out, num);\n}\n\ntemplate<class T>\nstatic inline JSValue\njs_number_new(JSContext* ctx, T num) {\n  return JS_NewFloat64(ctx, num);\n}\n\ntemplate<>\ninline JSValue\njs_number_new<int32_t>(JSContext* ctx, int32_t num) {\n  return JS_NewInt32(ctx, num);\n}\ntemplate<>\ninline JSValue\njs_number_new<uint32_t>(JSContext* ctx, uint32_t num) {\n  return JS_NewUint32(ctx, num);\n}\n\ntemplate<>\ninline JSValue\njs_number_new<int64_t>(JSContext* ctx, int64_t num) {\n  return JS_NewInt64(ctx, num);\n}\n\nint js_color_read(JSContext* ctx, JSValueConst color, JSColorData<double>* out);\nint js_color_read(JSContext* ctx, JSValueConst value, JSColorData<uint8_t>* out);\n\nstatic inline int\njs_color_read(JSContext* ctx, JSValueConst value, cv::Scalar* out) {\n  JSColorData<double> color;\n  int ret;\n  if((ret = js_color_read(ctx, value, &color))) {\n    (*out)[0] = color.arr[0];\n    (*out)[1] = color.arr[1];\n    (*out)[2] = color.arr[2];\n    (*out)[3] = color.arr[3];\n  }\n  return ret;\n}\n\ntemplate<class T>\ninline JSValue\njs_color_new(JSContext* ctx, const JSColorData<T>& color) {\n  JSValue ret = JS_NewArray(ctx);\n\n  JS_SetPropertyUint32(ctx, ret, 0, js_number_new<T>(ctx, color.arr[0]));\n  JS_SetPropertyUint32(ctx, ret, 1, js_number_new<T>(ctx, color.arr[1]));\n  JS_SetPropertyUint32(ctx, ret, 2, js_number_new<T>(ctx, color.arr[2]));\n  JS_SetPropertyUint32(ctx, ret, 3, js_number_new<T>(ctx, color.arr[3]));\n  return ret;\n}\n\ntemplate<class T>\nstd::ostream&\noperator<<(std::ostream& stream, const JSColorData<T>& color) {\n  stream << \"[ \" << (int)color.arr[0] << \", \" << (int)color.arr[1] << \", \" << (int)color.arr[2] << \", \" << (int)color.arr[3]\n         << \" ]\";\n  return stream;\n}\n\nint js_ref(JSContext* ctx, const char* name, JSValueConst arg, JSValue value);\n\nstatic inline size_t\nround_to(size_t num, size_t x) {\n  num /= x;\n  num *= x;\n  return num;\n}\n\n#if CXX_STANDARD >= 20\nstatic inline std::ranges::subrange<uint8_t*>\njs_arraybuffer_range(JSContext* ctx, JSValueConst buffer) {\n  size_t size;\n  uint8_t* ptr;\n  ptr = JS_GetArrayBuffer(ctx, &size, buffer);\n  return std::ranges::subrange<uint8_t*>(ptr, ptr + size);\n}\n\ntemplate<class T>\nstatic inline std::ranges::subrange<T>\njs_arraybuffer_range(JSContext* ctx, JSValueConst buffer) {\n  typedef typename std::remove_pointer<T>::type value_type;\n  size_t size;\n  uint8_t* byte_ptr;\n  byte_ptr = JS_GetArrayBuffer(ctx, &size, buffer);\n  size = round_to(size, sizeof(value_type));\n  return std::ranges::subrange<T>(reinterpret_cast<T>(byte_ptr), reinterpret_cast<T>(byte_ptr + size));\n}\n#endif\n\ntemplate<class Ptr>\nstatic inline JSValue\njs_arraybuffer_from(JSContext* ctx, const Ptr& begin, const Ptr& end) {\n  const uint8_t* ptr;\n  size_t len;\n  ptr = reinterpret_cast<const uint8_t*>(begin);\n  len = reinterpret_cast<const uint8_t*>(end) - ptr;\n  return JS_NewArrayBufferCopy(ctx, ptr, len);\n}\n\ntemplate<class Ptr>\nstatic inline JSValue\njs_arraybuffer_from(JSContext* ctx,\n                    const Ptr& begin,\n                    const Ptr& end,\n                    JSFreeArrayBufferDataFunc& free_func,\n                    void* opaque = nullptr,\n                    bool is_shared = false) {\n  const uint8_t* ptr;\n  size_t len;\n  ptr = reinterpret_cast<const uint8_t*>(begin);\n  len = reinterpret_cast<const uint8_t*>(end) - ptr;\n  return JS_NewArrayBuffer(ctx, const_cast<uint8_t*>(ptr), len, &free_func, opaque, is_shared);\n}\n\nstatic inline JSValue\njs_global_get(JSContext* ctx, const char* prop) {\n  JSValue global_obj, ret;\n\n  global_obj = JS_GetGlobalObject(ctx);\n  ret = JS_GetPropertyStr(ctx, global_obj, prop);\n  JS_FreeValue(ctx, global_obj);\n  return ret;\n}\n\nstatic inline JSValue\njs_symbol_ctor(JSContext* ctx) {\n  return js_global_get(ctx, \"Symbol\");\n}\n\nstatic inline JSValue\njs_symbol_invoke_static(JSContext* ctx, const char* name, JSValueConst arg) {\n  JSValue ret;\n  JSAtom method_name = JS_NewAtom(ctx, name);\n  ret = JS_Invoke(ctx, js_symbol_ctor(ctx), method_name, 1, &arg);\n  JS_FreeAtom(ctx, method_name);\n  return ret;\n}\n\nstatic inline JSValue\njs_symbol_for(JSContext* ctx, const char* sym_for) {\n  JSValue key, sym;\n  JSAtom atom;\n  key = JS_NewString(ctx, sym_for);\n  sym = js_symbol_invoke_static(ctx, \"for\", key);\n  JS_FreeValue(ctx, key);\n  return sym;\n}\n\nstatic inline JSAtom\njs_symbol_for_atom(JSContext* ctx, const char* sym_for) {\n  JSValue sym = js_symbol_for(ctx, sym_for);\n  JSAtom atom = JS_ValueToAtom(ctx, sym);\n  JS_FreeValue(ctx, sym);\n  return atom;\n}\n\nstatic inline void\njs_set_inspect_method(JSContext* ctx, JSValueConst obj, JSCFunction* func) {\n  JSAtom inspect_symbol = js_symbol_for_atom(ctx, \"quickjs.inspect.custom\");\n  JS_SetProperty(ctx, obj, inspect_symbol, JS_NewCFunction(ctx, func, \"inspect\", 1));\n  JS_FreeAtom(ctx, inspect_symbol);\n}\n\nstatic inline JSValue\njs_symbol_get_static(JSContext* ctx, const char* name) {\n  JSValue symbol_ctor, ret;\n  symbol_ctor = js_symbol_ctor(ctx);\n  ret = JS_GetPropertyStr(ctx, symbol_ctor, name);\n  JS_FreeValue(ctx, symbol_ctor);\n  return ret;\n}\n\nstatic inline JSAtom\njs_symbol_atom(JSContext* ctx, const char* name) {\n  JSValue sym = js_symbol_get_static(ctx, name);\n  JSAtom ret = JS_ValueToAtom(ctx, sym);\n  JS_FreeValue(ctx, sym);\n  return ret;\n}\n\nstatic inline JSValue\njs_iterator_method(JSContext* ctx, JSValueConst obj) {\n  JSAtom atom;\n  JSValue ret = JS_UNDEFINED;\n  atom = js_symbol_atom(ctx, \"iterator\");\n  if(JS_HasProperty(ctx, obj, atom))\n    ret = JS_GetProperty(ctx, obj, atom);\n  JS_FreeAtom(ctx, atom);\n  if(!JS_IsFunction(ctx, ret)) {\n    atom = js_symbol_atom(ctx, \"asyncIterator\");\n    if(JS_HasProperty(ctx, obj, atom))\n      ret = JS_GetProperty(ctx, obj, atom);\n    JS_FreeAtom(ctx, atom);\n  }\n  return ret;\n}\n\nstatic inline BOOL\njs_is_iterable(JSContext* ctx, JSValueConst obj) {\n  JSAtom atom;\n  BOOL ret = FALSE;\n  atom = js_symbol_atom(ctx, \"iterator\");\n  if(JS_HasProperty(ctx, obj, atom))\n    ret = TRUE;\n  JS_FreeAtom(ctx, atom);\n  if(!ret) {\n    atom = js_symbol_atom(ctx, \"asyncIterator\");\n    if(JS_HasProperty(ctx, obj, atom))\n      ret = TRUE;\n    JS_FreeAtom(ctx, atom);\n  }\n  return ret;\n}\n\nstatic inline BOOL\njs_is_array_like(JSContext* ctx, JSValueConst obj) {\n  JSValue len;\n  bool ret;\n  len = JS_GetPropertyStr(ctx, obj, \"length\");\n  ret = JS_IsNumber(len);\n  JS_FreeValue(ctx, len);\n  return ret;\n}\n\nstruct ArrayBufferProps {\n  uint8_t* ptr;\n  size_t len;\n\n  ArrayBufferProps(uint8_t* _ptr, size_t _len) : ptr(_ptr), len(_len) {}\n};\n\nstatic inline BOOL\njs_is_arraybuffer(JSContext* ctx, JSValueConst obj) {\n  JSValue arraybuffer_ctor;\n  BOOL ret = FALSE;\n  arraybuffer_ctor = js_global_get(ctx, \"ArrayBuffer\");\n  if(JS_IsInstanceOf(ctx, obj, arraybuffer_ctor))\n    ret = TRUE;\n  JS_FreeValue(ctx, arraybuffer_ctor);\n  return ret;\n}\n\nstatic inline ArrayBufferProps\njs_arraybuffer_props(JSContext* ctx, JSValueConst obj) {\n  uint8_t* ptr;\n  size_t len;\n  ptr = JS_GetArrayBuffer(ctx, &len, obj);\n  return ArrayBufferProps(ptr, len);\n}\n\nstatic inline std::string\njs_function_name(JSContext* ctx, JSValueConst value) {\n  const char* str;\n  const char* name = 0;\n  std::string ret;\n  int namelen;\n  if((str = JS_ToCString(ctx, value))) {\n    if(!strncmp(str, \"function \", 9)) {\n      name = str + 9;\n      namelen = strchr(str + 9, '(') - name;\n      ret = std::string(name, namelen);\n    }\n  }\n  if(!name) {\n    if(str)\n      JS_FreeCString(ctx, str);\n    if((str = JS_ToCString(ctx, JS_GetPropertyStr(ctx, value, \"name\"))))\n      ret = std::string(str);\n  }\n  if(str)\n    JS_FreeCString(ctx, str);\n  return ret;\n}\n\nstatic inline std::string\njs_class_name(JSContext* ctx, JSValueConst value) {\n  JSValue proto, ctor;\n\n  std::string ret;\n  proto = JS_GetPrototype(ctx, value);\n  ctor = JS_GetPropertyStr(ctx, proto, \"constructor\");\n\n  ret = js_function_name(ctx, ctor);\n  JS_FreeValue(ctx, ctor);\n  JS_FreeValue(ctx, proto);\n\n  return ret;\n}\n\nstatic inline JSValue\njs_typedarray_prototype(JSContext* ctx) {\n  JSValue global_obj, u32_ctor, u32_proto, typedarray_proto;\n  global_obj = JS_GetGlobalObject(ctx);\n  u32_ctor = JS_GetPropertyStr(ctx, global_obj, \"Uint32Array\");\n  u32_proto = JS_GetPropertyStr(ctx, u32_ctor, \"prototype\");\n  typedarray_proto = JS_GetPrototype(ctx, u32_proto);\n  JS_FreeValue(ctx, global_obj);\n  JS_FreeValue(ctx, u32_ctor);\n  JS_FreeValue(ctx, u32_proto);\n  return typedarray_proto;\n}\n\nstatic inline JSValue\njs_typedarray_constructor(JSContext* ctx) {\n\n  JSValue typedarray_proto, typedarray_ctor;\n  typedarray_proto = js_typedarray_prototype(ctx);\n\n  typedarray_ctor = JS_GetPropertyStr(ctx, typedarray_proto, \"constructor\");\n  JS_FreeValue(ctx, typedarray_proto);\n  return typedarray_ctor;\n}\n\nstatic inline bool\njs_is_typedarray(JSContext* ctx, JSValueConst obj) {\n  JSValue typedarray_ctor;\n  BOOL ret;\n  typedarray_ctor = js_typedarray_constructor(ctx);\n  ret = JS_IsInstanceOf(ctx, obj, typedarray_ctor);\n  JS_FreeValue(ctx, typedarray_ctor);\n  return ret;\n\n  /*  std::string class_name = js_class_name(ctx, obj);\n    char* start = &class_name[0];\n    char* end = &class_name[class_name.size()];\n    bool is_signed = true;\n\n    if(start < end && *start == 'U') {\n      start++;\n      is_signed = false;\n      *start = toupper(*start);\n    }\n\n    char* num_start = std::find_if(start, end, &::isdigit);\n    char* num_end = std::find_if_not(num_start, end, &::isdigit);\n    char* next;\n    const auto bits = strtoul(num_start, &next, 10);\n\n    assert(next == num_end);\n    return (!strncmp(start, \"Int\", 3) || !strncmp(start, \"Float\", 5)) && !strncmp(num_end, \"Array\",\n    5) && (bits == 64 || bits == 32 || bits == 16 || bits == 8);*/\n}\n\nstatic inline BOOL\n  (JSContext* ctx, JSValueConst obj) {\n  return JS_IsArray(ctx, obj) || js_is_typedarray(ctx, obj);\n}\n\nstatic inline JSValue\njs_iterator_new(JSContext* ctx, JSValueConst obj) {\n  JSValue fn, ret;\n  fn = js_iterator_method(ctx, obj);\n\n  ret = JS_Call(ctx, fn, obj, 0, 0);\n  JS_FreeValue(ctx, fn);\n  return ret;\n}\n\nstatic inline IteratorValue\njs_iterator_next(JSContext* ctx, JSValueConst obj) {\n  JSValue fn, result, done;\n  IteratorValue ret;\n\n  fn = JS_GetPropertyStr(ctx, obj, \"next\");\n\n  result = JS_Call(ctx, fn, obj, 0, 0);\n  JS_FreeValue(ctx, fn);\n\n  done = JS_GetPropertyStr(ctx, result, \"done\");\n  ret.value = JS_GetPropertyStr(ctx, result, \"value\");\n  JS_FreeValue(ctx, result);\n\n  ret.done = JS_ToBool(ctx, done);\n  JS_FreeValue(ctx, done);\n\n  return ret;\n}\n\ntemplate<class T, typename std::enable_if<std::is_integral<T>::value || std::is_floating_point<T>::value, T>::type* = nullptr>\nstatic inline int\njs_value_to(JSContext* ctx, JSValueConst value, T& out) {\n  return js_number_read(ctx, value, &out);\n}\n\nstatic inline int\njs_value_to(JSContext* ctx, JSValueConst value, bool& out) {\n  out = JS_ToBool(ctx, value);\n  return 1;\n}\n\nstatic inline int\njs_value_to(JSContext* ctx, JSValueConst value, std::string& out) {\n  const char* str;\n  size_t len;\n  str = JS_ToCStringLen(ctx, &len, value);\n  out.clear();\n  out.assign(str, len);\n  JS_FreeCString(ctx, str);\n  return 1;\n}\n\ntemplate<class T, typename std::enable_if<std::is_integral<T>::value || std::is_floating_point<T>::value, T>::type* = nullptr>\nstatic inline JSValue\njs_value_from(JSContext* ctx, const T& in) {\n  return js_number_new<T>(ctx, in);\n}\n\nstatic inline JSValue\njs_value_from(JSContext* ctx, bool in) {\n  return JS_NewBool(ctx, in);\n}\n\nstatic inline JSValue\njs_value_from(JSContext* ctx, const std::string& in) {\n  return JS_NewStringLen(ctx, in.data(), in.size());\n}\n\ntemplate<class T, int N>\nstatic inline JSValue\njs_value_from(JSContext* ctx, const cv::Vec<T, N>& in) {\n  return js_array_from(ctx, begin(in), end(in));\n}\n\ntemplate<class T> class js_iterable {\npublic:\n  static int64_t\n  to_vector(JSContext* ctx, JSValueConst arg, std::vector<T>& out) {\n    IteratorValue item;\n    JSValueConst iter = js_iterator_new(ctx, arg);\n    out.clear();\n    for(;;) {\n      T value;\n      item = js_iterator_next(ctx, iter);\n      if(item.done)\n        break;\n      js_value_to(ctx, item.value, value);\n      out.push_back(value);\n      JS_FreeValue(ctx, item.value);\n    }\n    JS_FreeValue(ctx, iter);\n    return out.size();\n  }\n\n  template<size_t N>\n  static int64_t\n  to_array(JSContext* ctx, JSValueConst arg, std::array<T, N>& out) {\n    int64_t i = 0;\n    IteratorValue item;\n    JSValue iter = js_iterator_new(ctx, arg);\n    for(i = 0; i < N; i++) {\n      T value;\n      item = js_iterator_next(ctx, iter);\n      if(item.done)\n        break;\n      js_value_to(ctx, item.value, value);\n      out[i] = value;\n      JS_FreeValue(ctx, item.value);\n    }\n    JS_FreeValue(ctx, iter);\n    return i;\n  }\n\n  static int64_t\n  to_scalar(JSContext* ctx, JSValueConst arg, cv::Scalar_<T>& out) {\n    return to_array(ctx, arg, *reinterpret_cast<std::array<T, 4>*>(&out));\n  }\n};\n\ntemplate<class T>\nstatic inline int64_t\njs_iterable_to(JSContext* ctx, JSValueConst arr, std::vector<T>& out) {\n  return js_iterable<T>::to_vector(ctx, arr, out);\n}\n\ntemplate<class T, size_t N>\nstatic inline int64_t\njs_iterable_to(JSContext* ctx, JSValueConst arr, std::array<T, N>& out) {\n  typedef js_iterable<T> array_type;\n  return array_type::to_array(ctx, arr, out);\n}\n\ntemplate<class T>\nstatic inline int64_t\njs_iterable_to(JSContext* ctx, JSValueConst arr, cv::Scalar_<T>& out) {\n  return js_iterable<T>::to_scalar(ctx, arr, out);\n}\n\n#endif\n",
			"file": "jsbindings.hpp",
			"file_size": 19807,
			"file_write_time": 132653228212607936,
			"settings":
			{
				"buffer_size": 19798,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					27,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAACi0AAAAAAAAYLQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"paste",
					null,
					"AQAAAEMAAAAAAAAAYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwAAAAAAAABDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"left_delete",
					null,
					"AQAAAEwAAAAAAAAATAAAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAATQAAAAAAAABNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAEwAAAAAAAAATQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAAAAAAAAABMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"left_delete",
					null,
					"AQAAAF4AAAAAAAAAXgAAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAAXwAAAAAAAABfAAAAAAAAAP///////+9/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAF4AAAAAAAAAXwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgAAAAAAAABeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AgAAAOQ+AAAAAAAA5j4AAAAAAAAAAAAA5j4AAAAAAADmPgAAAAAAAAsAAABqc19pc19hcnJheQ",
					"AQAAAAAAAAABAAAA5D4AAAAAAADvPgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "LICENSE",
			"settings":
			{
				"buffer_size": 1067,
				"line_ending": "Unix"
			}
		},
		{
			"file": "js_array.hpp",
			"settings":
			{
				"buffer_size": 17595,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					51,
					1,
					"insert",
					{
						"characters": "JSPropertyEnum*"
					},
					"EAAAALtBAAAAAAAAvEEAAAAAAAAAAAAAvEEAAAAAAAC8QQAAAAAAAAQAAABhdXRvvEEAAAAAAAC9QQAAAAAAAAAAAAC9QQAAAAAAAL5BAAAAAAAAAAAAAL5BAAAAAAAAv0EAAAAAAAAAAAAAv0EAAAAAAADAQQAAAAAAAAAAAADAQQAAAAAAAMFBAAAAAAAAAAAAAMFBAAAAAAAAwkEAAAAAAAAAAAAAwkEAAAAAAADDQQAAAAAAAAAAAADDQQAAAAAAAMRBAAAAAAAAAAAAAMRBAAAAAAAAxUEAAAAAAAAAAAAAxUEAAAAAAADGQQAAAAAAAAAAAADGQQAAAAAAAMdBAAAAAAAAAAAAAMdBAAAAAAAAyEEAAAAAAAAAAAAAyEEAAAAAAADJQQAAAAAAAAAAAADJQQAAAAAAAMpBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAu0EAAAAAAAC/QQAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAKVBAAAAAAAApkEAAAAAAAAAAAAApkEAAAAAAACmQQAAAAAAABIAAAAgICAganNydCBqcyhjdHgpOwo",
					"AQAAAAAAAAABAAAApUEAAAAAAAC3QQAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAL9BAAAAAAAAwEEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAv0EAAAAAAAC/QQAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert_completion",
					{
						"completion": "props",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "props"
					},
					"AQAAAMBBAAAAAAAAxUEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwEEAAAAAAADAQQAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAMVBAAAAAAAAxkEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxUEAAAAAAADFQQAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					6,
					"left_delete",
					null,
					"BgAAAMVBAAAAAAAAxUEAAAAAAAABAAAAc8RBAAAAAAAAxEEAAAAAAAABAAAAc8NBAAAAAAAAw0EAAAAAAAABAAAAcMJBAAAAAAAAwkEAAAAAAAABAAAAb8FBAAAAAAAAwUEAAAAAAAABAAAAcsBBAAAAAAAAwEEAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAxkEAAAAAAADGQQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "\nsie"
					},
					"BQAAAMBBAAAAAAAAwUEAAAAAAAAAAAAAwUEAAAAAAADGQQAAAAAAAAAAAADGQQAAAAAAAMdBAAAAAAAAAAAAAMdBAAAAAAAAyEEAAAAAAAAAAAAAyEEAAAAAAADJQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwEEAAAAAAADAQQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"left_delete",
					null,
					"AQAAAMhBAAAAAAAAyEEAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAyUEAAAAAAADJQQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "ze_t"
					},
					"BAAAAMhBAAAAAAAAyUEAAAAAAAAAAAAAyUEAAAAAAADKQQAAAAAAAAAAAADKQQAAAAAAAMtBAAAAAAAAAAAAAMtBAAAAAAAAzEEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyEEAAAAAAADIQQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " plen;"
					},
					"BgAAAMxBAAAAAAAAzUEAAAAAAAAAAAAAzUEAAAAAAADOQQAAAAAAAAAAAADOQQAAAAAAAM9BAAAAAAAAAAAAAM9BAAAAAAAA0EEAAAAAAAAAAAAA0EEAAAAAAADRQQAAAAAAAAAAAADRQQAAAAAAANJBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzEEAAAAAAADMQQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert_completion",
					{
						"completion": "i",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "i"
					},
					"AQAAANJBAAAAAAAA00EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0kEAAAAAAADSQQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANNBAAAAAAAA1EEAAAAAAAAAAAAA1EEAAAAAAADZQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA00EAAAAAAADTQQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					5,
					"left_delete",
					null,
					"BQAAANhBAAAAAAAA2EEAAAAAAAABAAAAINZBAAAAAAAA1kEAAAAAAAACAAAAICDUQQAAAAAAANRBAAAAAAAAAgAAACAg00EAAAAAAADTQQAAAAAAAAEAAAAK0kEAAAAAAADSQQAAAAAAAAEAAABp",
					"AQAAAAAAAAABAAAA2UEAAAAAAADZQQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAANJBAAAAAAAA00EAAAAAAAAAAAAA00EAAAAAAADYQQAAAAAAAAAAAADYQQAAAAAAANlBAAAAAAAAAAAAANlBAAAAAAAA3kEAAAAAAAAAAAAA00EAAAAAAADTQQAAAAAAAAUAAAAgICAgINlBAAAAAAAA2kEAAAAAAAAAAAAA2kEAAAAAAADfQQAAAAAAAAAAAADUQQAAAAAAANRBAAAAAAAABQAAACAgICAg",
					"AQAAAAAAAAABAAAA0kEAAAAAAADSQQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "JS_GetOwnProper"
					},
					"DwAAANRBAAAAAAAA1UEAAAAAAAAAAAAA1UEAAAAAAADWQQAAAAAAAAAAAADWQQAAAAAAANdBAAAAAAAAAAAAANdBAAAAAAAA2EEAAAAAAAAAAAAA2EEAAAAAAADZQQAAAAAAAAAAAADZQQAAAAAAANpBAAAAAAAAAAAAANpBAAAAAAAA20EAAAAAAAAAAAAA20EAAAAAAADcQQAAAAAAAAAAAADcQQAAAAAAAN1BAAAAAAAAAAAAAN1BAAAAAAAA3kEAAAAAAAAAAAAA3kEAAAAAAADfQQAAAAAAAAAAAADfQQAAAAAAAOBBAAAAAAAAAAAAAOBBAAAAAAAA4UEAAAAAAAAAAAAA4UEAAAAAAADiQQAAAAAAAAAAAADiQQAAAAAAAONBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1EEAAAAAAADUQQAAAAAAAAAAAAAAAElA"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "tyNames"
					},
					"BwAAAONBAAAAAAAA5EEAAAAAAAAAAAAA5EEAAAAAAADlQQAAAAAAAAAAAADlQQAAAAAAAOZBAAAAAAAAAAAAAOZBAAAAAAAA50EAAAAAAAAAAAAA50EAAAAAAADoQQAAAAAAAAAAAADoQQAAAAAAAOlBAAAAAAAAAAAAAOlBAAAAAAAA6kEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA40EAAAAAAADjQQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOpBAAAAAAAA7EEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6kEAAAAAAADqQQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAOtBAAAAAAAA7EEAAAAAAAAAAAAA7EEAAAAAAADtQQAAAAAAAAAAAADtQQAAAAAAAO5BAAAAAAAAAAAAAO5BAAAAAAAA70EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA60EAAAAAAADrQQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": " obj,"
					},
					"BQAAAO9BAAAAAAAA8EEAAAAAAAAAAAAA8EEAAAAAAADxQQAAAAAAAAAAAADxQQAAAAAAAPJBAAAAAAAAAAAAAPJBAAAAAAAA80EAAAAAAAAAAAAA80EAAAAAAAD0QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA70EAAAAAAADvQQAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPRBAAAAAAAA9UEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9EEAAAAAAAD0QQAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "&names,"
					},
					"BwAAAPBBAAAAAAAA8UEAAAAAAAAAAAAA8UEAAAAAAADyQQAAAAAAAAAAAADyQQAAAAAAAPNBAAAAAAAAAAAAAPNBAAAAAAAA9EEAAAAAAAAAAAAA9EEAAAAAAAD1QQAAAAAAAAAAAAD1QQAAAAAAAPZBAAAAAAAAAAAAAPZBAAAAAAAA90EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8EEAAAAAAADwQQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " /p"
					},
					"AwAAAPdBAAAAAAAA+EEAAAAAAAAAAAAA+EEAAAAAAAD5QQAAAAAAAAAAAAD5QQAAAAAAAPpBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA90EAAAAAAAD3QQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					2,
					"left_delete",
					null,
					"AgAAAPlBAAAAAAAA+UEAAAAAAAABAAAAcPhBAAAAAAAA+EEAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAA+kEAAAAAAAD6QQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "&plen,"
					},
					"BgAAAPhBAAAAAAAA+UEAAAAAAAAAAAAA+UEAAAAAAAD6QQAAAAAAAAAAAAD6QQAAAAAAAPtBAAAAAAAAAAAAAPtBAAAAAAAA/EEAAAAAAAAAAAAA/EEAAAAAAAD9QQAAAAAAAAAAAAD9QQAAAAAAAP5BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+EEAAAAAAAD4QQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP5BAAAAAAAA/0EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/kEAAAAAAAD+QQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"paste",
					null,
					"AQAAAARCAAAAAAAAFEIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABEIAAAAAAAAEQgAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABVCAAAAAAAAFkIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFUIAAAAAAAAVQgAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABZCAAAAAAAAF0IAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFkIAAAAAAAAWQgAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABhCAAAAAAAAGUIAAAAAAAAAAAAAGUIAAAAAAAAZQgAAAAAAACAAAAAgICAgICA9IGpzLnByb3BlcnR5X25hbWVzKG9iaik7Cg",
					"AQAAAAAAAAABAAAAGEIAAAAAAAA4QgAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"paste",
					null,
					"AgAAAC1CAAAAAAAARkIAAAAAAAAAAAAARkIAAAAAAABGQgAAAAAAAAUAAABuYW1lcw",
					"AQAAAAAAAAABAAAALUIAAAAAAAAyQgAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"paste",
					null,
					"AgAAAERCAAAAAAAAUkIAAAAAAAAAAAAAUkIAAAAAAABSQgAAAAAAAAEAAABU",
					"AQAAAAAAAAABAAAAREIAAAAAAABFQgAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFNCAAAAAAAAVUIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAU0IAAAAAAABTQgAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAFRCAAAAAAAAVUIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVEIAAAAAAABUQgAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"left_delete",
					null,
					"AQAAAFRCAAAAAAAAVEIAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAVUIAAAAAAABVQgAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "names,"
					},
					"BgAAAFRCAAAAAAAAVUIAAAAAAAAAAAAAVUIAAAAAAABWQgAAAAAAAAAAAABWQgAAAAAAAFdCAAAAAAAAAAAAAFdCAAAAAAAAWEIAAAAAAAAAAAAAWEIAAAAAAABZQgAAAAAAAAAAAABZQgAAAAAAAFpCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVEIAAAAAAABUQgAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": " names+plen"
					},
					"CwAAAFpCAAAAAAAAW0IAAAAAAAAAAAAAW0IAAAAAAABcQgAAAAAAAAAAAABcQgAAAAAAAF1CAAAAAAAAAAAAAF1CAAAAAAAAXkIAAAAAAAAAAAAAXkIAAAAAAABfQgAAAAAAAAAAAABfQgAAAAAAAGBCAAAAAAAAAAAAAGBCAAAAAAAAYUIAAAAAAAAAAAAAYUIAAAAAAABiQgAAAAAAAAAAAABiQgAAAAAAAGNCAAAAAAAAAAAAAGNCAAAAAAAAZEIAAAAAAAAAAAAAZEIAAAAAAABlQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWkIAAAAAAABaQgAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": "JS_GetProperty"
					},
					"DwAAAIJCAAAAAAAAg0IAAAAAAAAAAAAAg0IAAAAAAACDQgAAAAAAAA8AAABqcy5nZXRfcHJvcGVydHmDQgAAAAAAAIRCAAAAAAAAAAAAAIRCAAAAAAAAhUIAAAAAAAAAAAAAhUIAAAAAAACGQgAAAAAAAAAAAACGQgAAAAAAAIdCAAAAAAAAAAAAAIdCAAAAAAAAiEIAAAAAAAAAAAAAiEIAAAAAAACJQgAAAAAAAAAAAACJQgAAAAAAAIpCAAAAAAAAAAAAAIpCAAAAAAAAi0IAAAAAAAAAAAAAi0IAAAAAAACMQgAAAAAAAAAAAACMQgAAAAAAAI1CAAAAAAAAAAAAAI1CAAAAAAAAjkIAAAAAAAAAAAAAjkIAAAAAAACPQgAAAAAAAAAAAACPQgAAAAAAAJBCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgkIAAAAAAACRQgAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAJFCAAAAAAAAkkIAAAAAAAAAAAAAkkIAAAAAAACTQgAAAAAAAAAAAACTQgAAAAAAAJRCAAAAAAAAAAAAAJRCAAAAAAAAlUIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkUIAAAAAAACRQgAAAAAAAAAAAAAAAPC/"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJVCAAAAAAAAlkIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlUIAAAAAAACVQgAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": ".atom"
					},
					"BQAAAJ9CAAAAAAAAoEIAAAAAAAAAAAAAoEIAAAAAAAChQgAAAAAAAAAAAAChQgAAAAAAAKJCAAAAAAAAAAAAAKJCAAAAAAAAo0IAAAAAAAAAAAAAo0IAAAAAAACkQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAn0IAAAAAAACfQgAAAAAAAAAAAAAAAPC/"
				],
				[
					231,
					1,
					"left_delete",
					null,
					"AQAAAHhCAAAAAAAAeEIAAAAAAAAKAAAAIGpzLnRvPFQ+KA",
					"AQAAAAAAAAABAAAAeEIAAAAAAACCQgAAAAAAAAAAAAAAAPC/"
				],
				[
					236,
					1,
					"left_delete",
					null,
					"AQAAAJtCAAAAAAAAm0IAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAnEIAAAAAAACcQgAAAAAAAAAAAAAAAPC/"
				],
				[
					238,
					1,
					"left_delete",
					null,
					"AQAAAG5CAAAAAAAAbkIAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAcEIAAAAAAABwQgAAAAAAAAAAAAAAAE5A"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": "JSValue"
					},
					"CAAAAGxCAAAAAAAAbUIAAAAAAAAAAAAAbUIAAAAAAABtQgAAAAAAAAgAAAAgIFQgcHJvcG1CAAAAAAAAbkIAAAAAAAAAAAAAbkIAAAAAAABvQgAAAAAAAAAAAABvQgAAAAAAAHBCAAAAAAAAAAAAAHBCAAAAAAAAcUIAAAAAAAAAAAAAcUIAAAAAAAByQgAAAAAAAAAAAAByQgAAAAAAAHNCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdEIAAAAAAABsQgAAAAAAAAAAAAAAAPC/"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": " prop"
					},
					"BQAAAHNCAAAAAAAAdEIAAAAAAAAAAAAAdEIAAAAAAAB1QgAAAAAAAAAAAAB1QgAAAAAAAHZCAAAAAAAAAAAAAHZCAAAAAAAAd0IAAAAAAAAAAAAAd0IAAAAAAAB4QgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAc0IAAAAAAABzQgAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJ5CAAAAAAAAn0IAAAAAAAAAAAAAn0IAAAAAAAChQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnkIAAAAAAACeQgAAAAAAAP///////+9/"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": "js_value_to"
					},
					"CwAAAKFCAAAAAAAAokIAAAAAAAAAAAAAokIAAAAAAACjQgAAAAAAAAAAAACjQgAAAAAAAKRCAAAAAAAAAAAAAKRCAAAAAAAApUIAAAAAAAAAAAAApUIAAAAAAACmQgAAAAAAAAAAAACmQgAAAAAAAKdCAAAAAAAAAAAAAKdCAAAAAAAAqEIAAAAAAAAAAAAAqEIAAAAAAACpQgAAAAAAAAAAAACpQgAAAAAAAKpCAAAAAAAAAAAAAKpCAAAAAAAAq0IAAAAAAAAAAAAAq0IAAAAAAACsQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoUIAAAAAAAChQgAAAAAAAAAAAAAAAPC/"
				],
				[
					273,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKxCAAAAAAAArkIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArEIAAAAAAACsQgAAAAAAAAAAAAAAAPC/"
				],
				[
					274,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAK1CAAAAAAAArkIAAAAAAAAAAAAArkIAAAAAAACvQgAAAAAAAAAAAACvQgAAAAAAALBCAAAAAAAAAAAAALBCAAAAAAAAsUIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArUIAAAAAAACtQgAAAAAAAAAAAAAAAPC/"
				],
				[
					275,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALFCAAAAAAAAskIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsUIAAAAAAACxQgAAAAAAAAAAAAAAAPC/"
				],
				[
					276,
					1,
					"insert",
					{
						"characters": "prop,"
					},
					"BQAAALJCAAAAAAAAs0IAAAAAAAAAAAAAs0IAAAAAAAC0QgAAAAAAAAAAAAC0QgAAAAAAALVCAAAAAAAAAAAAALVCAAAAAAAAtkIAAAAAAAAAAAAAtkIAAAAAAAC3QgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAskIAAAAAAACyQgAAAAAAAAAAAAAAAPC/"
				],
				[
					277,
					1,
					"insert",
					{
						"characters": " out"
					},
					"BAAAALdCAAAAAAAAuEIAAAAAAAAAAAAAuEIAAAAAAAC5QgAAAAAAAAAAAAC5QgAAAAAAALpCAAAAAAAAAAAAALpCAAAAAAAAu0IAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAt0IAAAAAAAC3QgAAAAAAAAAAAAAAAPC/"
				],
				[
					278,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAALtCAAAAAAAAvUIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAu0IAAAAAAAC7QgAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					1,
					"insert",
					{
						"characters": "name"
					},
					"BAAAALxCAAAAAAAAvUIAAAAAAAAAAAAAvUIAAAAAAAC+QgAAAAAAAAAAAAC+QgAAAAAAAL9CAAAAAAAAAAAAAL9CAAAAAAAAwEIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvEIAAAAAAAC8QgAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMJCAAAAAAAAw0IAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwkIAAAAAAADCQgAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMNCAAAAAAAAxEIAAAAAAAAAAAAAxEIAAAAAAADGQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAw0IAAAAAAADDQgAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					1,
					"insert",
					{
						"characters": "value"
					},
					"BwAAAHRCAAAAAAAAdUIAAAAAAAAAAAAAdUIAAAAAAAB1QgAAAAAAAAQAAABwcm9wwUIAAAAAAADBQgAAAAAAAAIAAAAgIHVCAAAAAAAAdkIAAAAAAAAAAAAAdkIAAAAAAAB3QgAAAAAAAAAAAAB3QgAAAAAAAHhCAAAAAAAAAAAAAHhCAAAAAAAAeUIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdEIAAAAAAAB4QgAAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"insert",
					{
						"characters": "\nT"
					},
					"AwAAAJ9CAAAAAAAAoEIAAAAAAAAAAAAAoEIAAAAAAACiQgAAAAAAAAAAAACiQgAAAAAAAKNCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAn0IAAAAAAACfQgAAAAAAAAAAAAAAAPC/"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": " prop"
					},
					"BQAAAKNCAAAAAAAApEIAAAAAAAAAAAAApEIAAAAAAAClQgAAAAAAAAAAAAClQgAAAAAAAKZCAAAAAAAAAAAAAKZCAAAAAAAAp0IAAAAAAAAAAAAAp0IAAAAAAACoQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAo0IAAAAAAACjQgAAAAAAAAAAAAAAAPC/"
				],
				[
					299,
					1,
					"insert",
					{
						"characters": " ;"
					},
					"AgAAAKhCAAAAAAAAqUIAAAAAAAAAAAAAqUIAAAAAAACqQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqEIAAAAAAACoQgAAAAAAAAAAAAAAAPC/"
				],
				[
					300,
					2,
					"left_delete",
					null,
					"AgAAAKlCAAAAAAAAqUIAAAAAAAABAAAAO6hCAAAAAAAAqEIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAqkIAAAAAAACqQgAAAAAAAAAAAAAAAPC/"
				],
				[
					301,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKhCAAAAAAAAqUIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqEIAAAAAAACoQgAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					8,
					"left_delete",
					null,
					"CAAAAMNCAAAAAAAAw0IAAAAAAAAJAAAAb3V0W25hbWVdwkIAAAAAAADCQgAAAAAAAAEAAAAgwUIAAAAAAADBQgAAAAAAAAEAAAAswEIAAAAAAADAQgAAAAAAAAEAAABwv0IAAAAAAAC/QgAAAAAAAAEAAABvvkIAAAAAAAC+QgAAAAAAAAEAAAByvUIAAAAAAAC9QgAAAAAAAAEAAABwvEIAAAAAAAC8QgAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAAw0IAAAAAAADMQgAAAAAAAAAAAAAAAPC/"
				],
				[
					306,
					1,
					"insert",
					{
						"characters": "value,prop"
					},
					"CgAAALxCAAAAAAAAvUIAAAAAAAAAAAAAvUIAAAAAAAC+QgAAAAAAAAAAAAC+QgAAAAAAAL9CAAAAAAAAAAAAAL9CAAAAAAAAwEIAAAAAAAAAAAAAwEIAAAAAAADBQgAAAAAAAAAAAADBQgAAAAAAAMJCAAAAAAAAAAAAAMJCAAAAAAAAw0IAAAAAAAAAAAAAw0IAAAAAAADEQgAAAAAAAAAAAADEQgAAAAAAAMVCAAAAAAAAAAAAAMVCAAAAAAAAxkIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvEIAAAAAAAC8QgAAAAAAAAAAAAAAAPC/"
				],
				[
					313,
					1,
					"left_delete",
					null,
					"AQAAAMhCAAAAAAAAyEIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAyUIAAAAAAADJQgAAAAAAAAAAAAAAAPC/"
				],
				[
					353,
					1,
					"insert",
					{
						"characters": "JS_DefineProperty"
					},
					"EgAAAPRDAAAAAAAA9UMAAAAAAAAAAAAA9UMAAAAAAAD1QwAAAAAAAA8AAABqcy5zZXRfcHJvcGVydHn1QwAAAAAAAPZDAAAAAAAAAAAAAPZDAAAAAAAA90MAAAAAAAAAAAAA90MAAAAAAAD4QwAAAAAAAAAAAAD4QwAAAAAAAPlDAAAAAAAAAAAAAPlDAAAAAAAA+kMAAAAAAAAAAAAA+kMAAAAAAAD7QwAAAAAAAAAAAAD7QwAAAAAAAPxDAAAAAAAAAAAAAPxDAAAAAAAA/UMAAAAAAAAAAAAA/UMAAAAAAAD+QwAAAAAAAAAAAAD+QwAAAAAAAP9DAAAAAAAAAAAAAP9DAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAABRAAAAAAAAAAAAAABRAAAAAAAAAJEAAAAAAAAAAAAAAJEAAAAAAAAA0QAAAAAAAAAAAAAA0QAAAAAAAAERAAAAAAAAAAAAAAERAAAAAAAAAVEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9EMAAAAAAAADRAAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					1,
					"insert",
					{
						"characters": "cf"
					},
					"AgAAAAZEAAAAAAAAB0QAAAAAAAAAAAAAB0QAAAAAAAAIRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABkQAAAAAAAAGRAAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"left_delete",
					null,
					"AQAAAAdEAAAAAAAAB0QAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAACEQAAAAAAAAIRAAAAAAAAAAAAAAAAPC/"
				],
				[
					357,
					1,
					"insert",
					{
						"characters": "tx,"
					},
					"AwAAAAdEAAAAAAAACEQAAAAAAAAAAAAACEQAAAAAAAAJRAAAAAAAAAAAAAAJRAAAAAAAAApEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAB0QAAAAAAAAHRAAAAAAAAAAAAAAAAPC/"
				],
				[
					358,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAApEAAAAAAAAC0QAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACkQAAAAAAAAKRAAAAAAAAAAAAAAAAPC/"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": "Str"
					},
					"AwAAAAVEAAAAAAAABkQAAAAAAAAAAAAABkQAAAAAAAAHRAAAAAAAAAAAAAAHRAAAAAAAAAhEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABUQAAAAAAAAFRAAAAAAAAAAAAAAAAPC/"
				],
				[
					383,
					1,
					"insert",
					{
						"characters": ".c_str()"
					},
					"CAAAAB5EAAAAAAAAH0QAAAAAAAAAAAAAH0QAAAAAAAAgRAAAAAAAAAAAAAAgRAAAAAAAACFEAAAAAAAAAAAAACFEAAAAAAAAIkQAAAAAAAAAAAAAIkQAAAAAAAAjRAAAAAAAAAAAAAAjRAAAAAAAACREAAAAAAAAAAAAACREAAAAAAAAJUQAAAAAAAAAAAAAJUQAAAAAAAAmRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHkQAAAAAAAAeRAAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					1,
					"insert",
					{
						"characters": "\nT"
					},
					"AwAAANNDAAAAAAAA1EMAAAAAAAAAAAAA1EMAAAAAAADYQwAAAAAAAAAAAADYQwAAAAAAANlDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA00MAAAAAAADTQwAAAAAAAAAAAAAAAPC/"
				],
				[
					403,
					1,
					"insert",
					{
						"characters": " v"
					},
					"AgAAANlDAAAAAAAA2kMAAAAAAAAAAAAA2kMAAAAAAADbQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2UMAAAAAAADZQwAAAAAAAAAAAAAAAPC/"
				],
				[
					404,
					1,
					"left_delete",
					null,
					"AQAAANpDAAAAAAAA2kMAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAA20MAAAAAAADbQwAAAAAAAAAAAAAAAPC/"
				],
				[
					405,
					1,
					"insert",
					{
						"characters": "prop;"
					},
					"BQAAANpDAAAAAAAA20MAAAAAAAAAAAAA20MAAAAAAADcQwAAAAAAAAAAAADcQwAAAAAAAN1DAAAAAAAAAAAAAN1DAAAAAAAA3kMAAAAAAAAAAAAA3kMAAAAAAADfQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2kMAAAAAAADaQwAAAAAAAAAAAAAAAPC/"
				],
				[
					409,
					1,
					"insert",
					{
						"characters": "\n\nj"
					},
					"BgAAAN9DAAAAAAAA4EMAAAAAAAAAAAAA4EMAAAAAAADkQwAAAAAAAAAAAADkQwAAAAAAAOVDAAAAAAAAAAAAAOVDAAAAAAAA6UMAAAAAAAAAAAAA4EMAAAAAAADgQwAAAAAAAAQAAAAgICAg5UMAAAAAAADmQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA30MAAAAAAADfQwAAAAAAAAAAAAAAgHZA"
				],
				[
					410,
					2,
					"left_delete",
					null,
					"AgAAAOVDAAAAAAAA5UMAAAAAAAABAAAAauNDAAAAAAAA40MAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAA5kMAAAAAAADmQwAAAAAAAAAAAAAAAPC/"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAAREAAAAAAAABUQAAAAAAAAAAAAA4UMAAAAAAADhQwAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAABEQAAAAAAAAERAAAAAAAAAAAAAAAAPC/"
				],
				[
					414,
					1,
					"left_delete",
					null,
					"AQAAAAJEAAAAAAAAAkQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAA0QAAAAAAAADRAAAAAAAAAAAAAAAAPC/"
				],
				[
					415,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAAJEAAAAAAAAA0QAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAkQAAAAAAAACRAAAAAAAAAAAAAAAAPC/"
				],
				[
					416,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAANEAAAAAAAABEQAAAAAAAAAAAAABEQAAAAAAAAIRAAAAAAAAAAAAAAERAAAAAAAAAREAAAAAAAABAAAACAgICAERAAAAAAAAApEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAA0QAAAAAAAADRAAAAAAAAAAAAAAAAPC/"
				],
				[
					418,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAGlEAAAAAAAAakQAAAAAAAAAAAAAakQAAAAAAABwRAAAAAAAAAAAAABwRAAAAAAAAHFEAAAAAAAAAAAAAGpEAAAAAAAAakQAAAAAAAAGAAAAICAgICAgakQAAAAAAABuRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaUQAAAAAAABpRAAAAAAAAP///////+9/"
				],
				[
					424,
					1,
					"cut",
					null,
					"AQAAANRDAAAAAAAA1EMAAAAAAAAMAAAAICAgIFQgcHJvcDsK",
					"AQAAAAAAAAABAAAA4EMAAAAAAADUQwAAAAAAAAAAAAAAAPC/"
				],
				[
					427,
					1,
					"paste",
					null,
					"AQAAAPtDAAAAAAAAB0QAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+0MAAAAAAAD7QwAAAAAAAAAAAAAAAPC/"
				],
				[
					432,
					1,
					"insert",
					{
						"characters": "\njs_value_to"
					},
					"DQAAAAZEAAAAAAAAB0QAAAAAAAAAAAAAB0QAAAAAAAAORAAAAAAAAAAAAAAORAAAAAAAAA9EAAAAAAAAAAAAAA9EAAAAAAAAEEQAAAAAAAAAAAAAEEQAAAAAAAARRAAAAAAAAAAAAAARRAAAAAAAABJEAAAAAAAAAAAAABJEAAAAAAAAE0QAAAAAAAAAAAAAE0QAAAAAAAAURAAAAAAAAAAAAAAURAAAAAAAABVEAAAAAAAAAAAAABVEAAAAAAAAFkQAAAAAAAAAAAAAFkQAAAAAAAAXRAAAAAAAAAAAAAAXRAAAAAAAABhEAAAAAAAAAAAAABhEAAAAAAAAGUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABkQAAAAAAAAGRAAAAAAAAAAAAAAAAPC/"
				],
				[
					433,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABlEAAAAAAAAG0QAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGUQAAAAAAAAZRAAAAAAAAAAAAAAAAPC/"
				],
				[
					434,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAABpEAAAAAAAAG0QAAAAAAAAAAAAAG0QAAAAAAAAcRAAAAAAAAAAAAAAcRAAAAAAAAB1EAAAAAAAAAAAAAB1EAAAAAAAAHkQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGkQAAAAAAAAaRAAAAAAAAAAAAAAAAPC/"
				],
				[
					435,
					1,
					"insert",
					{
						"characters": "  entry.secont"
					},
					"DgAAAB5EAAAAAAAAH0QAAAAAAAAAAAAAH0QAAAAAAAAgRAAAAAAAAAAAAAAgRAAAAAAAACFEAAAAAAAAAAAAACFEAAAAAAAAIkQAAAAAAAAAAAAAIkQAAAAAAAAjRAAAAAAAAAAAAAAjRAAAAAAAACREAAAAAAAAAAAAACREAAAAAAAAJUQAAAAAAAAAAAAAJUQAAAAAAAAmRAAAAAAAAAAAAAAmRAAAAAAAACdEAAAAAAAAAAAAACdEAAAAAAAAKEQAAAAAAAAAAAAAKEQAAAAAAAApRAAAAAAAAAAAAAApRAAAAAAAACpEAAAAAAAAAAAAACpEAAAAAAAAK0QAAAAAAAAAAAAAK0QAAAAAAAAsRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHkQAAAAAAAAeRAAAAAAAAAAAAAAAAPC/"
				],
				[
					436,
					1,
					"left_delete",
					null,
					"AQAAACtEAAAAAAAAK0QAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAALEQAAAAAAAAsRAAAAAAAAAAAAAAAAPC/"
				],
				[
					437,
					1,
					"insert",
					{
						"characters": "d,"
					},
					"AgAAACtEAAAAAAAALEQAAAAAAAAAAAAALEQAAAAAAAAtRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAK0QAAAAAAAArRAAAAAAAAAAAAAAAAPC/"
				],
				[
					438,
					1,
					"insert",
					{
						"characters": " prop"
					},
					"BQAAAC1EAAAAAAAALkQAAAAAAAAAAAAALkQAAAAAAAAvRAAAAAAAAAAAAAAvRAAAAAAAADBEAAAAAAAAAAAAADBEAAAAAAAAMUQAAAAAAAAAAAAAMUQAAAAAAAAyRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALUQAAAAAAAAtRAAAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADNEAAAAAAAANEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAM0QAAAAAAAAzRAAAAAAAAAAAAAAAAPC/"
				],
				[
					443,
					1,
					"insert",
					{
						"characters": "rop"
					},
					"BAAAAGxEAAAAAAAAbUQAAAAAAAAAAAAAbUQAAAAAAABtRAAAAAAAABoAAABqcy5jcmVhdGU8VD4oZW50cnkuc2Vjb25kKW1EAAAAAAAAbkQAAAAAAAAAAAAAbkQAAAAAAABvRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbEQAAAAAAACGRAAAAAAAAAAAAAAAAPC/"
				],
				[
					444,
					3,
					"left_delete",
					null,
					"AwAAAG5EAAAAAAAAbkQAAAAAAAABAAAAcG1EAAAAAAAAbUQAAAAAAAABAAAAb2xEAAAAAAAAbEQAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAb0QAAAAAAABvRAAAAAAAAAAAAAAAAPC/"
				],
				[
					445,
					1,
					"insert",
					{
						"characters": "prop"
					},
					"BAAAAGxEAAAAAAAAbUQAAAAAAAAAAAAAbUQAAAAAAABuRAAAAAAAAAAAAABuRAAAAAAAAG9EAAAAAAAAAAAAAG9EAAAAAAAAcEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbEQAAAAAAABsRAAAAAAAAAAAAAAAAPC/"
				],
				[
					449,
					1,
					"left_delete",
					null,
					"AQAAANVDAAAAAAAA1UMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA1kMAAAAAAADWQwAAAAAAAAAAAAAAAAAA"
				],
				[
					452,
					1,
					"left_delete",
					null,
					"AQAAAJ1DAAAAAAAAnUMAAAAAAAASAAAAICAgIGpzcnQganMoY3R4KTsK",
					"AQAAAAAAAAABAAAAnUMAAAAAAACvQwAAAAAAAAAAAAAAAAAA"
				],
				[
					453,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAnUMAAAAAAACdQwAAAAAAAAAAAAAAAPC/"
				],
				[
					473,
					1,
					"insert",
					{
						"characters": "uint32_t"
					},
					"CQAAAMRBAAAAAAAAxUEAAAAAAAAAAAAAxUEAAAAAAADFQQAAAAAAAAYAAABzaXplX3TFQQAAAAAAAMZBAAAAAAAAAAAAAMZBAAAAAAAAx0EAAAAAAAAAAAAAx0EAAAAAAADIQQAAAAAAAAAAAADIQQAAAAAAAMlBAAAAAAAAAAAAAMlBAAAAAAAAykEAAAAAAAAAAAAAykEAAAAAAADLQQAAAAAAAAAAAADLQQAAAAAAAMxBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxEEAAAAAAADKQQAAAAAAAAAAAAAAAPC/"
				],
				[
					504,
					1,
					"insert",
					{
						"characters": "from"
					},
					"BQAAABREAAAAAAAAFUQAAAAAAAAAAAAAFUQAAAAAAAAVRAAAAAAAAAIAAAB0bxVEAAAAAAAAFkQAAAAAAAAAAAAAFkQAAAAAAAAXRAAAAAAAAAAAAAAXRAAAAAAAABhEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFEQAAAAAAAAWRAAAAAAAAAAAAAAAAPC/"
				],
				[
					516,
					1,
					"left_delete",
					null,
					"AQAAAANEAAAAAAAAA0QAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAABEQAAAAAAAAERAAAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAANEAAAAAAAABEQAAAAAAAAAAAAABEQAAAAAAAAFRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAA0QAAAAAAAADRAAAAAAAAAAAAAAAAPC/"
				],
				[
					518,
					1,
					"insert",
					{
						"characters": " entry.second"
					},
					"DQAAAAVEAAAAAAAABkQAAAAAAAAAAAAABkQAAAAAAAAHRAAAAAAAAAAAAAAHRAAAAAAAAAhEAAAAAAAAAAAAAAhEAAAAAAAACUQAAAAAAAAAAAAACUQAAAAAAAAKRAAAAAAAAAAAAAAKRAAAAAAAAAtEAAAAAAAAAAAAAAtEAAAAAAAADEQAAAAAAAAAAAAADEQAAAAAAAANRAAAAAAAAAAAAAANRAAAAAAAAA5EAAAAAAAAAAAAAA5EAAAAAAAAD0QAAAAAAAAAAAAAD0QAAAAAAAAQRAAAAAAAAAAAAAAQRAAAAAAAABFEAAAAAAAAAAAAABFEAAAAAAAAEkQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABUQAAAAAAAAFRAAAAAAAAAAAAAAAAPC/"
				],
				[
					519,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABJEAAAAAAAAE0QAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEkQAAAAAAAASRAAAAAAAAAAAAAAAAPC/"
				],
				[
					522,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAC1EAAAAAAAALkQAAAAAAAAAAAAALkQAAAAAAAAuRAAAAAAAAA0AAABlbnRyeS5zZWNvbmQs",
					"AQAAAAAAAAABAAAALUQAAAAAAAA6RAAAAAAAAAAAAAAAAPC/"
				],
				[
					532,
					1,
					"cut",
					null,
					"AQAAABlEAAAAAAAAGUQAAAAAAAAbAAAAIGpzX3ZhbHVlX2Zyb20oY3R4LCAgIHByb3Ap",
					"AQAAAAAAAAABAAAANEQAAAAAAAAZRAAAAAAAAAAAAAAAAPC/"
				],
				[
					536,
					1,
					"paste",
					null,
					"AgAAAFVEAAAAAAAAcEQAAAAAAAAAAAAAcEQAAAAAAABwRAAAAAAAAAQAAABwcm9w",
					"AQAAAAAAAAABAAAAVUQAAAAAAABZRAAAAAAAAAAAAAAAAPC/"
				],
				[
					539,
					5,
					"left_delete",
					null,
					"BQAAABlEAAAAAAAAGUQAAAAAAAABAAAAOxhEAAAAAAAAGEQAAAAAAAABAAAAIBZEAAAAAAAAFkQAAAAAAAACAAAAICAURAAAAAAAABREAAAAAAAAAgAAACAgE0QAAAAAAAATRAAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAGkQAAAAAAAAaRAAAAAAAAAAAAAAAAPC/"
				],
				[
					542,
					1,
					"insert",
					{
						"characters": "SetP"
					},
					"BQAAAB1EAAAAAAAAHkQAAAAAAAAAAAAAHkQAAAAAAAAeRAAAAAAAAAcAAABEZWZpbmVQHkQAAAAAAAAfRAAAAAAAAAAAAAAfRAAAAAAAACBEAAAAAAAAAAAAACBEAAAAAAAAIUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHUQAAAAAAAAkRAAAAAAAAAAAAAAAAPC/"
				],
				[
					548,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAHVEAAAAAAAAd0QAAAAAAAAAAAAAZkQAAAAAAABoRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZkQAAAAAAAB1RAAAAAAAAAAAAAAAAPC/"
				],
				[
					564,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAfEQAAAAAAACCRAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_alloc.hpp",
			"settings":
			{
				"buffer_size": 2472,
				"line_ending": "Unix"
			}
		},
		{
			"file": "js_point_iterator.cpp",
			"settings":
			{
				"buffer_size": 6043,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"cut",
					null,
					"AQAAAEMXAAAAAAAAQxcAAAAAAABVAAAAZXh0ZXJuICJDIiBWSVNJQkxFIHZvaWQganNfcG9pbnRfaXRlcmF0b3JfZXhwb3J0KEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewp9Cg",
					"AQAAAAAAAAABAAAAQxcAAAAAAACYFwAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAABMUAAAAAAAAaBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAExQAAAAAAAATFAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABMUAAAAAAAAFBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAExQAAAAAAAATFAAAAAAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"cut",
					null,
					"AQAAAMQVAAAAAAAAxBUAAAAAAAAvAAAAICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiUG9pbnRJdGVyYXRvciIpOwo",
					"AQAAAAAAAAABAAAAxBUAAAAAAADzFQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"paste",
					null,
					"AQAAAGcUAAAAAAAAlhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZxQAAAAAAABnFAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\njs_poiint"
					},
					"DQAAAPIVAAAAAAAA8xUAAAAAAAAAAAAA8xUAAAAAAAD3FQAAAAAAAAAAAADzFQAAAAAAAPMVAAAAAAAABAAAACAgICDzFQAAAAAAAPUVAAAAAAAAAAAAAPUVAAAAAAAA9hUAAAAAAAAAAAAA9hUAAAAAAAD3FQAAAAAAAAAAAAD3FQAAAAAAAPgVAAAAAAAAAAAAAPgVAAAAAAAA+RUAAAAAAAAAAAAA+RUAAAAAAAD6FQAAAAAAAAAAAAD6FQAAAAAAAPsVAAAAAAAAAAAAAPsVAAAAAAAA/BUAAAAAAAAAAAAA/BUAAAAAAAD9FQAAAAAAAAAAAAD9FQAAAAAAAP4VAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8hUAAAAAAADyFQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					3,
					"left_delete",
					null,
					"AwAAAP0VAAAAAAAA/RUAAAAAAAABAAAAdPwVAAAAAAAA/BUAAAAAAAABAAAAbvsVAAAAAAAA+xUAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAA/hUAAAAAAAD+FQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "nt_iterator_export"
					},
					"EgAAAPsVAAAAAAAA/BUAAAAAAAAAAAAA/BUAAAAAAAD9FQAAAAAAAAAAAAD9FQAAAAAAAP4VAAAAAAAAAAAAAP4VAAAAAAAA/xUAAAAAAAAAAAAA/xUAAAAAAAAAFgAAAAAAAAAAAAAAFgAAAAAAAAEWAAAAAAAAAAAAAAEWAAAAAAAAAhYAAAAAAAAAAAAAAhYAAAAAAAADFgAAAAAAAAAAAAADFgAAAAAAAAQWAAAAAAAAAAAAAAQWAAAAAAAABRYAAAAAAAAAAAAABRYAAAAAAAAGFgAAAAAAAAAAAAAGFgAAAAAAAAcWAAAAAAAAAAAAAAcWAAAAAAAACBYAAAAAAAAAAAAACBYAAAAAAAAJFgAAAAAAAAAAAAAJFgAAAAAAAAoWAAAAAAAAAAAAAAoWAAAAAAAACxYAAAAAAAAAAAAACxYAAAAAAAAMFgAAAAAAAAAAAAAMFgAAAAAAAA0WAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+xUAAAAAAAD7FQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAA0WAAAAAAAADxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADRYAAAAAAAANFgAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "ctx,m"
					},
					"BQAAAA4WAAAAAAAADxYAAAAAAAAAAAAADxYAAAAAAAAQFgAAAAAAAAAAAAAQFgAAAAAAABEWAAAAAAAAAAAAABEWAAAAAAAAEhYAAAAAAAAAAAAAEhYAAAAAAAATFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADhYAAAAAAAAOFgAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABQWAAAAAAAAFRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFBYAAAAAAAAUFgAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAFRYAAAAAAAAVFgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAFRYAAAAAAAAVFgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAFRYAAAAAAAAVFgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_rect.cpp",
			"settings":
			{
				"buffer_size": 18566,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"cut",
					null,
					"AQAAAFFIAAAAAAAAUUgAAAAAAABMAAAACmV4dGVybiAiQyIgVklTSUJMRSB2b2lkIGpzX3JlY3RfZXhwb3J0KEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewp9Cg",
					"AQAAAAAAAAABAAAAUUgAAAAAAACdSAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAAAxGAAAAAAAAWEYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADEYAAAAAAAAMRgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"cut",
					null,
					"AQAAAGpIAAAAAAAAakgAAAAAAAAmAAAAICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiUmVjdCIpOwo",
					"AQAAAAAAAAABAAAAakgAAAAAAACQSAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"paste",
					null,
					"AQAAAFZGAAAAAAAAfEYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVkYAAAAAAABWRgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\njs_d"
					},
					"CAAAAI9IAAAAAAAAkEgAAAAAAAAAAAAAkEgAAAAAAACUSAAAAAAAAAAAAACQSAAAAAAAAJBIAAAAAAAABAAAACAgICCQSAAAAAAAAJJIAAAAAAAAAAAAAJJIAAAAAAAAk0gAAAAAAAAAAAAAk0gAAAAAAACUSAAAAAAAAAAAAACUSAAAAAAAAJVIAAAAAAAAAAAAAJVIAAAAAAAAlkgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAj0gAAAAAAACPSAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAAJVIAAAAAAAAlUgAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAlkgAAAAAAACWSAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "rect_export"
					},
					"CwAAAJVIAAAAAAAAlkgAAAAAAAAAAAAAlkgAAAAAAACXSAAAAAAAAAAAAACXSAAAAAAAAJhIAAAAAAAAAAAAAJhIAAAAAAAAmUgAAAAAAAAAAAAAmUgAAAAAAACaSAAAAAAAAAAAAACaSAAAAAAAAJtIAAAAAAAAAAAAAJtIAAAAAAAAnEgAAAAAAAAAAAAAnEgAAAAAAACdSAAAAAAAAAAAAACdSAAAAAAAAJ5IAAAAAAAAAAAAAJ5IAAAAAAAAn0gAAAAAAAAAAAAAn0gAAAAAAACgSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlUgAAAAAAACVSAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKBIAAAAAAAAokgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoEgAAAAAAACgSAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "ctx,m"
					},
					"BQAAAKFIAAAAAAAAokgAAAAAAAAAAAAAokgAAAAAAACjSAAAAAAAAAAAAACjSAAAAAAAAKRIAAAAAAAAAAAAAKRIAAAAAAAApUgAAAAAAAAAAAAApUgAAAAAAACmSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoUgAAAAAAAChSAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKdIAAAAAAAAqEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAp0gAAAAAAACnSAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAqEgAAAAAAACoSAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAH0xAAAAAAAAfjEAAAAAAAAAAAAAfjEAAAAAAAB+MQAAAAAAABAAAAAgIGpzcnQganMoY3R4KTsK",
					"AQAAAAAAAAABAAAAfTEAAAAAAACNMQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					2,
					"right_delete",
					null,
					"AgAAALkxAAAAAAAAuTEAAAAAAAAOAAAASlNfSXNVbmRlZmluZWS5MQAAAAAAALkxAAAAAAAAAQAAACg",
					"AQAAAAAAAAABAAAAuTEAAAAAAADHMQAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"left_delete",
					null,
					"AQAAAMgxAAAAAAAAyDEAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAyTEAAAAAAADJMQAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAMgxAAAAAAAAyTEAAAAAAAAAAAAAyTEAAAAAAADKMQAAAAAAAAAAAADKMQAAAAAAAMsxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyDEAAAAAAADIMQAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAMsxAAAAAAAAzDEAAAAAAAAAAAAAzDEAAAAAAADNMQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyzEAAAAAAADLMQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOUxAAAAAAAA5jEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5TEAAAAAAADlMQAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"paste",
					null,
					"AQAAAOUxAAAAAAAA8zEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5TEAAAAAAADlMQAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAPMxAAAAAAAA9DEAAAAAAAAAAAAA9DEAAAAAAAD0MQAAAAAAAA4AAAAganMuZ2V0X3N5bWJvbA",
					"AQAAAAAAAAABAAAA8zEAAAAAAAABMgAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAPUxAAAAAAAA9jEAAAAAAAAAAAAA9jEAAAAAAAD3MQAAAAAAAAAAAAD3MQAAAAAAAPgxAAAAAAAAAAAAAPgxAAAAAAAA+TEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9TEAAAAAAAD1MQAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPkxAAAAAAAA+jEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+TEAAAAAAAD5MQAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "JS_GetProperty"
					},
					"DwAAACkyAAAAAAAAKjIAAAAAAAAAAAAAKjIAAAAAAAAqMgAAAAAAAA8AAABqcy5nZXRfcHJvcGVydHkqMgAAAAAAACsyAAAAAAAAAAAAACsyAAAAAAAALDIAAAAAAAAAAAAALDIAAAAAAAAtMgAAAAAAAAAAAAAtMgAAAAAAAC4yAAAAAAAAAAAAAC4yAAAAAAAALzIAAAAAAAAAAAAALzIAAAAAAAAwMgAAAAAAAAAAAAAwMgAAAAAAADEyAAAAAAAAAAAAADEyAAAAAAAAMjIAAAAAAAAAAAAAMjIAAAAAAAAzMgAAAAAAAAAAAAAzMgAAAAAAADQyAAAAAAAAAAAAADQyAAAAAAAANTIAAAAAAAAAAAAANTIAAAAAAAA2MgAAAAAAAAAAAAA2MgAAAAAAADcyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKTIAAAAAAAA4MgAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAADgyAAAAAAAAOTIAAAAAAAAAAAAAOTIAAAAAAAA6MgAAAAAAAAAAAAA6MgAAAAAAADsyAAAAAAAAAAAAADsyAAAAAAAAPDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAODIAAAAAAAA4MgAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADwyAAAAAAAAPTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPDIAAAAAAAA8MgAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AgAAANEwAAAAAAAA0jAAAAAAAAAAAAAA0jAAAAAAAADSMAAAAAAAAAcAAABKU1ZhbHVl",
					"AQAAAAAAAAABAAAA0TAAAAAAAADYMAAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"left_delete",
					null,
					"AQAAANEwAAAAAAAA0TAAAAAAAAABAAAAUw",
					"AQAAAAAAAAABAAAA0jAAAAAAAADSMAAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "JSAtom"
					},
					"BgAAANEwAAAAAAAA0jAAAAAAAAAAAAAA0jAAAAAAAADTMAAAAAAAAAAAAADTMAAAAAAAANQwAAAAAAAAAAAAANQwAAAAAAAA1TAAAAAAAAAAAAAA1TAAAAAAAADWMAAAAAAAAAAAAADWMAAAAAAAANcwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0TAAAAAAAADRMAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					15,
					"left_delete",
					null,
					"DwAAAPUwAAAAAAAA9TAAAAAAAAABAAAARPQwAAAAAAAA9DAAAAAAAAABAAAARfMwAAAAAAAA8zAAAAAAAAABAAAATvIwAAAAAAAA8jAAAAAAAAABAAAASfEwAAAAAAAA8TAAAAAAAAABAAAARvAwAAAAAAAA8DAAAAAAAAABAAAARe8wAAAAAAAA7zAAAAAAAAABAAAARO4wAAAAAAAA7jAAAAAAAAABAAAATu0wAAAAAAAA7TAAAAAAAAABAAAAVewwAAAAAAAA7DAAAAAAAAABAAAAX+swAAAAAAAA6zAAAAAAAAABAAAAU+owAAAAAAAA6jAAAAAAAAABAAAASukwAAAAAAAA6TAAAAAAAAABAAAAIOgwAAAAAAAA6DAAAAAAAAABAAAAPecwAAAAAAAA5zAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA9jAAAAAAAAD2MAAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA5zAAAAAAAADnMAAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA5zAAAAAAAADnMAAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA5zAAAAAAAADnMAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_line.hpp",
			"settings":
			{
				"buffer_size": 2825,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"paste",
					null,
					"AQAAAPgAAAAAAAAANwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AAAAAAAAAD4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPgAAAAAAAAA+QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AAAAAAAAAD4AAAAAAAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAJCwAAI2lmbmRlZiBKU19MSU5FX0hQUAojZGVmaW5lIEpTX0xJTkVfSFBQCgojaW5jbHVkZSAianNiaW5kaW5ncy5ocHAiCgpleHRlcm4gIkMiIHsKCmV4dGVybiBKU1ZhbHVlIGxpbmVfcHJvdG8sIGxpbmVfY2xhc3M7CmV4dGVybiBKU0NsYXNzSUQganNfbGluZV9jbGFzc19pZDsKClZJU0lCTEUgSlNWYWx1ZSBqc19saW5lX25ldyhKU0NvbnRleHQqIGN0eCwgZG91YmxlIHgxLCBkb3VibGUgeTEsIGRvdWJsZSB4MiwgZG91YmxlIHkyKTsKfQoKZXh0ZXJuICJDIiBWSVNJQkxFIGludCBqc19saW5lX2luaXQoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKCnRlbXBsYXRlPGNsYXNzIFQ+CnN0YXRpYyBpbmxpbmUgaW50CmpzX2xpbmVfcmVhZChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGxpbmUsIHN0ZDo6YXJyYXk8VCwgND4mIG91dCkgewogIGludCByZXQgPSAxOwogIEpTVmFsdWUgeDEgPSBKU19VTkRFRklORUQsIHkxID0gSlNfVU5ERUZJTkVELCB4MiA9IEpTX1VOREVGSU5FRCwgeTIgPSBKU19VTkRFRklORUQ7CiAgLyppZihqc19pc19hcnJheV9saWtlKGN0eCwgbGluZSkpIHsKICAgIGpzX2FycmF5X3RvKGN0eCwgbGluZSwgb3V0KTsKICAgIHJldHVybiAxOwogIH0gZWxzZSAqLwogIGlmKGpzX2lzX2l0ZXJhYmxlKGN0eCwgbGluZSkpIHsKICAgIGlmKGpzX2l0ZXJhYmxlX3RvKGN0eCwgbGluZSwgb3V0KSA9PSA0KQogICAgICByZXR1cm4gMTsKICB9CiAgeDEgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGxpbmUsICJ4MSIpOwogIHkxID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBsaW5lLCAieTEiKTsKICB4MiA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgbGluZSwgIngyIik7CiAgeTIgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGxpbmUsICJ5MiIpOwoKICBpZihKU19Jc051bWJlcih4MSkgJiYgSlNfSXNOdW1iZXIoeTEpICYmIEpTX0lzTnVtYmVyKHgyKSAmJiBKU19Jc051bWJlcih5MikpIHsKICAgIHJldCAmPSBqc19udW1iZXJfcmVhZChjdHgsIHgxLCAmb3V0WzBdKTsKICAgIHJldCAmPSBqc19udW1iZXJfcmVhZChjdHgsIHkxLCAmb3V0WzFdKTsKICAgIHJldCAmPSBqc19udW1iZXJfcmVhZChjdHgsIHgyLCAmb3V0WzJdKTsKICAgIHJldCAmPSBqc19udW1iZXJfcmVhZChjdHgsIHkyLCAmb3V0WzNdKTsKICB9IGVsc2UgewogICAgcmV0ID0gMDsKICB9CiAgaWYoIUpTX0lzVW5kZWZpbmVkKHgxKSkKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIHgxKTsKICBpZighSlNfSXNVbmRlZmluZWQoeTEpKQogICAgSlNfRnJlZVZhbHVlKGN0eCwgeTEpOwogIGlmKCFKU19Jc1VuZGVmaW5lZCh4MikpCiAgICBKU19GcmVlVmFsdWUoY3R4LCB4Mik7CiAgaWYoIUpTX0lzVW5kZWZpbmVkKHkyKSkKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIHkyKTsKICByZXR1cm4gcmV0Owp9Cgp0ZW1wbGF0ZTxjbGFzcyBUPgpzdGF0aWMgaW5saW5lIGludApqc19saW5lX3JlYWQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBsaW5lLCBKU0xpbmVEYXRhPFQ+KiBvdXQpIHsKICByZXR1cm4ganNfbGluZV9yZWFkKGN0eCwgbGluZSwgb3V0LT5hcnJheSk7Cn0KCnRlbXBsYXRlPGNsYXNzIFQ+CnN0YXRpYyBzdGQ6OmFycmF5PFQsIDQ+CmpzX2xpbmVfZ2V0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgbGluZSkgewogIHN0ZDo6YXJyYXk8VCwgND4gcnswLCAwLCAwLCAwfTsKICBqc19saW5lX3JlYWQoY3R4LCBsaW5lLCByKTsKICByZXR1cm4gcjsKfQoKdGVtcGxhdGU8Y2xhc3MgVD4Kc3RhdGljIGlubGluZSBKU0xpbmVEYXRhPFQ+CmpzX2xpbmVfZnJvbShUIHgxLCBUIHkxLCBUIHgyLCBUIHkyKSB7CiAgc3RkOjphcnJheTxULCA0PiBhcnJ7eDEsIHkxLCB4MiwgeTJ9OwogIHJldHVybiAqcmVpbnRlcnByZXRfY2FzdDxKU0xpbmVEYXRhPFQ+Kj4oJmFycik7Cn0KCnRlbXBsYXRlPGNsYXNzIFQ+CnN0YXRpYyBpbmxpbmUgSlNMaW5lRGF0YTxUPgpqc19saW5lX2Zyb20oY29uc3QgSlNQb2ludERhdGE8VD4mIGEsIGNvbnN0IEpTUG9pbnREYXRhPFQ+JiBiKSB7CiAgc3RkOjphcnJheTxULCA0PiBhcnJ7YS54LCBhLnksIGIueCwgYi55fTsKICByZXR1cm4gKnJlaW50ZXJwcmV0X2Nhc3Q8SlNMaW5lRGF0YTxUPio+KCZhcnIpOwp9CgpzdGF0aWMgaW5saW5lIGludApqc19saW5lX3dyaXRlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlIG91dCwgSlNMaW5lVHJhaXRzPGRvdWJsZT46OmFycmF5X3R5cGUgbGluZSkgewogIGludCByZXQgPSAwOwogIHJldCArPSBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIG91dCwgIngxIiwgSlNfTmV3RmxvYXQ2NChjdHgsIGxpbmVbMF0pKTsKICByZXQgKz0gSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBvdXQsICJ5MSIsIEpTX05ld0Zsb2F0NjQoY3R4LCBsaW5lWzFdKSk7CiAgcmV0ICs9IEpTX1NldFByb3BlcnR5U3RyKGN0eCwgb3V0LCAieDIiLCBKU19OZXdGbG9hdDY0KGN0eCwgbGluZVsyXSkpOwogIHJldCArPSBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIG91dCwgInkyIiwgSlNfTmV3RmxvYXQ2NChjdHgsIGxpbmVbM10pKTsKICByZXR1cm4gcmV0Owp9Cgp0ZW1wbGF0ZTxjbGFzcyBUPgpzdGF0aWMgSlNMaW5lRGF0YTxUPgpqc19saW5lX3NldChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSBvdXQsIFQgeDEsIFQgeTEsIFQgeDIsIFQgeTIpIHsKICBzdGQ6OmFycmF5PFQsIDQ+IHJ7eDEsIHkxLCB4MiwgeTJ9OwogIGpzX2xpbmVfd3JpdGUoY3R4LCBvdXQsIHIpOwogIHJldHVybiByOwp9CgpleHRlcm4gIkMiIGludCBqc19saW5lX2luaXQoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKCiNlbmRpZiAvKiBkZWZpbmVkKEpTX0xJTkVfSFBQKSAqLwoAAAAAAAAAAAkLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QAAAAAAAAD5AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_mat.hpp",
			"settings":
			{
				"buffer_size": 797,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEEAAAAAAAAAQgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAEIAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgAAAAAAAABCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIAAAAAAAAAAgQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAIAAAAAAAAAAgAAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAgQAAAAAAAACBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAdAwAAI2lmbmRlZiBKU19NQVRfSFBQCiNkZWZpbmUgSlNfTUFUX0hQUAoKI2luY2x1ZGUgImpzYmluZGluZ3MuaHBwIgoKZXh0ZXJuICJDIiBWSVNJQkxFIGludCBqc19tYXRfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKZXh0ZXJuICJDIiB7CmV4dGVybiBKU1ZhbHVlIG1hdF9wcm90bywgbWF0X2NsYXNzOwpleHRlcm4gSlNDbGFzc0lEIGpzX21hdF9jbGFzc19pZDsKClZJU0lCTEUgSlNWYWx1ZSBqc19tYXRfbmV3KEpTQ29udGV4dCosIHVpbnQzMl90LCB1aW50MzJfdCwgaW50KTsKaW50IGpzX21hdF9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CkpTTW9kdWxlRGVmKiBqc19pbml0X21hdF9tb2R1bGUoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG1vZHVsZV9uYW1lKTsKdm9pZCBqc19tYXRfY29uc3RydWN0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWUgcGFyZW50LCBjb25zdCBjaGFyKiBuYW1lKTsKCmlubGluZSBWSVNJQkxFIEpTTWF0RGF0YSoKanNfbWF0X2RhdGEoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWwpIHsKICByZXR1cm4gc3RhdGljX2Nhc3Q8SlNNYXREYXRhKj4oSlNfR2V0T3BhcXVlMihjdHgsIHZhbCwganNfbWF0X2NsYXNzX2lkKSk7Cn0KCnN0YXRpYyBpbmxpbmUgSlNNYXREYXRhKgpqc19tYXRfZGF0YV9ub3Rocm93KEpTVmFsdWVDb25zdCB2YWwpIHsKICByZXR1cm4gc3RhdGljX2Nhc3Q8SlNNYXREYXRhKj4oSlNfR2V0T3BhcXVlKHZhbCwganNfbWF0X2NsYXNzX2lkKSk7Cn0KfQoKI2VuZGlmIC8qIGRlZmluZWQoSlNfTUFUX0hQUCkgKi8AAAAAAAAAAB0DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_point.hpp",
			"settings":
			{
				"buffer_size": 2521,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAAEUAAAAAAAAAhQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQAAAAAAAABFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEUAAAAAAAAARgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQAAAAAAAABFAAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADZCQAAI2lmbmRlZiBKU19QT0lOVF9IUFAKI2RlZmluZSBKU19QT0lOVF9IUFAKCiNpbmNsdWRlICJqc2JpbmRpbmdzLmhwcCIKCmV4dGVybiAiQyIgVklTSUJMRSBpbnQganNfcG9pbnRfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKZXh0ZXJuICJDIiBKU1ZhbHVlIGpzX3BvaW50X2Nsb25lKEpTQ29udGV4dCogY3R4LCBjb25zdCBKU1BvaW50RGF0YTxkb3VibGU+JiBwb2ludCk7CmV4dGVybiAiQyIgewoKZXh0ZXJuIEpTVmFsdWUgcG9pbnRfcHJvdG8sIHBvaW50X2NsYXNzOwpleHRlcm4gSlNDbGFzc0lEIGpzX3BvaW50X2NsYXNzX2lkOwoKVklTSUJMRSBKU1ZhbHVlIGpzX3BvaW50X25ldyhKU0NvbnRleHQqLCBkb3VibGUgeCwgZG91YmxlIHkpOwpWSVNJQkxFIEpTVmFsdWUganNfcG9pbnRfd3JhcChKU0NvbnRleHQqLCBjb25zdCBKU1BvaW50RGF0YTxkb3VibGU+Jik7ClZJU0lCTEUgSlNQb2ludERhdGE8ZG91YmxlPioganNfcG9pbnRfZGF0YShKU0NvbnRleHQqLCBKU1ZhbHVlQ29uc3QgdmFsKTsKCmludCBqc19wb2ludF9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKiBtKTsKdm9pZCBqc19wb2ludF9jb25zdHJ1Y3RvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSBwYXJlbnQsIGNvbnN0IGNoYXIqIG5hbWUpOwoKSlNNb2R1bGVEZWYqIGpzX2luaXRfcG9pbnRfbW9kdWxlKEpTQ29udGV4dCosIGNvbnN0IGNoYXIqIG1vZHVsZV9uYW1lKTsKfQoKdGVtcGxhdGU8Y2xhc3MgVD4Kc3RhdGljIGlubGluZSBpbnQKanNfcG9pbnRfcmVhZChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHBvaW50LCBKU1BvaW50RGF0YTxUPiogb3V0KSB7CiAgaW50IHJldCA9IDE7CiAgSlNWYWx1ZSB4ID0gSlNfVU5ERUZJTkVELCB5ID0gSlNfVU5ERUZJTkVEOwogIGlmKGpzX2lzX2FycmF5X2xpa2UoY3R4LCBwb2ludCkpIHsKICAgIHggPSBKU19HZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHBvaW50LCAwKTsKICAgIHkgPSBKU19HZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHBvaW50LCAxKTsKICB9IGVsc2UgaWYoSlNfSXNPYmplY3QocG9pbnQpKSB7CiAgICB4ID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBwb2ludCwgIngiKTsKICAgIHkgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHBvaW50LCAieSIpOwogIH0KICBpZihKU19Jc051bWJlcih4KSAmJiBKU19Jc051bWJlcih5KSkgewogICAgcmV0ICY9IGpzX251bWJlcl9yZWFkKGN0eCwgeCwgJm91dC0+eCk7CiAgICByZXQgJj0ganNfbnVtYmVyX3JlYWQoY3R4LCB5LCAmb3V0LT55KTsKICB9IGVsc2UgewogICAgcmV0ID0gMDsKICB9CiAgaWYoIUpTX0lzVW5kZWZpbmVkKHgpKQogICAgSlNfRnJlZVZhbHVlKGN0eCwgeCk7CiAgaWYoIUpTX0lzVW5kZWZpbmVkKHkpKQogICAgSlNfRnJlZVZhbHVlKGN0eCwgeSk7CiAgcmV0dXJuIHJldDsKfQoKdGVtcGxhdGU8Y2xhc3MgVD4Kc3RhdGljIGlubGluZSB2b2lkCmpzX3BvaW50X3dyaXRlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb3V0LCBjb25zdCBKU1BvaW50RGF0YTxUPiYgaW4pIHsKICBKU1ZhbHVlIHggPSBqc19udW1iZXJfbmV3PFQ+KGN0eCwgaW4ueCk7CiAgSlNWYWx1ZSB5ID0ganNfbnVtYmVyX25ldzxUPihjdHgsIGluLnkpOwoKICBpZihqc19pc19hcnJheV9saWtlKGN0eCwgb3V0KSkgewogICAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCBvdXQsIDAsIHgpOwogICAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCBvdXQsIDEsIHkpOwoKICB9IGVsc2UgaWYoSlNfSXNPYmplY3Qob3V0KSkgewogICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBvdXQsICJ4IiwgeCk7CiAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIG91dCwgInkiLCB5KTsKICB9IGVsc2UgaWYoSlNfSXNGdW5jdGlvbihjdHgsIG91dCkpIHsKICAgIEpTVmFsdWVDb25zdCBhcmdzWzJdOwogICAgYXJnc1swXSA9IHg7CiAgICBhcmdzWzFdID0geTsKICAgIEpTX0NhbGwoY3R4LCBvdXQsIEpTX1VOREVGSU5FRCwgMiwgYXJncyk7CiAgfQogIEpTX0ZyZWVWYWx1ZShjdHgsIHgpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHkpOwp9CgpzdGF0aWMgaW5saW5lIEpTUG9pbnREYXRhPGRvdWJsZT4KanNfcG9pbnRfZ2V0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgcG9pbnQpIHsKICBKU1BvaW50RGF0YTxkb3VibGU+IHI7CiAganNfcG9pbnRfcmVhZChjdHgsIHBvaW50LCAmcik7CiAgcmV0dXJuIHI7Cn0KCnN0YXRpYyBpbmxpbmUgYm9vbApqc19pc19wb2ludChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHBvaW50KSB7CiAgSlNQb2ludERhdGE8ZG91YmxlPiByOwoKICBpZihqc19wb2ludF9kYXRhKGN0eCwgcG9pbnQpKQogICAgcmV0dXJuIHRydWU7CgogIGlmKGpzX3BvaW50X3JlYWQoY3R4LCBwb2ludCwgJnIpKQogICAgcmV0dXJuIHRydWU7CgogIHJldHVybiBmYWxzZTsKfQoKZXh0ZXJuICJDIiBpbnQganNfcG9pbnRfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKI2VuZGlmIC8qIGRlZmluZWQoSlNfUE9JTlRfSFBQKSAqLwAAAAAAAAAA2QkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgAAAAAAAABGAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_point_iterator.hpp",
			"settings":
			{
				"buffer_size": 791,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAAGkAAAAAAAAAsgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQAAAAAAAABpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGkAAAAAAAAAagAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQAAAAAAAABpAAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAXAwAAI2lmbmRlZiBKU19QT0lOVF9JVEVSQVRPUl9IUFAKI2RlZmluZSBKU19QT0lOVF9JVEVSQVRPUl9IUFAKCiNpbmNsdWRlICJqc2JpbmRpbmdzLmhwcCIKI2luY2x1ZGUgPHJhbmdlcz4KCmV4dGVybiAiQyIgVklTSUJMRSBpbnQganNfcG9pbnRfaXRlcmF0b3JfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKZXh0ZXJuICJDIiB7CmVudW0gSlNQb2ludEl0ZXJhdG9yTWFnaWMgeyBORVhUX1BPSU5UID0gMCwgTkVYVF9MSU5FIH07CgpleHRlcm4gSlNWYWx1ZSBwb2ludF9pdGVyYXRvcl9wcm90bywgcG9pbnRfaXRlcmF0b3JfY2xhc3M7CmV4dGVybiBKU0NsYXNzSUQganNfcG9pbnRfaXRlcmF0b3JfY2xhc3NfaWQ7CgpWSVNJQkxFIEpTVmFsdWUganNfcG9pbnRfaXRlcmF0b3JfbmV3KEpTQ29udGV4dCogY3R4LCBjb25zdCBzdGQ6OnJhbmdlczo6c3VicmFuZ2U8SlNQb2ludERhdGE8ZG91YmxlPio+JiByYW5nZSwgaW50IG1hZ2ljKTsKCmludCBqc19wb2ludF9pdGVyYXRvcl9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKiBtKTsKCkpTTW9kdWxlRGVmKiBqc19pbml0X21vZHVsZV9wb2ludF9pdGVyYXRvcihKU0NvbnRleHQqLCBjb25zdCBjaGFyKiBtb2R1bGVfbmFtZSk7Cn0KCnN0cnVjdCBKU1BvaW50SXRlcmF0b3JEYXRhIDogcHVibGljIHN0ZDo6cGFpcjxKU1BvaW50RGF0YTxkb3VibGU+KiwgSlNQb2ludERhdGE8ZG91YmxlPio+IHsKICBKU1BvaW50SXRlcmF0b3JNYWdpYyBtYWdpYzsKfTsKCiNlbmRpZiAvKiBkZWZpbmVkKEpTX1BPSU5UX0lURVJBVE9SX0hQUCkgKi8AAAAAAAAAABcDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagAAAAAAAABqAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_rect.hpp",
			"settings":
			{
				"buffer_size": 2550,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAAEMAAAAAAAAAggAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwAAAAAAAABDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEMAAAAAAAAARAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwAAAAAAAABDAAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD2CQAAI2lmbmRlZiBKU19SRUNUX0hQUAojZGVmaW5lIEpTX1JFQ1RfSFBQCgojaW5jbHVkZSAianNiaW5kaW5ncy5ocHAiCgpleHRlcm4gIkMiIFZJU0lCTEUgaW50IGpzX3JlY3RfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKZXh0ZXJuICJDIiB7CmV4dGVybiBKU1ZhbHVlIHJlY3RfcHJvdG8sIHJlY3RfY2xhc3M7CmV4dGVybiBKU0NsYXNzSUQganNfcmVjdF9jbGFzc19pZDsKClZJU0lCTEUgSlNSZWN0RGF0YTxkb3VibGU+KiBqc19yZWN0X2RhdGEoSlNDb250ZXh0KiwgSlNWYWx1ZUNvbnN0IHZhbCk7ClZJU0lCTEUgSlNWYWx1ZSBqc19yZWN0X3dyYXAoSlNDb250ZXh0KiwgY29uc3QgSlNSZWN0RGF0YTxkb3VibGU+Jik7CmludCBqc19yZWN0X2luaXQoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKSlNNb2R1bGVEZWYqIGpzX2luaXRfcmVjdF9tb2R1bGUoSlNDb250ZXh0KiwgY29uc3QgY2hhciogbW9kdWxlX25hbWUpOwoKdm9pZCBqc19yZWN0X2NvbnN0cnVjdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlIHBhcmVudCwgY29uc3QgY2hhciogbmFtZSk7Cn0KCnRlbXBsYXRlPGNsYXNzIFQ+CnN0YXRpYyBpbmxpbmUgaW50CmpzX3JlY3RfcmVhZChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHJlY3QsIEpTUmVjdERhdGE8VD4qIG91dCkgewogIGludCByZXQgPSAxOwogIEpTVmFsdWUgeCA9IEpTX1VOREVGSU5FRCwgeSA9IEpTX1VOREVGSU5FRCwgdyA9IEpTX1VOREVGSU5FRCwgaCA9IEpTX1VOREVGSU5FRDsKICBpZihqc19pc19hcnJheV9saWtlKGN0eCwgcmVjdCkpIHsKICAgIHggPSBKU19HZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJlY3QsIDApOwogICAgeSA9IEpTX0dldFByb3BlcnR5VWludDMyKGN0eCwgcmVjdCwgMSk7CiAgICB3ID0gSlNfR2V0UHJvcGVydHlVaW50MzIoY3R4LCByZWN0LCAyKTsKICAgIGggPSBKU19HZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJlY3QsIDMpOwoKICB9IGVsc2UgewogICAgeCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgcmVjdCwgIngiKTsKICAgIHkgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHJlY3QsICJ5Iik7CiAgICB3ID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCByZWN0LCAid2lkdGgiKTsKICAgIGggPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHJlY3QsICJoZWlnaHQiKTsKICB9CiAgaWYoSlNfSXNOdW1iZXIoeCkgJiYgSlNfSXNOdW1iZXIoeSkgJiYgSlNfSXNOdW1iZXIodykgJiYgSlNfSXNOdW1iZXIoaCkpIHsKICAgIHJldCAmPSBqc19udW1iZXJfcmVhZChjdHgsIHgsICZvdXQtPngpOwogICAgcmV0ICY9IGpzX251bWJlcl9yZWFkKGN0eCwgeSwgJm91dC0+eSk7CiAgICByZXQgJj0ganNfbnVtYmVyX3JlYWQoY3R4LCB3LCAmb3V0LT53aWR0aCk7CiAgICByZXQgJj0ganNfbnVtYmVyX3JlYWQoY3R4LCBoLCAmb3V0LT5oZWlnaHQpOwogIH0gZWxzZSB7CiAgICByZXQgPSAwOwogIH0KICBpZighSlNfSXNVbmRlZmluZWQoeCkpCiAgICBKU19GcmVlVmFsdWUoY3R4LCB4KTsKICBpZighSlNfSXNVbmRlZmluZWQoeSkpCiAgICBKU19GcmVlVmFsdWUoY3R4LCB5KTsKICBpZighSlNfSXNVbmRlZmluZWQodykpCiAgICBKU19GcmVlVmFsdWUoY3R4LCB3KTsKICBpZighSlNfSXNVbmRlZmluZWQoaCkpCiAgICBKU19GcmVlVmFsdWUoY3R4LCBoKTsKICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgSlNSZWN0RGF0YTxkb3VibGU+CmpzX3JlY3RfZ2V0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgcmVjdCkgewogIEpTUmVjdERhdGE8ZG91YmxlPiByID0gezAsIDAsIDAsIDB9OwogIGpzX3JlY3RfcmVhZChjdHgsIHJlY3QsICZyKTsKICByZXR1cm4gcjsKfQoKc3RhdGljIGlubGluZSBpbnQKanNfcmVjdF93cml0ZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSBvdXQsIEpTUmVjdERhdGE8ZG91YmxlPiByZWN0KSB7CiAgaW50IHJldCA9IDA7CiAgcmV0ICs9IEpTX1NldFByb3BlcnR5U3RyKGN0eCwgb3V0LCAieCIsIEpTX05ld0Zsb2F0NjQoY3R4LCByZWN0LngpKTsKICByZXQgKz0gSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBvdXQsICJ5IiwgSlNfTmV3RmxvYXQ2NChjdHgsIHJlY3QueSkpOwogIHJldCArPSBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIG91dCwgIndpZHRoIiwgSlNfTmV3RmxvYXQ2NChjdHgsIHJlY3Qud2lkdGgpKTsKICByZXQgKz0gSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBvdXQsICJoZWlnaHQiLCBKU19OZXdGbG9hdDY0KGN0eCwgcmVjdC5oZWlnaHQpKTsKICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgSlNSZWN0RGF0YTxkb3VibGU+CmpzX3JlY3Rfc2V0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlIG91dCwgZG91YmxlIHgsIGRvdWJsZSB5LCBkb3VibGUgdywgZG91YmxlIGgpIHsKICBjb25zdCBKU1JlY3REYXRhPGRvdWJsZT4gciA9IHt4LCB5LCB3LCBofTsKICBqc19yZWN0X3dyaXRlKGN0eCwgb3V0LCByKTsKICByZXR1cm4gcjsKfQoKZXh0ZXJuICJDIiBpbnQganNfcmVjdF9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CgojZW5kaWYgLyogZGVmaW5lZChKU19SRUNUX0hQUCkgKi8KAAAAAAAAAAD2CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAAAAAAAAABEAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_size.hpp",
			"settings":
			{
				"buffer_size": 2335,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEIAAAAAAAAAQwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgAAAAAAAABCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAEMAAAAAAAAAggAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwAAAAAAAABDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEMAAAAAAAAARAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwAAAAAAAABDAAAAAAAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAfCQAAI2lmbmRlZiBKU19TSVpFX0hQUAojZGVmaW5lIEpTX1NJWkVfSFBQCgojaW5jbHVkZSAianNiaW5kaW5ncy5ocHAiCgpleHRlcm4gIkMiIFZJU0lCTEUgaW50IGpzX3NpemVfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKZXh0ZXJuICJDIiB7CmV4dGVybiBKU1ZhbHVlIHNpemVfcHJvdG8sIHNpemVfY2xhc3M7CmV4dGVybiBKU0NsYXNzSUQganNfc2l6ZV9jbGFzc19pZDsKClZJU0lCTEUgSlNWYWx1ZSBqc19zaXplX25ldyhKU0NvbnRleHQqIGN0eCwgZG91YmxlIHcsIGRvdWJsZSBoKTsKVklTSUJMRSBKU1ZhbHVlIGpzX3NpemVfd3JhcChKU0NvbnRleHQqIGN0eCwgY29uc3QgSlNTaXplRGF0YTxkb3VibGU+JiBzaXplKTsKVklTSUJMRSBKU1NpemVEYXRhPGRvdWJsZT4qIGpzX3NpemVfZGF0YShKU0NvbnRleHQqLCBKU1ZhbHVlQ29uc3QgdmFsKTsKCmludCBqc19zaXplX2luaXQoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqIG0pOwpKU01vZHVsZURlZioganNfaW5pdF9zaXplX21vZHVsZShKU0NvbnRleHQqLCBjb25zdCBjaGFyKiBtb2R1bGVfbmFtZSk7CnZvaWQganNfc2l6ZV9jb25zdHJ1Y3RvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSBwYXJlbnQsIGNvbnN0IGNoYXIqIG5hbWUpOwp9Cgp0ZW1wbGF0ZTxjbGFzcyBUPgpzdGF0aWMgaW5saW5lIGludApqc19zaXplX3JlYWQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBzaXplLCBKU1NpemVEYXRhPFQ+KiBvdXQpIHsKICBpbnQgcmV0ID0gMTsKICBKU1ZhbHVlIHdpZHRoID0gSlNfVU5ERUZJTkVELCBoZWlnaHQgPSBKU19VTkRFRklORUQ7CgogIGlmKGpzX2lzX2FycmF5X2xpa2UoY3R4LCBzaXplKSkgewogICAgd2lkdGggPSBKU19HZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHNpemUsIDApOwogICAgaGVpZ2h0ID0gSlNfR2V0UHJvcGVydHlVaW50MzIoY3R4LCBzaXplLCAxKTsKICB9IGVsc2UgaWYoSlNfSXNPYmplY3Qoc2l6ZSkpIHsKICAgIHdpZHRoID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBzaXplLCAid2lkdGgiKTsKICAgIGhlaWdodCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgc2l6ZSwgImhlaWdodCIpOwogIH0KICBpZihKU19Jc051bWJlcih3aWR0aCkgJiYgSlNfSXNOdW1iZXIoaGVpZ2h0KSkgewogICAgcmV0ICY9IGpzX251bWJlcl9yZWFkKGN0eCwgd2lkdGgsICZvdXQtPndpZHRoKTsKICAgIHJldCAmPSBqc19udW1iZXJfcmVhZChjdHgsIGhlaWdodCwgJm91dC0+aGVpZ2h0KTsKICB9IGVsc2UgewogICAgcmV0ID0gMDsKICB9CiAgaWYoIUpTX0lzVW5kZWZpbmVkKHdpZHRoKSkKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIHdpZHRoKTsKICBpZighSlNfSXNVbmRlZmluZWQoaGVpZ2h0KSkKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGhlaWdodCk7CiAgcmV0dXJuIHJldDsKfQoKdGVtcGxhdGU8Y2xhc3MgVD4Kc3RhdGljIGlubGluZSB2b2lkCmpzX3NpemVfd3JpdGUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvdXQsIGNvbnN0IEpTU2l6ZURhdGE8VD4mIGluKSB7CiAgSlNWYWx1ZSB3aWR0aCA9IGpzX251bWJlcl9uZXc8VD4oY3R4LCBpbi53aWR0aCk7CiAgSlNWYWx1ZSBoZWlnaHQgPSBqc19udW1iZXJfbmV3PFQ+KGN0eCwgaW4uaGVpZ2h0KTsKICBpZihKU19Jc0FycmF5KGN0eCwgb3V0KSkgewogICAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCBvdXQsIDAsIHdpZHRoKTsKICAgIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgb3V0LCAxLCBoZWlnaHQpOwoKICB9IGVsc2UgaWYoSlNfSXNPYmplY3Qob3V0KSkgewogICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBvdXQsICJ4Iiwgd2lkdGgpOwogICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBvdXQsICJ5IiwgaGVpZ2h0KTsKICB9IGVsc2UgaWYoSlNfSXNGdW5jdGlvbihjdHgsIG91dCkpIHsKICAgIEpTVmFsdWVDb25zdCBhcmdzWzJdOwogICAgYXJnc1swXSA9IHdpZHRoOwogICAgYXJnc1sxXSA9IGhlaWdodDsKICAgIEpTX0NhbGwoY3R4LCBvdXQsIEpTX1VOREVGSU5FRCwgMiwgYXJncyk7CiAgfQogIEpTX0ZyZWVWYWx1ZShjdHgsIHdpZHRoKTsKICBKU19GcmVlVmFsdWUoY3R4LCBoZWlnaHQpOwp9CgpzdGF0aWMgaW5saW5lIEpTU2l6ZURhdGE8ZG91YmxlPgpqc19zaXplX2dldChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHNpemUpIHsKICBKU1NpemVEYXRhPGRvdWJsZT4gciA9IHswLCAwfTsKICBqc19zaXplX3JlYWQoY3R4LCBzaXplLCAmcik7CiAgcmV0dXJuIHI7Cn0KCmV4dGVybiAiQyIgaW50IGpzX3NpemVfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKI2VuZGlmIC8qIGRlZmluZWQoSlNfU0laRV9IUFApICovCgAAAAAAAAAAHwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAAAAAAAAABEAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_size.cpp",
			"settings":
			{
				"buffer_size": 14728,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"cut",
					null,
					"AQAAAFM5AAAAAAAAUzkAAAAAAABMAAAACmV4dGVybiAiQyIgVklTSUJMRSB2b2lkIGpzX3NpemVfZXhwb3J0KEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewp9Cg",
					"AQAAAAAAAAABAAAAUzkAAAAAAACfOQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAA43AAAAAAAAWjcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADjcAAAAAAAAONwAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"cut",
					null,
					"AQAAAGw5AAAAAAAAbDkAAAAAAAAmAAAAICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiU2l6ZSIpOwo",
					"AQAAAAAAAAABAAAAbDkAAAAAAACSOQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"paste",
					null,
					"AQAAAFg3AAAAAAAAfjcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWDcAAAAAAABYNwAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\nks_"
					},
					"BwAAAJE5AAAAAAAAkjkAAAAAAAAAAAAAkjkAAAAAAACWOQAAAAAAAAAAAACSOQAAAAAAAJI5AAAAAAAABAAAACAgICCSOQAAAAAAAJQ5AAAAAAAAAAAAAJQ5AAAAAAAAlTkAAAAAAAAAAAAAlTkAAAAAAACWOQAAAAAAAAAAAACWOQAAAAAAAJc5AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkTkAAAAAAACROQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					3,
					"left_delete",
					null,
					"AwAAAJY5AAAAAAAAljkAAAAAAAABAAAAX5U5AAAAAAAAlTkAAAAAAAABAAAAc5Q5AAAAAAAAlDkAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAlzkAAAAAAACXOQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "ks"
					},
					"AgAAAJQ5AAAAAAAAlTkAAAAAAAAAAAAAlTkAAAAAAACWOQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlDkAAAAAAACUOQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					2,
					"left_delete",
					null,
					"AgAAAJU5AAAAAAAAlTkAAAAAAAABAAAAc5Q5AAAAAAAAlDkAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAljkAAAAAAACWOQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "ks"
					},
					"AgAAAJQ5AAAAAAAAlTkAAAAAAAAAAAAAlTkAAAAAAACWOQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlDkAAAAAAACUOQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					2,
					"left_delete",
					null,
					"AgAAAJU5AAAAAAAAlTkAAAAAAAABAAAAc5Q5AAAAAAAAlDkAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAljkAAAAAAACWOQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "js_size_export"
					},
					"DgAAAJQ5AAAAAAAAlTkAAAAAAAAAAAAAlTkAAAAAAACWOQAAAAAAAAAAAACWOQAAAAAAAJc5AAAAAAAAAAAAAJc5AAAAAAAAmDkAAAAAAAAAAAAAmDkAAAAAAACZOQAAAAAAAAAAAACZOQAAAAAAAJo5AAAAAAAAAAAAAJo5AAAAAAAAmzkAAAAAAAAAAAAAmzkAAAAAAACcOQAAAAAAAAAAAACcOQAAAAAAAJ05AAAAAAAAAAAAAJ05AAAAAAAAnjkAAAAAAAAAAAAAnjkAAAAAAACfOQAAAAAAAAAAAACfOQAAAAAAAKA5AAAAAAAAAAAAAKA5AAAAAAAAoTkAAAAAAAAAAAAAoTkAAAAAAACiOQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlDkAAAAAAACUOQAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKI5AAAAAAAApDkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAojkAAAAAAACiOQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "ctx,m9"
					},
					"BgAAAKM5AAAAAAAApDkAAAAAAAAAAAAApDkAAAAAAAClOQAAAAAAAAAAAAClOQAAAAAAAKY5AAAAAAAAAAAAAKY5AAAAAAAApzkAAAAAAAAAAAAApzkAAAAAAACoOQAAAAAAAAAAAACoOQAAAAAAAKk5AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAozkAAAAAAACjOQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAAKg5AAAAAAAAqDkAAAAAAAABAAAAOQ",
					"AQAAAAAAAAABAAAAqTkAAAAAAACpOQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKk5AAAAAAAAqjkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqTkAAAAAAACpOQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAqjkAAAAAAACqOQAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					4,
					"left_delete",
					null,
					"BAAAAEMkAAAAAAAAQyQAAAAAAAAMAAAASlNfVU5ERUZJTkVEQiQAAAAAAABCJAAAAAAAAAEAAAAgQSQAAAAAAABBJAAAAAAAAAEAAAA9QCQAAAAAAABAJAAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAAQyQAAAAAAABPJAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "JSAtom"
					},
					"BwAAACkkAAAAAAAAKiQAAAAAAAAAAAAAKiQAAAAAAAAqJAAAAAAAAAcAAABKU1ZhbHVlKiQAAAAAAAArJAAAAAAAAAAAAAArJAAAAAAAACwkAAAAAAAAAAAAACwkAAAAAAAALSQAAAAAAAAAAAAALSQAAAAAAAAuJAAAAAAAAAAAAAAuJAAAAAAAAC8kAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKSQAAAAAAAAwJAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					2,
					"right_delete",
					null,
					"AgAAABAlAAAAAAAAECUAAAAAAAAOAAAASlNfSXNVbmRlZmluZWQQJQAAAAAAABAlAAAAAAAAAQAAACg",
					"AQAAAAAAAAABAAAAECUAAAAAAAAeJQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AQAAAB8lAAAAAAAAHyUAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAICUAAAAAAAAgJQAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "^=="
					},
					"AwAAAB8lAAAAAAAAICUAAAAAAAAAAAAAICUAAAAAAAAhJQAAAAAAAAAAAAAhJQAAAAAAACIlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHyUAAAAAAAAfJQAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACIlAAAAAAAAIyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIiUAAAAAAAAiJQAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					4,
					"left_delete",
					null,
					"BAAAACIlAAAAAAAAIiUAAAAAAAABAAAAICElAAAAAAAAISUAAAAAAAABAAAAPSAlAAAAAAAAICUAAAAAAAABAAAAPR8lAAAAAAAAHyUAAAAAAAABAAAAXg",
					"AQAAAAAAAAABAAAAIyUAAAAAAAAjJQAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "=="
					},
					"AgAAAB8lAAAAAAAAICUAAAAAAAAAAAAAICUAAAAAAAAhJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHyUAAAAAAAAfJQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACElAAAAAAAAIiUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAISUAAAAAAAAhJQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAACIlAAAAAAAAJCUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIiUAAAAAAAAiJQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAACMlAAAAAAAAJCUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIyUAAAAAAAAjJQAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"left_delete",
					null,
					"AQAAACMlAAAAAAAAIyUAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAJCUAAAAAAAAkJQAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAACIlAAAAAAAAIiUAAAAAAAABAAAAJyIlAAAAAAAAIiUAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAIyUAAAAAAAAjJQAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAACIlAAAAAAAAIyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIiUAAAAAAAAiJQAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					4,
					"left_delete",
					null,
					"BAAAAD4lAAAAAAAAPiUAAAAAAAAKAAAAZ2V0X3N5bWJvbD0lAAAAAAAAPSUAAAAAAAABAAAALjwlAAAAAAAAPCUAAAAAAAABAAAAczslAAAAAAAAOyUAAAAAAAABAAAAag",
					"AQAAAAAAAAABAAAAPiUAAAAAAABIJQAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"paste",
					null,
					"AQAAADslAAAAAAAASSUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOyUAAAAAAAA7JQAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAEolAAAAAAAASyUAAAAAAAAAAAAASyUAAAAAAABMJQAAAAAAAAAAAABMJQAAAAAAAE0lAAAAAAAAAAAAAE0lAAAAAAAATiUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASiUAAAAAAABKJQAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE4lAAAAAAAATyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATiUAAAAAAABOJQAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					4,
					"left_delete",
					null,
					"BAAAAIElAAAAAAAAgSUAAAAAAAAMAAAAZ2V0X3Byb3BlcnR5gCUAAAAAAACAJQAAAAAAAAEAAAAufyUAAAAAAAB/JQAAAAAAAAEAAABzfiUAAAAAAAB+JQAAAAAAAAEAAABq",
					"AQAAAAAAAAABAAAAgSUAAAAAAACNJQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "JS_GetProperty"
					},
					"DgAAAH4lAAAAAAAAfyUAAAAAAAAAAAAAfyUAAAAAAACAJQAAAAAAAAAAAACAJQAAAAAAAIElAAAAAAAAAAAAAIElAAAAAAAAgiUAAAAAAAAAAAAAgiUAAAAAAACDJQAAAAAAAAAAAACDJQAAAAAAAIQlAAAAAAAAAAAAAIQlAAAAAAAAhSUAAAAAAAAAAAAAhSUAAAAAAACGJQAAAAAAAAAAAACGJQAAAAAAAIclAAAAAAAAAAAAAIclAAAAAAAAiCUAAAAAAAAAAAAAiCUAAAAAAACJJQAAAAAAAAAAAACJJQAAAAAAAIolAAAAAAAAAAAAAIolAAAAAAAAiyUAAAAAAAAAAAAAiyUAAAAAAACMJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfiUAAAAAAAB+JQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAI0lAAAAAAAAjiUAAAAAAAAAAAAAjiUAAAAAAACPJQAAAAAAAAAAAACPJQAAAAAAAJAlAAAAAAAAAAAAAJAlAAAAAAAAkSUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjSUAAAAAAACNJQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJElAAAAAAAAkiUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkSUAAAAAAACRJQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAMUkAAAAAAAAxiQAAAAAAAAAAAAAxiQAAAAAAADGJAAAAAAAABAAAAAgIGpzcnQganMoY3R4KTsK",
					"AQAAAAAAAAABAAAAxSQAAAAAAADVJAAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAxiQAAAAAAADGJAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAxiQAAAAAAADGJAAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAATjgAAAAAAABcOAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_slice_iterator.cpp",
			"settings":
			{
				"buffer_size": 6447,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"cut",
					null,
					"AQAAAMUYAAAAAAAAxRgAAAAAAABVAAAAZXh0ZXJuICJDIiBWSVNJQkxFIHZvaWQganNfc2xpY2VfaXRlcmF0b3JfZXhwb3J0KEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewp9Cg",
					"AQAAAAAAAAABAAAAxRgAAAAAAAAaGQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAJUVAAAAAAAA6hUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlRUAAAAAAACVFQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"cut",
					null,
					"AQAAAEUXAAAAAAAARRcAAAAAAAAvAAAAICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiU2xpY2VJdGVyYXRvciIpOwo",
					"AQAAAAAAAAABAAAARRcAAAAAAAB0FwAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"paste",
					null,
					"AQAAAOgVAAAAAAAAFxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6BUAAAAAAADoFQAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAHMXAAAAAAAAdBcAAAAAAAAAAAAAdBcAAAAAAAB4FwAAAAAAAAAAAAB0FwAAAAAAAHQXAAAAAAAABAAAACAgICB0FwAAAAAAAHYXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcxcAAAAAAABzFwAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"paste",
					null,
					"AQAAAHYXAAAAAAAAjhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdhcAAAAAAAB2FwAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAI4XAAAAAAAAkBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjhcAAAAAAACOFwAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "ctx."
					},
					"BAAAAI8XAAAAAAAAkBcAAAAAAAAAAAAAkBcAAAAAAACRFwAAAAAAAAAAAACRFwAAAAAAAJIXAAAAAAAAAAAAAJIXAAAAAAAAkxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjxcAAAAAAACPFwAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAAJIXAAAAAAAAkhcAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAkxcAAAAAAACTFwAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": ",m"
					},
					"AgAAAJIXAAAAAAAAkxcAAAAAAAAAAAAAkxcAAAAAAACUFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkhcAAAAAAACSFwAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJUXAAAAAAAAlhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlRcAAAAAAACVFwAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJQVAAAAAAAAlRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlBUAAAAAAACUFQAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAlRUAAAAAAACVFQAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAlRUAAAAAAACVFQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAlRUAAAAAAACVFQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_slice_iterator.hpp",
			"settings":
			{
				"buffer_size": 807,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAAIcAAAAAAAAA0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANAAAAAAAAAA0QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0AAAAAAAAADQAAAAAAAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAANAAAAAAAAAA0AAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA0QAAAAAAAADRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIcAAAAAAAAAiAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAnAwAAI2lmbmRlZiBKU19TTElDRV9JVEVSQVRPUl9IUFAKI2RlZmluZSBKU19TTElDRV9JVEVSQVRPUl9IUFAKCiNpbmNsdWRlICJqc2JpbmRpbmdzLmhwcCIKI2luY2x1ZGUgImpzX3R5cGVkX2FycmF5LmhwcCIKI2luY2x1ZGUgPHJhbmdlcz4KCmV4dGVybiAiQyIgVklTSUJMRSBpbnQganNfc2xpY2VfaXRlcmF0b3JfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKZXh0ZXJuICJDIiB7CgpleHRlcm4gSlNWYWx1ZSBzbGljZV9pdGVyYXRvcl9wcm90bywgc2xpY2VfaXRlcmF0b3JfY2xhc3M7CmV4dGVybiBKU0NsYXNzSUQganNfc2xpY2VfaXRlcmF0b3JfY2xhc3NfaWQ7CgpWSVNJQkxFIEpTVmFsdWUganNfc2xpY2VfaXRlcmF0b3JfbmV3KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgYnVmZmVyLCBjb25zdCBUeXBlZEFycmF5VHlwZSYgdHlwZSwgaW50IG51bV9lbGVtcyk7CgppbnQganNfc2xpY2VfaXRlcmF0b3JfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiogbSk7CgpKU01vZHVsZURlZioganNfaW5pdF9tb2R1bGVfc2xpY2VfaXRlcmF0b3IoSlNDb250ZXh0KiwgY29uc3QgY2hhciogbW9kdWxlX25hbWUpOwp9CgpzdHJ1Y3QgSlNTbGljZUl0ZXJhdG9yRGF0YSB7CiAgdWludDhfdCogcHRyOwogIHN0ZDo6cmFuZ2VzOjpzdWJyYW5nZTx1aW50OF90Kj4gcmFuZ2U7CiAgaW50IG51bV9lbGVtczsKICBzaXplX3QgaW5jcmVtZW50OwogIFR5cGVkQXJyYXlUeXBlIHR5cGU7CiAgSlNWYWx1ZSBidWZmZXIsIGN0b3I7Cn07CgojZW5kaWYgLyogZGVmaW5lZChKU19TTElDRV9JVEVSQVRPUl9IUFApICovAAAAAAAAAAAnAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_subdiv2d.cpp",
			"settings":
			{
				"buffer_size": 10862,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAAJkAAAAAAAAA3AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJkAAAAAAAAAmgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAmgAAAAAAAACaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"cut",
					null,
					"AQAAABAqAAAAAAAAECoAAAAAAABQAAAACmV4dGVybiAiQyIgVklTSUJMRSB2b2lkIGpzX3N1YmRpdjJkX2V4cG9ydChKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG0pIHsKfQo",
					"AQAAAAAAAAABAAAAECoAAAAAAABgKgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"paste",
					null,
					"AQAAAKEnAAAAAAAA8ScAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoScAAAAAAAChJwAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"cut",
					null,
					"AQAAACkqAAAAAAAAKSoAAAAAAAAqAAAAICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiU3ViZGl2MkQiKTsK",
					"AQAAAAAAAAABAAAAKSoAAAAAAABTKgAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"paste",
					null,
					"AQAAAO8nAAAAAAAAGSgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7ycAAAAAAADvJwAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAFIqAAAAAAAAUyoAAAAAAAAAAAAAUyoAAAAAAABXKgAAAAAAAAAAAABTKgAAAAAAAFMqAAAAAAAABAAAACAgICBTKgAAAAAAAFUqAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUioAAAAAAABSKgAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"paste",
					null,
					"AQAAAFUqAAAAAAAAZyoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVSoAAAAAAABVKgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGcqAAAAAAAAaSoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZyoAAAAAAABnKgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "ctx,m"
					},
					"BQAAAGgqAAAAAAAAaSoAAAAAAAAAAAAAaSoAAAAAAABqKgAAAAAAAAAAAABqKgAAAAAAAGsqAAAAAAAAAAAAAGsqAAAAAAAAbCoAAAAAAAAAAAAAbCoAAAAAAABtKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaCoAAAAAAABoKgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAG4qAAAAAAAAbyoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbioAAAAAAABuKgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAbyoAAAAAAABvKgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAbyoAAAAAAABvKgAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB+KgAAI2luY2x1ZGUgImpzYmluZGluZ3MuaHBwIgojaW5jbHVkZSAianNfcmVjdC5ocHAiCiNpbmNsdWRlICJqc19wb2ludC5ocHAiCiNpbmNsdWRlICJqc19hbGxvYy5ocHAiCiNpbmNsdWRlICJqc19hcnJheS5ocHAiCgojaW5jbHVkZSA8b3BlbmN2Mi9pbWdwcm9jLmhwcD4KCmV4dGVybiAiQyIgVklTSUJMRSBpbnQganNfc3ViZGl2MmRfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKZXh0ZXJuICJDIiB7CkpTVmFsdWUgc3ViZGl2MmRfcHJvdG8gPSBKU19VTkRFRklORUQsIHN1YmRpdjJkX2NsYXNzID0gSlNfVU5ERUZJTkVEOwpKU0NsYXNzSUQganNfc3ViZGl2MmRfY2xhc3NfaWQgPSAwOwp9CgpKU1ZhbHVlCmpzX3N1YmRpdjJkX25ldyhKU0NvbnRleHQqIGN0eCwgSlNSZWN0RGF0YTxpbnQ+KiByZWN0ID0gbnVsbHB0cikgewogIEpTVmFsdWUgcmV0OwogIGN2OjpTdWJkaXYyRCogczsKICByZXQgPSBKU19OZXdPYmplY3RQcm90b0NsYXNzKGN0eCwgc3ViZGl2MmRfcHJvdG8sIGpzX3N1YmRpdjJkX2NsYXNzX2lkKTsKICBzID0ganNfYWxsb2NhdGU8Y3Y6OlN1YmRpdjJEPihjdHgpOwoKICBpZihyZWN0KQogICAgbmV3KHMpIGN2OjpTdWJkaXYyRCgqcmVjdCk7CiAgZWxzZQogICAgbmV3KHMpIGN2OjpTdWJkaXYyRCgpOwoKICBKU19TZXRPcGFxdWUocmV0LCBzKTsKCiAgcmV0dXJuIHJldDsKfQoKc3RhdGljIEpTVmFsdWUKanNfc3ViZGl2MmRfY3RvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG5ld190YXJnZXQsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YpIHsKICBKU1JlY3REYXRhPGludD4gcmVjdDsKCiAgaWYoYXJnYyA+IDApCiAgICBpZighanNfcmVjdF9yZWFkKGN0eCwgYXJndlswXSwgJnJlY3QpKQogICAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICByZXR1cm4ganNfc3ViZGl2MmRfbmV3KGN0eCwgYXJnYyA+IDAgPyAmcmVjdCA6IG51bGxwdHIpOwp9Cgpjdjo6U3ViZGl2MkQqCmpzX3N1YmRpdjJkX2RhdGEoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWwpIHsKICByZXR1cm4gc3RhdGljX2Nhc3Q8Y3Y6OlN1YmRpdjJEKj4oSlNfR2V0T3BhcXVlMihjdHgsIHZhbCwganNfc3ViZGl2MmRfY2xhc3NfaWQpKTsKfQoKdm9pZApqc19zdWJkaXYyZF9maW5hbGl6ZXIoSlNSdW50aW1lKiBydCwgSlNWYWx1ZSB2YWwpIHsKICBjdjo6U3ViZGl2MkQqIHMgPSBzdGF0aWNfY2FzdDxjdjo6U3ViZGl2MkQqPihKU19HZXRPcGFxdWUodmFsLCBqc19zdWJkaXYyZF9jbGFzc19pZCkpOwoKICBzLT5+U3ViZGl2MkQoKTsKICBqc19kZWFsbG9jYXRlKHJ0LCBzKTsKfQoKc3RhdGljIEpTVmFsdWUKanNfc3ViZGl2MmRfbWV0aG9kKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YsIGludCBtYWdpYykgewogIGN2OjpTdWJkaXYyRCogczsKICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDsKCiAgaWYoKHMgPSBqc19zdWJkaXYyZF9kYXRhKGN0eCwgdGhpc192YWwpKSA9PSBudWxscHRyKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgc3dpdGNoKG1hZ2ljKSB7CiAgICAvLyBpbnQgU3ViZGl2MkQ6OmVkZ2VEc3QoaW50IGVkZ2UsIFBvaW50MmYgKmRzdHB0ID0gMCkgY29uc3QKICAgIGNhc2UgMDogewogICAgICBpbnQzMl90IGVkZ2U7CiAgICAgIEpTUG9pbnREYXRhPGZsb2F0PiBkc3RwdDsKICAgICAgSlNfVG9JbnQzMihjdHgsICZlZGdlLCBhcmd2WzBdKTsKICAgICAgaWYoYXJnYyA+IDEpCiAgICAgICAganNfcG9pbnRfcmVhZChjdHgsIGFyZ3ZbMV0sICZkc3RwdCk7CiAgICAgIHJldCA9IEpTX05ld0ludDMyKGN0eCwgcy0+ZWRnZURzdChlZGdlLCBhcmdjID4gMSA/ICZkc3RwdCA6IG51bGxwdHIpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICAvLyBpbnQgU3ViZGl2MkQ6OmVkZ2VPcmcoaW50IGVkZ2UsIFBvaW50MmYgKm9yZ3B0ID0gMCkgY29uc3QKICAgIGNhc2UgMTogewogICAgICBpbnQzMl90IGVkZ2U7CiAgICAgIEpTUG9pbnREYXRhPGZsb2F0PiBvcmdwdDsKICAgICAgaWYoYXJnYyA+IDEpCiAgICAgICAganNfcG9pbnRfcmVhZChjdHgsIGFyZ3ZbMV0sICZvcmdwdCk7CiAgICAgIHJldCA9IEpTX05ld0ludDMyKGN0eCwgcy0+ZWRnZU9yZyhlZGdlLCBhcmdjID4gMSA/ICZvcmdwdCA6IG51bGxwdHIpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICAvLyBpbnQgU3ViZGl2MkQ6OmZpbmROZWFyZXN0KFBvaW50MmYgcHQsIFBvaW50MmYgKm5lYXJlc3RQdCA9IDApCiAgICBjYXNlIDI6IHsKICAgICAgSlNQb2ludERhdGE8ZmxvYXQ+IHB0LCBuZWFyZXN0UHQ7CiAgICAgIGpzX3BvaW50X3JlYWQoY3R4LCBhcmd2WzBdLCAmcHQpOwogICAgICBpZihhcmdjID4gMSkKICAgICAgICBqc19wb2ludF9yZWFkKGN0eCwgYXJndlsxXSwgJm5lYXJlc3RQdCk7CiAgICAgIHJldCA9IEpTX05ld0ludDMyKGN0eCwgcy0+ZmluZE5lYXJlc3QocHQsIGFyZ2MgPiAxID8gJm5lYXJlc3RQdCA6IG51bGxwdHIpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICAvLyBpbnQgU3ViZGl2MkQ6OmdldEVkZ2UoaW50IGVkZ2UsIGludCBuZXh0RWRnZVR5cGUpIGNvbnN0CiAgICBjYXNlIDM6IHsKICAgICAgaW50MzJfdCBlZGdlLCBuZXh0RWRnZVR5cGU7CiAgICAgIEpTX1RvSW50MzIoY3R4LCAmZWRnZSwgYXJndlswXSk7CiAgICAgIEpTX1RvSW50MzIoY3R4LCAmbmV4dEVkZ2VUeXBlLCBhcmd2WzFdKTsKICAgICAgcmV0ID0gSlNfTmV3SW50MzIoY3R4LCBzLT5nZXRFZGdlKGVkZ2UsIG5leHRFZGdlVHlwZSkpOwogICAgICBicmVhazsKICAgIH0KICAgIC8vIHZvaWQgU3ViZGl2MkQ6OmdldEVkZ2VMaXN0KHN0ZDo6dmVjdG9yPFZlYzRmPiAmZWRnZUxpc3QpIGNvbnN0CiAgICBjYXNlIDQ6IHsKICAgICAgc3RkOjp2ZWN0b3I8Y3Y6OlZlYzRmPiBlZGdlTGlzdDsKICAgICAganNfYXJyYXlfdG8oY3R4LCBhcmd2WzBdLCBlZGdlTGlzdCk7CiAgICAgIHMtPmdldEVkZ2VMaXN0KGVkZ2VMaXN0KTsKICAgICAgYnJlYWs7CiAgICB9CiAgICAvLyB2b2lkIFN1YmRpdjJEOjpnZXRMZWFkaW5nRWRnZUxpc3Qoc3RkOjp2ZWN0b3I8aW50PiAmbGVhZGluZ0VkZ2VMaXN0KSBjb25zdAogICAgY2FzZSA1OiB7CiAgICAgIHN0ZDo6dmVjdG9yPGludD4gbGVhZGluZ0VkZ2VMaXN0OwogICAgICBqc19hcnJheV90byhjdHgsIGFyZ3ZbMF0sIGxlYWRpbmdFZGdlTGlzdCk7CiAgICAgIHMtPmdldExlYWRpbmdFZGdlTGlzdChsZWFkaW5nRWRnZUxpc3QpOwogICAgICBicmVhazsKICAgIH0KICAgIC8vIHZvaWQgU3ViZGl2MkQ6OmdldFRyaWFuZ2xlTGlzdChzdGQ6OnZlY3RvcjxWZWM2Zj4gJnRyaWFuZ2xlTGlzdCkgY29uc3QKICAgIGNhc2UgNjogewogICAgICBzdGQ6OnZlY3Rvcjxjdjo6VmVjNmY+IHRyaWFuZ2xlTGlzdDsKICAgICAganNfYXJyYXlfdG8oY3R4LCBhcmd2WzBdLCB0cmlhbmdsZUxpc3QpOwogICAgICBzLT5nZXRUcmlhbmdsZUxpc3QodHJpYW5nbGVMaXN0KTsKICAgICAgYnJlYWs7CiAgICAgIGJyZWFrOwogICAgfQogICAgLy8gUG9pbnQyZiBTdWJkaXYyRDo6Z2V0VmVydGV4KGludCB2ZXJ0ZXgsIGludCAqZmlyc3RFZGdlID0gMCkgY29uc3QKICAgIGNhc2UgNzogewogICAgICBpbnQzMl90IHZlcnRleCwgZmlyc3RFZGdlID0gMDsKICAgICAgSlNfVG9JbnQzMihjdHgsICZ2ZXJ0ZXgsIGFyZ3ZbMF0pOwoKICAgICAgcmV0ID0ganNfcG9pbnRfd3JhcChjdHgsIHMtPmdldFZlcnRleCh2ZXJ0ZXgsICZmaXJzdEVkZ2UpKTsKCiAgICAgIGlmKGFyZ2MgPiAxKSB7CiAgICAgICAgSlNWYWx1ZSB2YWwgPSBKU19OZXdJbnQzMihjdHgsIGZpcnN0RWRnZSk7CiAgICAgICAganNfcmVmKGN0eCwgImZpcnN0RWRnZSIsIGFyZ3ZbMV0sIHZhbCk7CiAgICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsKTsKICAgICAgfQogICAgICBicmVhazsKICAgIH0KICAgIC8vIHZvaWQgU3ViZGl2MkQ6OmdldFZvcm9ub2lGYWNldExpc3QoY29uc3Qgc3RkOjp2ZWN0b3I8aW50PiAmaWR4LAogICAgLy8gc3RkOjp2ZWN0b3I8c3RkOjp2ZWN0b3I8UG9pbnQyZj4+ICZmYWNldExpc3QsIHN0ZDo6dmVjdG9yPFBvaW50MmY+ICZmYWNldENlbnRlcnMpCiAgICBjYXNlIDg6IHsKICAgICAgc3RkOjp2ZWN0b3I8aW50PiBpZHg7CiAgICAgIEpTQ29udG91cnNEYXRhPGZsb2F0PiBmYWNldExpc3Q7CiAgICAgIHN0ZDo6dmVjdG9yPEpTUG9pbnREYXRhPGZsb2F0Pj4gZmFjZXRDZW50ZXJzOwogICAgICBqc19hcnJheV90byhjdHgsIGFyZ3ZbMF0sIGlkeCk7CiAgICAgIGpzX2FycmF5X3RvKGN0eCwgYXJndlsxXSwgZmFjZXRMaXN0KTsKICAgICAganNfYXJyYXlfdG8oY3R4LCBhcmd2WzJdLCBmYWNldENlbnRlcnMpOwogICAgICBzLT5nZXRWb3Jvbm9pRmFjZXRMaXN0KGlkeCwgZmFjZXRMaXN0LCBmYWNldENlbnRlcnMpOwogICAgICBicmVhazsKICAgIH0KICAgIC8vIHZvaWQgU3ViZGl2MkQ6OmluaXREZWxhdW5heShSZWN0IHJlY3QpCiAgICBjYXNlIDk6IHsKICAgICAgSlNSZWN0RGF0YTxpbnQ+IHJlY3Q7CiAgICAgIGpzX3JlY3RfcmVhZChjdHgsIGFyZ3ZbMF0sICZyZWN0KTsKICAgICAgcy0+aW5pdERlbGF1bmF5KHJlY3QpOwogICAgICBicmVhazsKICAgIH0KICAgICAgLy8gaW50IFN1YmRpdjJEOjppbnNlcnQoUG9pbnQyZiBwdCkKICAgICAgLy8gdm9pZCBTdWJkaXYyRDo6aW5zZXJ0KGNvbnN0IHN0ZDo6dmVjdG9yPFBvaW50MmY+ICZwdHZlYykKICAgIGNhc2UgMTA6IHsKICAgICAgSlNQb2ludERhdGE8ZmxvYXQ+IHB0OwogICAgICBpZighanNfcG9pbnRfcmVhZChjdHgsIGFyZ3ZbMF0sICZwdCkpIHsKICAgICAgICBzdGQ6OnZlY3RvcjxKU1BvaW50RGF0YTxmbG9hdD4+IHB0dmVjOwogICAgICAgIGpzX2FycmF5X3RvKGN0eCwgYXJndlswXSwgcHR2ZWMpOwogICAgICAgIHMtPmluc2VydChwdHZlYyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcy0+aW5zZXJ0KHB0KTsKICAgICAgfQogICAgICBicmVhazsKICAgIH0KCiAgICAvLyBpbnQgU3ViZGl2MkQ6OmxvY2F0ZShQb2ludDJmIHB0LCBpbnQgJmVkZ2UsIGludCAmdmVydGV4KQogICAgY2FzZSAxMTogewogICAgICBKU1BvaW50RGF0YTxmbG9hdD4gcHQ7CiAgICAgIGpzX3BvaW50X3JlYWQoY3R4LCBhcmd2WzBdLCAmcHQpOwogICAgICBpbnQzMl90IGVkZ2UgPSAwLCB2ZXJ0ZXggPSAwOwogICAgICByZXQgPSBKU19OZXdJbnQzMihjdHgsIHMtPmxvY2F0ZShwdCwgZWRnZSwgdmVydGV4KSk7CiAgICAgIGlmKGFyZ2MgPiAxKSB7CiAgICAgICAgSlNWYWx1ZSB2YWwgPSBKU19OZXdJbnQzMihjdHgsIGVkZ2UpOwogICAgICAgIGpzX3JlZihjdHgsICJlZGdlIiwgYXJndlsxXSwgdmFsKTsKICAgICAgICBKU19GcmVlVmFsdWUoY3R4LCB2YWwpOwogICAgICB9CiAgICAgIGlmKGFyZ2MgPiAyKSB7CiAgICAgICAgSlNWYWx1ZSB2YWwgPSBKU19OZXdJbnQzMihjdHgsIHZlcnRleCk7CiAgICAgICAganNfcmVmKGN0eCwgInZlcnRleCIsIGFyZ3ZbMV0sIHZhbCk7CiAgICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsKTsKICAgICAgfQogICAgICBicmVhazsKICAgIH0KICAgIC8vIGludCBTdWJkaXYyRDo6bmV4dEVkZ2UoaW50IGVkZ2UpIGNvbnN0CiAgICBjYXNlIDEyOiB7CiAgICAgIGludDMyX3QgZWRnZTsKICAgICAgSlNfVG9JbnQzMihjdHgsICZlZGdlLCBhcmd2WzBdKTsKICAgICAgcmV0ID0gSlNfTmV3SW50MzIoY3R4LCBzLT5uZXh0RWRnZShlZGdlKSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgLy8gaW50IFN1YmRpdjJEOjpyb3RhdGVFZGdlKGludCBlZGdlLCBpbnQgcm90YXRlKSBjb25zdAogICAgY2FzZSAxMzogewogICAgICBpbnQzMl90IGVkZ2UsIHJvdGF0ZTsKICAgICAgSlNfVG9JbnQzMihjdHgsICZlZGdlLCBhcmd2WzBdKTsKICAgICAgSlNfVG9JbnQzMihjdHgsICZyb3RhdGUsIGFyZ3ZbMV0pOwogICAgICByZXQgPSBKU19OZXdJbnQzMihjdHgsIHMtPnJvdGF0ZUVkZ2UoZWRnZSwgcm90YXRlKSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgLy8gaW50IFN1YmRpdjJEOjpzeW1FZGdlKGludCBlZGdlKSBjb25zdAogICAgY2FzZSAxNDogewogICAgICBpbnQzMl90IGVkZ2U7CiAgICAgIEpTX1RvSW50MzIoY3R4LCAmZWRnZSwgYXJndlswXSk7CiAgICAgIHJldCA9IEpTX05ld0ludDMyKGN0eCwgcy0+c3ltRWRnZShlZGdlKSk7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICByZXR1cm4gcmV0Owp9CgpKU0NsYXNzRGVmIGpzX3N1YmRpdjJkX2NsYXNzID0gewogICAgLmNsYXNzX25hbWUgPSAiU3ViZGl2MkQiLAogICAgLmZpbmFsaXplciA9IGpzX3N1YmRpdjJkX2ZpbmFsaXplciwKfTsKCmNvbnN0IEpTQ0Z1bmN0aW9uTGlzdEVudHJ5IGpzX3N1YmRpdjJkX3Byb3RvX2Z1bmNzW10gPSB7SlNfQ0ZVTkNfTUFHSUNfREVGKCJlZGdlRHN0IiwgMSwganNfc3ViZGl2MmRfbWV0aG9kLCAwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DRlVOQ19NQUdJQ19ERUYoImVkZ2VPcmciLCAxLCBqc19zdWJkaXYyZF9tZXRob2QsIDEpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZmluZE5lYXJlc3QiLCAxLCBqc19zdWJkaXYyZF9tZXRob2QsIDIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZ2V0RWRnZSIsIDIsIGpzX3N1YmRpdjJkX21ldGhvZCwgMyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJnZXRFZGdlTGlzdCIsIDEsIGpzX3N1YmRpdjJkX21ldGhvZCwgNCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJnZXRMZWFkaW5nRWRnZUxpc3QiLCAxLCBqc19zdWJkaXYyZF9tZXRob2QsIDUpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZ2V0VHJpYW5nbGVMaXN0IiwgMSwganNfc3ViZGl2MmRfbWV0aG9kLCA2KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DRlVOQ19NQUdJQ19ERUYoImdldFZlcnRleCIsIDEsIGpzX3N1YmRpdjJkX21ldGhvZCwgNyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJnZXRWb3Jvbm9pRmFjZXRMaXN0IiwgMywganNfc3ViZGl2MmRfbWV0aG9kLCA4KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DRlVOQ19NQUdJQ19ERUYoImluaXREZWxhdW5heSIsIDEsIGpzX3N1YmRpdjJkX21ldGhvZCwgOSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJpbnNlcnQiLCAxLCBqc19zdWJkaXYyZF9tZXRob2QsIDEwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DRlVOQ19NQUdJQ19ERUYoImxvY2F0ZSIsIDMsIGpzX3N1YmRpdjJkX21ldGhvZCwgMTEpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigibmV4dEVkZ2UiLCAxLCBqc19zdWJkaXYyZF9tZXRob2QsIDEyKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DRlVOQ19NQUdJQ19ERUYoInJvdGF0ZUVkZ2UiLCAyLCBqc19zdWJkaXYyZF9tZXRob2QsIDEzKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DRlVOQ19NQUdJQ19ERUYoInN5bUVkZ2UiLCAxLCBqc19zdWJkaXYyZF9tZXRob2QsIDE0KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19QUk9QX1NUUklOR19ERUYoIltTeW1ib2wudG9TdHJpbmdUYWddIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlN1YmRpdjJEIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNfUFJPUF9DT05GSUdVUkFCTEUpfTsKCmNvbnN0IEpTQ0Z1bmN0aW9uTGlzdEVudHJ5IGpzX3N1YmRpdjJkX3N0YXRpY19mdW5jc1tdID0gewogICAgSlNfUFJPUF9JTlQzMl9ERUYoIlBUTE9DX0VSUk9SIiwgY3Y6OlN1YmRpdjJEOjpQVExPQ19FUlJPUiwgMCksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiUFRMT0NfT1VUU0lERV9SRUNUIiwgY3Y6OlN1YmRpdjJEOjpQVExPQ19PVVRTSURFX1JFQ1QsIDApLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIlBUTE9DX0lOU0lERSIsIGN2OjpTdWJkaXYyRDo6UFRMT0NfSU5TSURFLCAwKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJQVExPQ19WRVJURVgiLCBjdjo6U3ViZGl2MkQ6OlBUTE9DX1ZFUlRFWCwgMCksCgogICAgSlNfUFJPUF9JTlQzMl9ERUYoIk5FWFRfQVJPVU5EX09SRyIsIGN2OjpTdWJkaXYyRDo6TkVYVF9BUk9VTkRfT1JHLCAwKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJORVhUX0FST1VORF9EU1QiLCBjdjo6U3ViZGl2MkQ6Ok5FWFRfQVJPVU5EX0RTVCwgMCksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiUFJFVl9BUk9VTkRfT1JHIiwgY3Y6OlN1YmRpdjJEOjpQUkVWX0FST1VORF9PUkcsIDApLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIlBSRVZfQVJPVU5EX0RTVCIsIGN2OjpTdWJkaXYyRDo6UFJFVl9BUk9VTkRfRFNULCAwKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJORVhUX0FST1VORF9MRUZUIiwgY3Y6OlN1YmRpdjJEOjpORVhUX0FST1VORF9MRUZULCAwKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJORVhUX0FST1VORF9SSUdIVCIsIGN2OjpTdWJkaXYyRDo6TkVYVF9BUk9VTkRfUklHSFQsIDApLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIlBSRVZfQVJPVU5EX0xFRlQiLCBjdjo6U3ViZGl2MkQ6OlBSRVZfQVJPVU5EX0xFRlQsIDApfTsKCmV4dGVybiAiQyIgaW50CmpzX3N1YmRpdjJkX2luaXQoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtKSB7CgogIGlmKGpzX3N1YmRpdjJkX2NsYXNzX2lkID09IDApIHsKICAgIC8qIGNyZWF0ZSB0aGUgU3ViZGl2MkQgY2xhc3MgKi8KICAgIEpTX05ld0NsYXNzSUQoJmpzX3N1YmRpdjJkX2NsYXNzX2lkKTsKICAgIEpTX05ld0NsYXNzKEpTX0dldFJ1bnRpbWUoY3R4KSwganNfc3ViZGl2MmRfY2xhc3NfaWQsICZqc19zdWJkaXYyZF9jbGFzcyk7CgogICAgc3ViZGl2MmRfcHJvdG8gPSBKU19OZXdPYmplY3QoY3R4KTsKICAgIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgc3ViZGl2MmRfcHJvdG8sIGpzX3N1YmRpdjJkX3Byb3RvX2Z1bmNzLCBjb3VudG9mKGpzX3N1YmRpdjJkX3Byb3RvX2Z1bmNzKSk7CiAgICBKU19TZXRDbGFzc1Byb3RvKGN0eCwganNfc3ViZGl2MmRfY2xhc3NfaWQsIHN1YmRpdjJkX3Byb3RvKTsKCiAgICBzdWJkaXYyZF9jbGFzcyA9IEpTX05ld0NGdW5jdGlvbjIoY3R4LCBqc19zdWJkaXYyZF9jdG9yLCAiU3ViZGl2MkQiLCAyLCBKU19DRlVOQ19jb25zdHJ1Y3RvciwgMCk7CiAgICAvKiBzZXQgcHJvdG8uY29uc3RydWN0b3IgYW5kIGN0b3IucHJvdG90eXBlICovCiAgICBKU19TZXRDb25zdHJ1Y3RvcihjdHgsIHN1YmRpdjJkX2NsYXNzLCBzdWJkaXYyZF9wcm90byk7CiAgICBKU19TZXRQcm9wZXJ0eUZ1bmN0aW9uTGlzdChjdHgsIHN1YmRpdjJkX2NsYXNzLCBqc19zdWJkaXYyZF9zdGF0aWNfZnVuY3MsIGNvdW50b2YoanNfc3ViZGl2MmRfc3RhdGljX2Z1bmNzKSk7CiAgfQoKICBpZihtKQogICAgSlNfU2V0TW9kdWxlRXhwb3J0KGN0eCwgbSwgIlN1YmRpdjJEIiwgc3ViZGl2MmRfY2xhc3MpOwoKICByZXR1cm4gMDsKfQoKZXh0ZXJuICJDIiBWSVNJQkxFIHZvaWQKanNfc3ViZGl2MmRfZXhwb3J0KEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJTdWJkaXYyRCIpOwp9Cgp2b2lkCmpzX3N1YmRpdjJkX2NvbnN0cnVjdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlIHBhcmVudCwgY29uc3QgY2hhciogbmFtZSkgewogIGlmKEpTX0lzVW5kZWZpbmVkKHN1YmRpdjJkX2NsYXNzKSkKICAgIGpzX3N1YmRpdjJkX2luaXQoY3R4LCAwKTsKCiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBwYXJlbnQsIG5hbWUgPyBuYW1lIDogIlN1YmRpdjJEIiwgc3ViZGl2MmRfY2xhc3MpOwp9CgojaWYgZGVmaW5lZChKU19TVUJESVYyRF9NT0RVTEUpCiNkZWZpbmUgSlNfSU5JVF9NT0RVTEUgLypWSVNJQkxFKi8ganNfaW5pdF9tb2R1bGUKI2Vsc2UKI2RlZmluZSBKU19JTklUX01PRFVMRSAvKlZJU0lCTEUqLyBqc19pbml0X21vZHVsZV9zdWJkaXYyZAojZW5kaWYKCmV4dGVybiAiQyIgSlNNb2R1bGVEZWYqCkpTX0lOSVRfTU9EVUxFKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBtb2R1bGVfbmFtZSkgewogIEpTTW9kdWxlRGVmKiBtOwogIG0gPSBKU19OZXdDTW9kdWxlKGN0eCwgbW9kdWxlX25hbWUsICZqc19zdWJkaXYyZF9pbml0KTsKICBpZighbSkKICAgIHJldHVybiBOVUxMOwogIGpzX3N1YmRpdjJkX2V4cG9ydChjdHgsIG0pOwogIHJldHVybiBtOwp9AAAAAAAAAABuKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbyoAAAAAAABvKgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_umat.cpp",
			"settings":
			{
				"buffer_size": 29746,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"cut",
					null,
					"AQAAAORzAAAAAAAA5HMAAAAAAABLAAAAZXh0ZXJuICJDIiBWSVNJQkxFIHZvaWQganNfdW1hdF9leHBvcnQoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtKSB7Cn0K",
					"AQAAAAAAAAABAAAA5HMAAAAAAAAvdAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAGFyAAAAAAAArHIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYXIAAAAAAABhcgAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGFyAAAAAAAAYnIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYXIAAAAAAABhcgAAAAAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"cut",
					null,
					"AQAAAP1zAAAAAAAA/XMAAAAAAAAmAAAAICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiVU1hdCIpOwo",
					"AQAAAAAAAAABAAAA/XMAAAAAAAAjdAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"paste",
					null,
					"AQAAAKtyAAAAAAAA0XIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAq3IAAAAAAACrcgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAACJ0AAAAAAAAI3QAAAAAAAAAAAAAI3QAAAAAAAAndAAAAAAAAAAAAAAjdAAAAAAAACN0AAAAAAAABAAAACAgICAjdAAAAAAAACV0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAInQAAAAAAAAidAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"paste",
					null,
					"AQAAACV0AAAAAAAAM3QAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJXQAAAAAAAAldAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADN0AAAAAAAANXQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAM3QAAAAAAAAzdAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "ctx,m"
					},
					"BQAAADR0AAAAAAAANXQAAAAAAAAAAAAANXQAAAAAAAA2dAAAAAAAAAAAAAA2dAAAAAAAADd0AAAAAAAAAAAAADd0AAAAAAAAOHQAAAAAAAAAAAAAOHQAAAAAAAA5dAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANHQAAAAAAAA0dAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADp0AAAAAAAAO3QAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOnQAAAAAAAA6dAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAO3QAAAAAAAA7dAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAO3QAAAAAAAA7dAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAHJzAAAAAAAAc3MAAAAAAAAAAAAAc3MAAAAAAABzcwAAAAAAAAcAAABWSVNJQkxF",
					"AQAAAAAAAAABAAAAcnMAAAAAAAB5cwAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					2,
					"left_delete",
					null,
					"AgAAAAhzAAAAAAAACHMAAAAAAAABAAAAKgdzAAAAAAAAB3MAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAACXMAAAAAAAAJcwAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					2,
					"left_delete",
					null,
					"AgAAAA9zAAAAAAAAD3MAAAAAAAABAAAALw5zAAAAAAAADnMAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAAEHMAAAAAAAAQcwAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAADpzAAAAAAAAO3MAAAAAAAAAAAAAO3MAAAAAAAA7cwAAAAAAAA0AAAAgLypWSVNJQkxFKi8g",
					"AQAAAAAAAAABAAAAOnMAAAAAAABHcwAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAO3MAAAAAAAA7cwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_umat.hpp",
			"settings":
			{
				"buffer_size": 1863,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAAHMAAAAAAAAAsgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwAAAAAAAABzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHMAAAAAAAAAdAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwAAAAAAAABzAAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABHBwAAI2lmbmRlZiBKU19VTUFUX0hQUAojZGVmaW5lIEpTX1VNQVRfSFBQCgojaW5jbHVkZSAianNiaW5kaW5ncy5ocHAiCiNpbmNsdWRlICJqc19hbGxvYy5ocHAiCiNpbmNsdWRlICJqc19hcnJheS5ocHAiCgpleHRlcm4gIkMiIFZJU0lCTEUgaW50IGpzX3VtYXRfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKZXh0ZXJuICJDIiB7CgpleHRlcm4gSlNWYWx1ZSB1bWF0X3Byb3RvLCB1bWF0X2NsYXNzOwpleHRlcm4gSlNDbGFzc0lEIGpzX3VtYXRfY2xhc3NfaWQ7CgpWSVNJQkxFIEpTVmFsdWUganNfdW1hdF9uZXcoSlNDb250ZXh0KiwgdWludDMyX3QsIHVpbnQzMl90LCBpbnQpOwppbnQganNfdW1hdF9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CkpTTW9kdWxlRGVmKiBqc19pbml0X3VtYXRfbW9kdWxlKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBtb2R1bGVfbmFtZSk7CnZvaWQganNfdW1hdF9jb25zdHJ1Y3RvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSBwYXJlbnQsIGNvbnN0IGNoYXIqIG5hbWUpOwoKVklTSUJMRSBKU1VNYXREYXRhKiBqc191bWF0X2RhdGEoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWwpOwoKc3RhdGljIGlubGluZSBKU0lucHV0T3V0cHV0QXJyYXkKanNfdW1hdF9vcl9tYXQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGN2OjpNYXQqIG1hdDsKICBjdjo6VU1hdCogdW1hdDsKCiAgaWYoKHVtYXQgPSBzdGF0aWNfY2FzdDxjdjo6VU1hdCo+KEpTX0dldE9wYXF1ZSh2YWx1ZSwganNfdW1hdF9jbGFzc19pZCkpKSkKICAgIHJldHVybiBKU0lucHV0T3V0cHV0QXJyYXkoKnVtYXQpOwogIGlmKChtYXQgPSBzdGF0aWNfY2FzdDxjdjo6TWF0Kj4oSlNfR2V0T3BhcXVlKHZhbHVlLCBqc19tYXRfY2xhc3NfaWQpKSkpCiAgICByZXR1cm4gSlNJbnB1dE91dHB1dEFycmF5KCptYXQpOwoKICByZXR1cm4gY3Y6Om5vQXJyYXkoKTsKfQoKc3RhdGljIGlubGluZSBKU0lucHV0QXJyYXkKanNfaW5wdXRfYXJyYXkoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGN2OjpNYXQqIG1hdDsKICBjdjo6VU1hdCogdW1hdDsKCiAgaWYoKHVtYXQgPSBzdGF0aWNfY2FzdDxjdjo6VU1hdCo+KEpTX0dldE9wYXF1ZSh2YWx1ZSwganNfdW1hdF9jbGFzc19pZCkpKSkKICAgIHJldHVybiBKU0lucHV0QXJyYXkoKnVtYXQpOwogIGlmKChtYXQgPSBzdGF0aWNfY2FzdDxjdjo6TWF0Kj4oSlNfR2V0T3BhcXVlKHZhbHVlLCBqc19tYXRfY2xhc3NfaWQpKSkpCiAgICByZXR1cm4gSlNJbnB1dEFycmF5KCptYXQpOwoKICBpZihqc19pc19hcnJheShjdHgsIHZhbHVlKSkgewogICAgc3RkOjp2ZWN0b3I8ZG91YmxlPiBhcnI7CiAgICBjdjo6U2NhbGFyIHNjYWxhcjsKICAgIGpzX2FycmF5X3RvKGN0eCwgdmFsdWUsIGFycik7CiAgICBmb3Ioc2l6ZV90IGkgPSAwOyBpIDwgYXJyLnNpemUoKTsgaSsrKSBzY2FsYXJbaV0gPSBhcnJbaV07CiAgICByZXR1cm4gSlNJbnB1dEFycmF5KHNjYWxhcik7CiAgfQoKICByZXR1cm4gY3Y6Om5vQXJyYXkoKTsKfQoKc3RhdGljIGlubGluZSBKU1ZhbHVlCmpzX3VtYXRfd3JhcChKU0NvbnRleHQqIGN0eCwgY29uc3QgY3Y6OlVNYXQmIHVtYXQpIHsKICBKU1ZhbHVlIHJldDsKICBKU1VNYXREYXRhKiBzOwogIHJldCA9IEpTX05ld09iamVjdFByb3RvQ2xhc3MoY3R4LCB1bWF0X3Byb3RvLCBqc191bWF0X2NsYXNzX2lkKTsKCiAgcyA9IGpzX2FsbG9jYXRlPGN2OjpVTWF0PihjdHgpOwoKICBuZXcocykgY3Y6OlVNYXQodW1hdCk7CgogIEpTX1NldE9wYXF1ZShyZXQsIHMpOwogIHJldHVybiByZXQ7Cn0KfQoKI2VuZGlmIC8qIGRlZmluZWQoSlNfVU1BVF9IUFApICovAAAAAAAAAABHBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAAAAAAAAAB0AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_utility.cpp",
			"settings":
			{
				"buffer_size": 5972,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAADIAAAAAAAAAdAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgAAAAAAAAAyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADIAAAAAAAAAMwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgAAAAAAAAAyAAAAAAAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD4FgAAI2luY2x1ZGUgImpzYmluZGluZ3MuaHBwIgojaW5jbHVkZSAianNfYWxsb2MuaHBwIgoKZXh0ZXJuICJDIiBWSVNJQkxFIGludCBqc191dGlsaXR5X2luaXQoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKCmV4dGVybiAiQyIgewoKSlNWYWx1ZSB0aWNrX21ldGVyX3Byb3RvID0gSlNfVU5ERUZJTkVELCB0aWNrX21ldGVyX2NsYXNzID0gSlNfVU5ERUZJTkVEOwpKU0NsYXNzSUQganNfdGlja19tZXRlcl9jbGFzc19pZCA9IDA7CgpWSVNJQkxFIEpTVmFsdWUKanNfdGlja19tZXRlcl9uZXcoSlNDb250ZXh0KiBjdHgpIHsKICBKU1ZhbHVlIHJldDsKICBKU1RpY2tNZXRlckRhdGEqIHM7CgogIHJldCA9IEpTX05ld09iamVjdFByb3RvQ2xhc3MoY3R4LCB0aWNrX21ldGVyX3Byb3RvLCBqc190aWNrX21ldGVyX2NsYXNzX2lkKTsKCiAgcyA9IGpzX2FsbG9jYXRlPEpTVGlja01ldGVyRGF0YT4oY3R4KTsKCiAgbmV3KHMpIGN2OjpUaWNrTWV0ZXIoKTsKCiAgSlNfU2V0T3BhcXVlKHJldCwgcyk7CiAgcmV0dXJuIHJldDsKfQoKc3RhdGljIEpTVmFsdWUKanNfdGlja19tZXRlcl9jdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgbmV3X3RhcmdldCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCogYXJndikgewogIEpTVGlja01ldGVyRGF0YSogczsKICBKU1ZhbHVlIG9iaiA9IEpTX1VOREVGSU5FRDsKICBKU1ZhbHVlIHByb3RvOwoKICBzID0ganNfYWxsb2NhdGU8SlNUaWNrTWV0ZXJEYXRhPihjdHgpOwogIGlmKCFzKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKICBuZXcocykgY3Y6OlRpY2tNZXRlcigpOwoKICAvKiB1c2luZyBuZXdfdGFyZ2V0IHRvIGdldCB0aGUgcHJvdG90eXBlIGlzIG5lY2Vzc2FyeSB3aGVuIHRoZQogICAgIGNsYXNzIGlzIGV4dGVuZGVkLiAqLwogIHByb3RvID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBuZXdfdGFyZ2V0LCAicHJvdG90eXBlIik7CiAgaWYoSlNfSXNFeGNlcHRpb24ocHJvdG8pKQogICAgZ290byBmYWlsOwogIG9iaiA9IEpTX05ld09iamVjdFByb3RvQ2xhc3MoY3R4LCBwcm90bywganNfdGlja19tZXRlcl9jbGFzc19pZCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgcHJvdG8pOwogIGlmKEpTX0lzRXhjZXB0aW9uKG9iaikpCiAgICBnb3RvIGZhaWw7CiAgSlNfU2V0T3BhcXVlKG9iaiwgcyk7CiAgcmV0dXJuIG9iajsKZmFpbDoKICBqc19kZWFsbG9jYXRlKGN0eCwgcyk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgb2JqKTsKICByZXR1cm4gSlNfRVhDRVBUSU9OOwp9CgpKU1RpY2tNZXRlckRhdGEqCmpzX3RpY2tfbWV0ZXJfZGF0YShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbCkgewogIHJldHVybiBzdGF0aWNfY2FzdDxKU1RpY2tNZXRlckRhdGEqPihKU19HZXRPcGFxdWUyKGN0eCwgdmFsLCBqc190aWNrX21ldGVyX2NsYXNzX2lkKSk7Cn0KCnZvaWQKanNfdGlja19tZXRlcl9maW5hbGl6ZXIoSlNSdW50aW1lKiBydCwgSlNWYWx1ZSB2YWwpIHsKICBKU1RpY2tNZXRlckRhdGEqIHMgPSBzdGF0aWNfY2FzdDxKU1RpY2tNZXRlckRhdGEqPihKU19HZXRPcGFxdWUodmFsLCBqc190aWNrX21ldGVyX2NsYXNzX2lkKSk7CiAgLyogTm90ZTogJ3MnIGNhbiBiZSBOVUxMIGluIGNhc2UgSlNfU2V0T3BhcXVlKCkgd2FzIG5vdCBjYWxsZWQgKi8KICBqc19kZWFsbG9jYXRlKHJ0LCBzKTsKfQoKc3RhdGljIEpTVmFsdWUKanNfdGlja19tZXRlcl9nZXQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IG1hZ2ljKSB7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CiAgSlNUaWNrTWV0ZXJEYXRhKiBzID0gc3RhdGljX2Nhc3Q8SlNUaWNrTWV0ZXJEYXRhKj4oSlNfR2V0T3BhcXVlMihjdHgsIHRoaXNfdmFsLCBqc190aWNrX21ldGVyX2NsYXNzX2lkKSk7CiAgaWYoIXMpCiAgICByZXQgPSBKU19FWENFUFRJT047CiAgZWxzZSBpZihtYWdpYyA9PSAwKQogICAgcmV0ID0gSlNfTmV3SW50NjQoY3R4LCBzLT5nZXRDb3VudGVyKCkpOwogIGVsc2UgaWYobWFnaWMgPT0gMSkKICAgIHJldCA9IEpTX05ld0Zsb2F0NjQoY3R4LCBzLT5nZXRUaW1lTWljcm8oKSk7CiAgZWxzZSBpZihtYWdpYyA9PSAyKQogICAgcmV0ID0gSlNfTmV3RmxvYXQ2NChjdHgsIHMtPmdldFRpbWVNaWxsaSgpKTsKICBlbHNlIGlmKG1hZ2ljID09IDMpCiAgICByZXQgPSBKU19OZXdGbG9hdDY0KGN0eCwgcy0+Z2V0VGltZVNlYygpKTsKICBlbHNlIGlmKG1hZ2ljID09IDQpCiAgICByZXQgPSBKU19OZXdJbnQ2NChjdHgsIHMtPmdldFRpbWVUaWNrcygpKTsKI2lmIENWX1ZFUlNJT05fTUFKT1IgPj0gNCAmJiBDVl9WRVJTSU9OX01JTk9SID49IDQKICBlbHNlIGlmKG1hZ2ljID09IDUpCiAgICByZXQgPSBKU19OZXdGbG9hdDY0KGN0eCwgcy0+Z2V0QXZnVGltZU1pbGxpKCkpOwogIGVsc2UgaWYobWFnaWMgPT0gNikKICAgIHJldCA9IEpTX05ld0Zsb2F0NjQoY3R4LCBzLT5nZXRBdmdUaW1lU2VjKCkpOwogIGVsc2UgaWYobWFnaWMgPT0gNykKICAgIHJldCA9IEpTX05ld0Zsb2F0NjQoY3R4LCBzLT5nZXRGUFMoKSk7CiNlbmRpZgogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX3RpY2tfbWV0ZXJfbWV0aG9kKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YsIGludCBtYWdpYykgewogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwogIEpTVGlja01ldGVyRGF0YSogcyA9IHN0YXRpY19jYXN0PEpTVGlja01ldGVyRGF0YSo+KEpTX0dldE9wYXF1ZTIoY3R4LCB0aGlzX3ZhbCwganNfdGlja19tZXRlcl9jbGFzc19pZCkpOwogIGlmKCFzKQogICAgcmV0ID0gSlNfRVhDRVBUSU9OOwogIGVsc2UgaWYobWFnaWMgPT0gMCkKICAgIHMtPnJlc2V0KCk7CiAgZWxzZSBpZihtYWdpYyA9PSAxKQogICAgcy0+c3RhcnQoKTsKICBlbHNlIGlmKG1hZ2ljID09IDIpCiAgICBzLT5zdG9wKCk7CgogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX3RpY2tfbWV0ZXJfdG9zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCogYXJndikgewogIEpTVGlja01ldGVyRGF0YSogczsKCiAgaWYoKHMgPSBzdGF0aWNfY2FzdDxKU1RpY2tNZXRlckRhdGEqPihKU19HZXRPcGFxdWUyKGN0eCwgdGhpc192YWwsIGpzX3RpY2tfbWV0ZXJfY2xhc3NfaWQpKSkpIHsKICAgIHN0ZDo6b3N0cmluZ3N0cmVhbSBvczsKICAgIG9zIDw8ICpzOwogICAgc3RkOjpzdHJpbmcgc3RyID0gb3Muc3RyKCk7CiAgICByZXR1cm4gSlNfTmV3U3RyaW5nTGVuKGN0eCwgc3RyLmRhdGEoKSwgc3RyLnNpemUoKSk7CiAgfQoKICByZXR1cm4gSlNfRVhDRVBUSU9OOwp9CgpKU0NsYXNzRGVmIGpzX3RpY2tfbWV0ZXJfY2xhc3MgPSB7CiAgICAuY2xhc3NfbmFtZSA9ICJUaWNrTWV0ZXIiLAogICAgLmZpbmFsaXplciA9IGpzX3RpY2tfbWV0ZXJfZmluYWxpemVyLAp9OwoKY29uc3QgSlNDRnVuY3Rpb25MaXN0RW50cnkganNfdGlja19tZXRlcl9wcm90b19mdW5jc1tdID0gewogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJyZXNldCIsIDAsIGpzX3RpY2tfbWV0ZXJfbWV0aG9kLCAwKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigic3RhcnQiLCAwLCBqc190aWNrX21ldGVyX21ldGhvZCwgMSksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoInN0b3AiLCAwLCBqc190aWNrX21ldGVyX21ldGhvZCwgMiksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigiY291bnRlciIsIGpzX3RpY2tfbWV0ZXJfZ2V0LCBOVUxMLCAwKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJ0aW1lTWljcm8iLCBqc190aWNrX21ldGVyX2dldCwgTlVMTCwgMSksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigidGltZU1pbGxpIiwganNfdGlja19tZXRlcl9nZXQsIE5VTEwsIDIpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInRpbWVTZWMiLCBqc190aWNrX21ldGVyX2dldCwgTlVMTCwgMyksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigidGltZVRpY2tzIiwganNfdGlja19tZXRlcl9nZXQsIE5VTEwsIDQpLAojaWYgQ1ZfVkVSU0lPTl9NQUpPUiA+PSA0ICYmIENWX1ZFUlNJT05fTUlOT1IgPj0gNAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoImF2Z1RpbWVNaWxsaSIsIGpzX3RpY2tfbWV0ZXJfZ2V0LCBOVUxMLCA1KSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJhdmdUaW1lU2VjIiwganNfdGlja19tZXRlcl9nZXQsIE5VTEwsIDYpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoImZwcyIsIGpzX3RpY2tfbWV0ZXJfZ2V0LCBOVUxMLCA3KSwKI2VuZGlmCiAgICBKU19DRlVOQ19ERUYoInRvU3RyaW5nIiwgMCwganNfdGlja19tZXRlcl90b3N0cmluZyksCgogICAgSlNfUFJPUF9TVFJJTkdfREVGKCJbU3ltYm9sLnRvU3RyaW5nVGFnXSIsICJUaWNrTWV0ZXIiLCBKU19QUk9QX0NPTkZJR1VSQUJMRSksCn07CgpleHRlcm4gIkMiIGludApqc191dGlsaXR5X2luaXQoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtKSB7CgogIGlmKGpzX3RpY2tfbWV0ZXJfY2xhc3NfaWQgPT0gMCkgewogICAgLyogY3JlYXRlIHRoZSBUaWNrTWV0ZXIgY2xhc3MgKi8KICAgIEpTX05ld0NsYXNzSUQoJmpzX3RpY2tfbWV0ZXJfY2xhc3NfaWQpOwogICAgSlNfTmV3Q2xhc3MoSlNfR2V0UnVudGltZShjdHgpLCBqc190aWNrX21ldGVyX2NsYXNzX2lkLCAmanNfdGlja19tZXRlcl9jbGFzcyk7CgogICAgdGlja19tZXRlcl9wcm90byA9IEpTX05ld09iamVjdChjdHgpOwogICAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCB0aWNrX21ldGVyX3Byb3RvLCBqc190aWNrX21ldGVyX3Byb3RvX2Z1bmNzLCBjb3VudG9mKGpzX3RpY2tfbWV0ZXJfcHJvdG9fZnVuY3MpKTsKICAgIEpTX1NldENsYXNzUHJvdG8oY3R4LCBqc190aWNrX21ldGVyX2NsYXNzX2lkLCB0aWNrX21ldGVyX3Byb3RvKTsKCiAgICB0aWNrX21ldGVyX2NsYXNzID0gSlNfTmV3Q0Z1bmN0aW9uMihjdHgsIGpzX3RpY2tfbWV0ZXJfY3RvciwgIlRpY2tNZXRlciIsIDAsIEpTX0NGVU5DX2NvbnN0cnVjdG9yLCAwKTsKICAgIC8qIHNldCBwcm90by5jb25zdHJ1Y3RvciBhbmQgY3Rvci5wcm90b3R5cGUgKi8KICAgIEpTX1NldENvbnN0cnVjdG9yKGN0eCwgdGlja19tZXRlcl9jbGFzcywgdGlja19tZXRlcl9wcm90byk7CiAgfQoKICBpZihtKQogICAgSlNfU2V0TW9kdWxlRXhwb3J0KGN0eCwgbSwgIlRpY2tNZXRlciIsIHRpY2tfbWV0ZXJfY2xhc3MpOwoKICByZXR1cm4gMDsKfQoKdm9pZApqc190aWNrX21ldGVyX2NvbnN0cnVjdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlIHBhcmVudCwgY29uc3QgY2hhciogbmFtZSkgewogIGlmKEpTX0lzVW5kZWZpbmVkKHRpY2tfbWV0ZXJfY2xhc3MpKQogICAganNfdXRpbGl0eV9pbml0KGN0eCwgMCk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcGFyZW50LCBuYW1lID8gbmFtZSA6ICJUaWNrTWV0ZXIiLCB0aWNrX21ldGVyX2NsYXNzKTsKfQoKI2lmZGVmIEpTX1VUSUxJVFlfTU9EVUxFCiNkZWZpbmUgSlNfSU5JVF9NT0RVTEUgLypWSVNJQkxFKi8ganNfaW5pdF9tb2R1bGUKI2Vsc2UKI2RlZmluZSBKU19JTklUX01PRFVMRSAvKlZJU0lCTEUqLyBqc19pbml0X21vZHVsZV91dGlsaXR5CiNlbmRpZgoKSlNNb2R1bGVEZWYqCkpTX0lOSVRfTU9EVUxFKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBtb2R1bGVfbmFtZSkgewogIEpTTW9kdWxlRGVmKiBtOwogIG0gPSBKU19OZXdDTW9kdWxlKGN0eCwgbW9kdWxlX25hbWUsICZqc191dGlsaXR5X2luaXQpOwogIGlmKCFtKQogICAgcmV0dXJuIE5VTEw7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIlRpY2tNZXRlciIpOwogIHJldHVybiBtOwp9Cn0KAAAAAAAAAABGFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwAAAAAAAAAzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"cut",
					null,
					"AQAAAPgWAAAAAAAA+BYAAAAAAABOAAAAZXh0ZXJuICJDIiBWSVNJQkxFIHZvaWQganNfdXRpbGl0eV9leHBvcnQoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtKSB7Cn0K",
					"AQAAAAAAAAABAAAA+BYAAAAAAABGFwAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"paste",
					null,
					"AQAAAJMUAAAAAAAA4RQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkxQAAAAAAACTFAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJMUAAAAAAAAlBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkxQAAAAAAACTFAAAAAAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"cut",
					null,
					"AQAAAAwXAAAAAAAADBcAAAAAAAArAAAAICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiVGlja01ldGVyIik7Cg",
					"AQAAAAAAAAABAAAADBcAAAAAAAA3FwAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"paste",
					null,
					"AQAAAOAUAAAAAAAACxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4BQAAAAAAADgFAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAADYXAAAAAAAANxcAAAAAAAAAAAAANxcAAAAAAAA7FwAAAAAAAAAAAAA3FwAAAAAAADcXAAAAAAAABAAAACAgICA3FwAAAAAAADkXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANhcAAAAAAAA2FwAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"paste",
					null,
					"AQAAADkXAAAAAAAAShcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAORcAAAAAAAA5FwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEoXAAAAAAAATBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAShcAAAAAAABKFwAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "ctx,m"
					},
					"BQAAAEsXAAAAAAAATBcAAAAAAAAAAAAATBcAAAAAAABNFwAAAAAAAAAAAABNFwAAAAAAAE4XAAAAAAAAAAAAAE4XAAAAAAAATxcAAAAAAAAAAAAATxcAAAAAAABQFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASxcAAAAAAABLFwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFEXAAAAAAAAUhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAURcAAAAAAABRFwAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAUhcAAAAAAABSFwAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAUhcAAAAAAABSFwAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAUhcAAAAAAABSFwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_video_capture.cpp",
			"settings":
			{
				"buffer_size": 6393,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"paste",
					null,
					"AQAAAEgAAAAAAAAAkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAAAAAAAAABIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEgAAAAAAAAASQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAAAAAAAAABIAAAAAAAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACSGAAAI2luY2x1ZGUgImpzYmluZGluZ3MuaHBwIgojaW5jbHVkZSAianNfbWF0LmhwcCIKI2luY2x1ZGUgImpzX2FsbG9jLmhwcCIKCmV4dGVybiAiQyIgVklTSUJMRSBpbnQganNfdmlkZW9fY2FwdHVyZV9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CgpleHRlcm4gIkMiIHsKSlNWYWx1ZSB2aWRlb19jYXB0dXJlX3Byb3RvID0gSlNfVU5ERUZJTkVELCB2aWRlb19jYXB0dXJlX2NsYXNzID0gSlNfVU5ERUZJTkVEOwpKU0NsYXNzSUQganNfdmlkZW9fY2FwdHVyZV9jbGFzc19pZCA9IDA7Cn0KCnN0YXRpYyBpbmxpbmUgaW50CmlzX251bWVyaWMoY29uc3Qgc3RkOjpzdHJpbmcmIHMpIHsKICByZXR1cm4gc3RkOjphbGxfb2Yocy5iZWdpbigpLCBzLmVuZCgpLCBbXSh1bnNpZ25lZCBjaGFyIGMpIHsgcmV0dXJuIHN0ZDo6aXNkaWdpdChjKTsgfSk7Cn0KCnN0YXRpYyBib29sCmpzX3ZpZGVvX2NhcHR1cmVfb3BlbihKU0NvbnRleHQqIGN0eCwgSlNWaWRlb0NhcHR1cmVEYXRhKiBzLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgaW50MzJfdCBjYW1JRCwgYXBpUHJlZmVyZW5jZSA9IGN2OjpDQVBfQU5ZOwogIGN2OjpTdHJpbmcgZmlsZW5hbWU7CgogIGZpbGVuYW1lID0gSlNfVG9DU3RyaW5nKGN0eCwgYXJndlswXSk7CgogIGlmKGFyZ2MgPiAxKQogICAgSlNfVG9JbnQzMihjdHgsICZhcGlQcmVmZXJlbmNlLCBhcmd2WzFdKTsKCiAgaWYoaXNfbnVtZXJpYyhmaWxlbmFtZSkpCiAgICBKU19Ub0ludDMyKGN0eCwgJmNhbUlELCBhcmd2WzBdKTsKCiAgc3RkOjpjZXJyIDw8ICJWaWRlb0NhcHR1cmUub3BlbiBmaWxlbmFtZT0nIiA8PCBmaWxlbmFtZSA8PCAiJywgY2FtSUQ9IiA8PCBjYW1JRCA8PCAiLCBhcGlQcmVmZXJlbmNlPSIgPDwgYXBpUHJlZmVyZW5jZQogICAgICAgICAgICA8PCBzdGQ6OmVuZGw7CgogIGlmKGZpbGVuYW1lLmVtcHR5KCkpCiAgICByZXR1cm4gcy0+b3BlbihjYW1JRCwgYXBpUHJlZmVyZW5jZSk7CgogIHJldHVybiBzLT5vcGVuKGZpbGVuYW1lLCBhcGlQcmVmZXJlbmNlKTsKfQoKc3RhdGljIEpTVmFsdWUKanNfdmlkZW9fY2FwdHVyZV9jdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgbmV3X3RhcmdldCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCogYXJndikgewogIEpTVmlkZW9DYXB0dXJlRGF0YSogczsKICBKU1ZhbHVlIG9iaiA9IEpTX1VOREVGSU5FRDsKICBKU1ZhbHVlIHByb3RvLCByZXQ7CgogIHMgPSBqc19hbGxvY2F0ZTxKU1ZpZGVvQ2FwdHVyZURhdGE+KGN0eCk7CiAgaWYoIXMpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICBuZXcocykgSlNWaWRlb0NhcHR1cmVEYXRhKCk7CgogIGlmKGFyZ2MgPiAwKSB7CiAgICBpZighanNfdmlkZW9fY2FwdHVyZV9vcGVuKGN0eCwgcywgYXJnYywgYXJndikpCiAgICAgIHJldHVybiBKU19FWENFUFRJT047CiAgfQoKICAvKiB1c2luZyBuZXdfdGFyZ2V0IHRvIGdldCB0aGUgcHJvdG90eXBlIGlzIG5lY2Vzc2FyeSB3aGVuIHRoZQogICAgIGNsYXNzIGlzIGV4dGVuZGVkLiAqLwogIHByb3RvID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBuZXdfdGFyZ2V0LCAicHJvdG90eXBlIik7CiAgaWYoSlNfSXNFeGNlcHRpb24ocHJvdG8pKQogICAgZ290byBmYWlsOwogIG9iaiA9IEpTX05ld09iamVjdFByb3RvQ2xhc3MoY3R4LCBwcm90bywganNfdmlkZW9fY2FwdHVyZV9jbGFzc19pZCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgcHJvdG8pOwogIGlmKEpTX0lzRXhjZXB0aW9uKG9iaikpCiAgICBnb3RvIGZhaWw7CiAgSlNfU2V0T3BhcXVlKG9iaiwgcyk7CiAgcmV0dXJuIG9iajsKZmFpbDoKICBqc19kZWFsbG9jYXRlKGN0eCwgcyk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgb2JqKTsKICByZXR1cm4gSlNfRVhDRVBUSU9OOwp9CgpWSVNJQkxFIEpTVmlkZW9DYXB0dXJlRGF0YSoKanNfdmlkZW9fY2FwdHVyZV9kYXRhKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsKSB7CiAgcmV0dXJuIHN0YXRpY19jYXN0PEpTVmlkZW9DYXB0dXJlRGF0YSo+KEpTX0dldE9wYXF1ZTIoY3R4LCB2YWwsIGpzX3ZpZGVvX2NhcHR1cmVfY2xhc3NfaWQpKTsKfQoKdm9pZApqc192aWRlb19jYXB0dXJlX2ZpbmFsaXplcihKU1J1bnRpbWUqIHJ0LCBKU1ZhbHVlIHZhbCkgewogIEpTVmlkZW9DYXB0dXJlRGF0YSogcyA9IHN0YXRpY19jYXN0PEpTVmlkZW9DYXB0dXJlRGF0YSo+KEpTX0dldE9wYXF1ZSh2YWwsIGpzX3ZpZGVvX2NhcHR1cmVfY2xhc3NfaWQpKTsKICAvKiBOb3RlOiAncycgY2FuIGJlIE5VTEwgaW4gY2FzZSBKU19TZXRPcGFxdWUoKSB3YXMgbm90IGNhbGxlZCAqLwoKICBzLT5+SlNWaWRlb0NhcHR1cmVEYXRhKCk7CiAganNfZGVhbGxvY2F0ZShydCwgcyk7CgogIEpTX0ZyZWVWYWx1ZVJUKHJ0LCB2YWwpOwp9CgpzdGF0aWMgSlNWYWx1ZQpqc192aWRlb19jYXB0dXJlX21ldGhvZChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZpZGVvX2NhcHR1cmUsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YsIGludCBtYWdpYykgewogIEpTVmlkZW9DYXB0dXJlRGF0YSogcyA9IHN0YXRpY19jYXN0PEpTVmlkZW9DYXB0dXJlRGF0YSo+KEpTX0dldE9wYXF1ZTIoY3R4LCB2aWRlb19jYXB0dXJlLCBqc192aWRlb19jYXB0dXJlX2NsYXNzX2lkKSk7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CiAgaW50MzJfdCBwcm9wSUQ7CiAgZG91YmxlIHZhbHVlID0gMDsKCiAgaWYobWFnaWMgPT0gMCkgewogICAgaWYoIUpTX1RvSW50MzIoY3R4LCAmcHJvcElELCBhcmd2WzBdKSkgewogICAgICB2YWx1ZSA9IHMtPmdldChwcm9wSUQpOwogICAgICByZXQgPSBKU19OZXdGbG9hdDY0KGN0eCwgdmFsdWUpOwogICAgfSBlbHNlIHsKICAgICAgcmV0ID0gSlNfRVhDRVBUSU9OOwogICAgfQogIH0gZWxzZSBpZihtYWdpYyA9PSAxKSB7CiAgICBpZighSlNfVG9JbnQzMihjdHgsICZwcm9wSUQsIGFyZ3ZbMF0pKSB7CiAgICAgIEpTX1RvRmxvYXQ2NChjdHgsICZ2YWx1ZSwgYXJndlsxXSk7CgogICAgICBzLT5zZXQocHJvcElELCB2YWx1ZSk7CiAgICB9IGVsc2UKICAgICAgcmV0ID0gSlNfRVhDRVBUSU9OOwogIH0gZWxzZSBpZihtYWdpYyA9PSAyKSB7CiAgICBzdGQ6OnN0cmluZyBiYWNrZW5kOwogICAgdHJ5IHsKICAgICAgYmFja2VuZCA9IHMtPmdldEJhY2tlbmROYW1lKCk7CiAgICB9IGNhdGNoKGNvbnN0IGN2OjpFeGNlcHRpb24mIGUpIHsgYmFja2VuZCA9IGUubXNnOyB9CiAgICByZXQgPSBKU19OZXdTdHJpbmcoY3R4LCBiYWNrZW5kLmNfc3RyKCkpOwogIH0gZWxzZSBpZihtYWdpYyA9PSAzKSB7CiAgICByZXQgPSBKU19OZXdCb29sKGN0eCwgcy0+Z3JhYigpKTsKICB9IGVsc2UgaWYobWFnaWMgPT0gNCkgewogICAgcmV0ID0gSlNfTmV3Qm9vbChjdHgsIHMtPmlzT3BlbmVkKCkpOwogIH0gZWxzZSBpZihtYWdpYyA9PSA1KSB7CiAgICByZXQgPSBKU19OZXdCb29sKGN0eCwganNfdmlkZW9fY2FwdHVyZV9vcGVuKGN0eCwgcywgYXJnYywgYXJndikpOwogIH0KCiAgZWxzZSBpZihtYWdpYyA9PSA2IHx8IG1hZ2ljID09IDcpIHsKICAgIEpTTWF0RGF0YSogbSA9IGpzX21hdF9kYXRhKGN0eCwgYXJndlswXSk7CgogICAgaWYobSA9PSBudWxscHRyKQogICAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICAgIHJldCA9IEpTX05ld0Jvb2woY3R4LCBtYWdpYyA9PSA2ID8gcy0+cmVhZCgqbSkgOiBzLT5yZXRyaWV2ZSgqbSkpOwogIH0KCiAgcmV0dXJuIHJldDsKfQoKVklTSUJMRSBKU1ZhbHVlCmpzX3ZpZGVvX2NhcHR1cmVfd3JhcChKU0NvbnRleHQqIGN0eCwgY3Y6OlZpZGVvQ2FwdHVyZSogY2FwKSB7CiAgSlNWYWx1ZSByZXQ7CgogIHJldCA9IEpTX05ld09iamVjdFByb3RvQ2xhc3MoY3R4LCB2aWRlb19jYXB0dXJlX3Byb3RvLCBqc192aWRlb19jYXB0dXJlX2NsYXNzX2lkKTsKCiAgLy8gY2FwLT5hZGRyZWYoKTsKCiAgSlNfU2V0T3BhcXVlKHJldCwgY2FwKTsKCiAgcmV0dXJuIHJldDsKfQoKSlNDbGFzc0RlZiBqc192aWRlb19jYXB0dXJlX2NsYXNzID0gewogICAgLmNsYXNzX25hbWUgPSAiVmlkZW9DYXB0dXJlIiwKICAgIC5maW5hbGl6ZXIgPSBqc192aWRlb19jYXB0dXJlX2ZpbmFsaXplciwKfTsKCmNvbnN0IEpTQ0Z1bmN0aW9uTGlzdEVudHJ5IGpzX3ZpZGVvX2NhcHR1cmVfcHJvdG9fZnVuY3NbXSA9IHsKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZ2V0IiwgMSwganNfdmlkZW9fY2FwdHVyZV9tZXRob2QsIDApLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJzZXQiLCAyLCBqc192aWRlb19jYXB0dXJlX21ldGhvZCwgMSksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImdldEJhY2tlbmROYW1lIiwgMCwganNfdmlkZW9fY2FwdHVyZV9tZXRob2QsIDIpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJncmFiIiwgMCwganNfdmlkZW9fY2FwdHVyZV9tZXRob2QsIDMpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJpc09wZW5lZCIsIDAsIGpzX3ZpZGVvX2NhcHR1cmVfbWV0aG9kLCA0KSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigib3BlbiIsIDEsIGpzX3ZpZGVvX2NhcHR1cmVfbWV0aG9kLCA1KSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigicmVhZCIsIDEsIGpzX3ZpZGVvX2NhcHR1cmVfbWV0aG9kLCA2KSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigicmV0cmlldmUiLCAxLCBqc192aWRlb19jYXB0dXJlX21ldGhvZCwgNyksCgogICAgSlNfUFJPUF9TVFJJTkdfREVGKCJbU3ltYm9sLnRvU3RyaW5nVGFnXSIsICJWaWRlb0NhcHR1cmUiLCBKU19QUk9QX0NPTkZJR1VSQUJMRSksCgp9OwoKaW50CmpzX3ZpZGVvX2NhcHR1cmVfaW5pdChKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG0pIHsKCiAgaWYoanNfdmlkZW9fY2FwdHVyZV9jbGFzc19pZCA9PSAwKSB7CiAgICAvKiBjcmVhdGUgdGhlIFZpZGVvQ2FwdHVyZSBjbGFzcyAqLwogICAgSlNfTmV3Q2xhc3NJRCgmanNfdmlkZW9fY2FwdHVyZV9jbGFzc19pZCk7CiAgICBKU19OZXdDbGFzcyhKU19HZXRSdW50aW1lKGN0eCksIGpzX3ZpZGVvX2NhcHR1cmVfY2xhc3NfaWQsICZqc192aWRlb19jYXB0dXJlX2NsYXNzKTsKCiAgICB2aWRlb19jYXB0dXJlX3Byb3RvID0gSlNfTmV3T2JqZWN0KGN0eCk7CiAgICBKU19TZXRQcm9wZXJ0eUZ1bmN0aW9uTGlzdChjdHgsIHZpZGVvX2NhcHR1cmVfcHJvdG8sIGpzX3ZpZGVvX2NhcHR1cmVfcHJvdG9fZnVuY3MsIGNvdW50b2YoanNfdmlkZW9fY2FwdHVyZV9wcm90b19mdW5jcykpOwogICAgSlNfU2V0Q2xhc3NQcm90byhjdHgsIGpzX3ZpZGVvX2NhcHR1cmVfY2xhc3NfaWQsIHZpZGVvX2NhcHR1cmVfcHJvdG8pOwoKICAgIHZpZGVvX2NhcHR1cmVfY2xhc3MgPSBKU19OZXdDRnVuY3Rpb24yKGN0eCwganNfdmlkZW9fY2FwdHVyZV9jdG9yLCAiVmlkZW9DYXB0dXJlIiwgMiwgSlNfQ0ZVTkNfY29uc3RydWN0b3IsIDApOwogICAgLyogc2V0IHByb3RvLmNvbnN0cnVjdG9yIGFuZCBjdG9yLnByb3RvdHlwZSAqLwogICAgSlNfU2V0Q29uc3RydWN0b3IoY3R4LCB2aWRlb19jYXB0dXJlX2NsYXNzLCB2aWRlb19jYXB0dXJlX3Byb3RvKTsKICB9CgogIGlmKG0pCiAgICBKU19TZXRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiVmlkZW9DYXB0dXJlIiwgdmlkZW9fY2FwdHVyZV9jbGFzcyk7CgogIHJldHVybiAwOwp9Cgp2b2lkCmpzX3ZpZGVvX2NhcHR1cmVfY29uc3RydWN0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWUgcGFyZW50LCBjb25zdCBjaGFyKiBuYW1lKSB7CiAgaWYoSlNfSXNVbmRlZmluZWQodmlkZW9fY2FwdHVyZV9jbGFzcykpCiAgICBqc192aWRlb19jYXB0dXJlX2luaXQoY3R4LCAwKTsKCiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBwYXJlbnQsIG5hbWUgPyBuYW1lIDogIlZpZGVvQ2FwdHVyZSIsIHZpZGVvX2NhcHR1cmVfY2xhc3MpOwp9CgojaWZkZWYgSlNfVklERU9fQ0FQVFVSRV9NT0RVTEUKI2RlZmluZSBKU19JTklUX01PRFVMRSAvKlZJU0lCTEUqLyBqc19pbml0X21vZHVsZQojZWxzZQojZGVmaW5lIEpTX0lOSVRfTU9EVUxFIC8qVklTSUJMRSovIGpzX2luaXRfbW9kdWxlX3ZpZGVvX2NhcHR1cmUKI2VuZGlmCgpleHRlcm4gIkMiIEpTTW9kdWxlRGVmKgpKU19JTklUX01PRFVMRShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbW9kdWxlX25hbWUpIHsKICBKU01vZHVsZURlZiogbTsKICBtID0gSlNfTmV3Q01vZHVsZShjdHgsIG1vZHVsZV9uYW1lLCAmanNfdmlkZW9fY2FwdHVyZV9pbml0KTsKICBpZighbSkKICAgIHJldHVybiBOVUxMOwogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJWaWRlb0NhcHR1cmUiKTsKICByZXR1cm4gbTsKfQoAAAAAAAAAAOYYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQAAAAAAAABJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"cut",
					null,
					"AQAAAJEYAAAAAAAAkRgAAAAAAABVAAAACmV4dGVybiAiQyIgVklTSUJMRSB2b2lkIGpzX3ZpZGVvX2NhcHR1cmVfZXhwb3J0KEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewp9Cg",
					"AQAAAAAAAAABAAAAkRgAAAAAAADmGAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"paste",
					null,
					"AQAAAP0VAAAAAAAAUhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/RUAAAAAAAD9FQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"cut",
					null,
					"AQAAAKsYAAAAAAAAqxgAAAAAAAAuAAAAICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiVmlkZW9DYXB0dXJlIik7Cg",
					"AQAAAAAAAAABAAAAqxgAAAAAAADZGAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"paste",
					null,
					"AQAAAFAWAAAAAAAAfhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUBYAAAAAAABQFgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAANgYAAAAAAAA2RgAAAAAAAAAAAAA2RgAAAAAAADdGAAAAAAAAAAAAADZGAAAAAAAANkYAAAAAAAABAAAACAgICDZGAAAAAAAANsYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2BgAAAAAAADYGAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"paste",
					null,
					"AQAAANsYAAAAAAAA8hgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2xgAAAAAAADbGAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPIYAAAAAAAA9BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8hgAAAAAAADyGAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "ctx,m"
					},
					"BQAAAPMYAAAAAAAA9BgAAAAAAAAAAAAA9BgAAAAAAAD1GAAAAAAAAAAAAAD1GAAAAAAAAPYYAAAAAAAAAAAAAPYYAAAAAAAA9xgAAAAAAAAAAAAA9xgAAAAAAAD4GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8xgAAAAAAADzGAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPkYAAAAAAAA+hgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+RgAAAAAAAD5GAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA+hgAAAAAAAD6GAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAuhYAAAAAAAC6FgAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAuhYAAAAAAAC6FgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "jsbindings.cpp",
			"settings":
			{
				"buffer_size": 4698,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJkBAAAAAAAAmgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQEAAAAAAACZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "/(/"
					},
					"AwAAAIoBAAAAAAAAiwEAAAAAAAAAAAAAiwEAAAAAAACMAQAAAAAAAAAAAACMAQAAAAAAAI0BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigEAAAAAAACKAQAAAAAAAAAAAAAAAAAA"
				],
				[
					16,
					2,
					"left_delete",
					null,
					"AgAAAIwBAAAAAAAAjAEAAAAAAAABAAAAL4sBAAAAAAAAiwEAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAjQEAAAAAAACNAQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAIsBAAAAAAAAjAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwEAAAAAAACLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					2,
					"left_delete",
					null,
					"AgAAAIoBAAAAAAAAigEAAAAAAAASAAAALy9leHRlcm4ganNydCBqczsKiQEAAAAAAACJAQAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAnAEAAAAAAACKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACJEgAALy8jaW5jbHVkZSAicGxvdC1jdi5ocHAiCiNpbmNsdWRlICJnZW9tZXRyeS5ocHAiCiNpbmNsdWRlICJqcy5ocHAiCiNpbmNsdWRlICJqc2JpbmRpbmdzLmhwcCIKI2luY2x1ZGUgImpzX3BvaW50LmhwcCIKI2luY2x1ZGUgImpzX3NpemUuaHBwIgojaW5jbHVkZSAianNfcmVjdC5ocHAiCiNpbmNsdWRlICJqc19jb250b3VyLmhwcCIKI2luY2x1ZGUgImpzX21hdC5ocHAiCiNpbmNsdWRlICJqc19wb2ludF9pdGVyYXRvci5ocHAiCiNpbmNsdWRlICJxdWlja2pzL2N1dGlscy5oIgojaW5jbHVkZSAicXVpY2tqcy9xdWlja2pzLmgiCgojaW5jbHVkZSA8b3BlbmN2Mi9jb3JlL2NvcmUuaHBwPgojaW5jbHVkZSA8b3BlbmN2Mi9pbWdwcm9jL2ltZ3Byb2MuaHBwPgojaW5jbHVkZSA8aW9tYW5pcD4KCnRlbXBsYXRlPGNsYXNzIFQ+IGNsYXNzIGpzYWxsb2NhdG9yIHsKcHVibGljOgogIHR5cGVkZWYgVCB2YWx1ZV90eXBlOwogIHR5cGVkZWYgVCogcG9pbnRlcjsKICB0eXBlZGVmIGNvbnN0IFQqIGNvbnN0X3BvaW50ZXI7CiAgdHlwZWRlZiBUJiByZWZlcmVuY2U7CiAgdHlwZWRlZiBjb25zdCBUJiBjb25zdF9yZWZlcmVuY2U7CiAgdHlwZWRlZiBzdGQ6OnNpemVfdCBzaXplX3R5cGU7CiAgdHlwZWRlZiBzdGQ6OnB0cmRpZmZfdCBkaWZmZXJlbmNlX3R5cGU7CiAgdGVtcGxhdGU8Y2xhc3MgVT4gc3RydWN0IHJlYmluZCB7IHR5cGVkZWYganNhbGxvY2F0b3I8VT4gb3RoZXI7IH07CiAgcG9pbnRlcgogIGFkZHJlc3MocmVmZXJlbmNlIHZhbHVlKSBjb25zdCB7CiAgICByZXR1cm4gJnZhbHVlOwogIH0KICBjb25zdF9wb2ludGVyCiAgYWRkcmVzcyhjb25zdF9yZWZlcmVuY2UgdmFsdWUpIGNvbnN0IHsKICAgIHJldHVybiAmdmFsdWU7CiAgfQogIGpzYWxsb2NhdG9yKCkgdGhyb3coKSB7fQogIGpzYWxsb2NhdG9yKGNvbnN0IGpzYWxsb2NhdG9yJikgdGhyb3coKSB7fQogIHRlbXBsYXRlPGNsYXNzIFU+IGpzYWxsb2NhdG9yKGNvbnN0IGpzYWxsb2NhdG9yPFU+JikgdGhyb3coKSB7fQogIH5qc2FsbG9jYXRvcigpIHRocm93KCkge30KICBzaXplX3R5cGUKICBtYXhfc2l6ZSgpIGNvbnN0IHRocm93KCkgewogICAgcmV0dXJuIHN0ZDo6bnVtZXJpY19saW1pdHM8c3RkOjpzaXplX3Q+OjptYXgoKSAvIHNpemVvZihUKTsKICB9CiAgcG9pbnRlcgogIGFsbG9jYXRlKHNpemVfdHlwZSBudW0sIGNvbnN0IHZvaWQqID0gMCkgewogICAgcG9pbnRlciByZXQ7CiAgICBzdGQ6OmNlcnIgPDwgImFsbG9jYXRlICIgPDwgbnVtIDw8ICIgZWxlbWVudChzKSIKICAgICAgICAgICAgICA8PCAiIG9mIHNpemUgIiA8PCBzaXplb2YoVCkgPDwgc3RkOjplbmRsOwoKICAgIHN0ZDo6Y2VyciA8PCAiIGFsbG9jYXRlZCBhdDogIiA8PCAodm9pZCopcmV0IDw8IHN0ZDo6ZW5kbDsKICAgIHJldHVybiByZXQ7CiAgfQogIHZvaWQKICBjb25zdHJ1Y3QocG9pbnRlciBwLCBjb25zdCBUJiB2YWx1ZSkgewogICAgcC0+VCh2YWx1ZSk7CiAgfQogIHZvaWQKICBkZXN0cm95KHBvaW50ZXIgcCkgewogICAgcC0+flQoKTsKICB9CiAgdm9pZAogIGRlYWxsb2NhdGUocG9pbnRlciBwLCBzaXplX3R5cGUgbnVtKSB7CiAgICBzdGQ6OmNlcnIgPDwgImRlYWxsb2NhdGUgIiA8PCBudW0gPDwgIiBlbGVtZW50KHMpIgogICAgICAgICAgICAgIDw8ICIgb2Ygc2l6ZSAiIDw8IHNpemVvZihUKSA8PCAiIGF0OiAiIDw8ICh2b2lkKilwIDw8IHN0ZDo6ZW5kbDsKICAgIGpzX2ZyZWUocCk7CiAgfQp9OwoKLypleHRlcm4gIkMiIHt9CgpKU1ZhbHVlIGludDMyYXJyYXlfcHJvdG8sIGludDMyYXJyYXlfY3RvcjsKSlNDbGFzc0lEIGludDMyYXJyYXlfY2xhc3NfaWQ7Ki8KCmV4dGVybiAiQysrIiB0ZW1wbGF0ZTxjbGFzcyBUeXBlPiBKU1ZhbHVlIGpzX2NvbnRvdXJfbmV3KEpTQ29udGV4dCogY3R4LCBjb25zdCBzdGQ6OnZlY3RvcjxUeXBlPiYgcG9pbnRzKTsKCi8qSlNWYWx1ZQpqc192ZWN0b3JfdmVjNGlfdG9fYXJyYXkoSlNDb250ZXh0KiBjdHgsIGNvbnN0IHN0ZDo6dmVjdG9yPGN2OjpWZWM0aT4mIHZlYykgewogIEpTVmFsdWUgcmV0ID0gSlNfTmV3QXJyYXkoY3R4KTsKICB1aW50MzJfdCBpLCBqLCBuID0gdmVjLnNpemUoKTsKICBmb3IoaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgIEpTVmFsdWUgaXRlbSA9IEpTX05ld09iamVjdFByb3RvKGN0eCwgaW50MzJhcnJheV9wcm90byk7CiAgICBmb3IoaiA9IDA7IGogPCA0OyBqKyspIHsgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCBpdGVtLCBqLCBKU19OZXdJbnQzMihjdHgsIHZlY1tpXVtqXSkpOyB9CiAgICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJldCwgaSwgaXRlbSk7CiAgfQogIHJldHVybiByZXQ7Cn0qLwoKaW50CmpzX2NvbG9yX3JlYWQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBjb2xvciwgSlNDb2xvckRhdGE8ZG91YmxlPiogb3V0KSB7CiAgaW50IHJldCA9IDE7CiAgc3RkOjphcnJheTxkb3VibGUsIDQ+IGM7CiAgaWYoSlNfSXNPYmplY3QoY29sb3IpKSB7CiAgICBKU1ZhbHVlIHZbNF07CiAgICBpZihqc19pc19hcnJheShjdHgsIGNvbG9yKSkgewogICAgICB2WzBdID0gSlNfR2V0UHJvcGVydHlVaW50MzIoY3R4LCBjb2xvciwgMCk7CiAgICAgIHZbMV0gPSBKU19HZXRQcm9wZXJ0eVVpbnQzMihjdHgsIGNvbG9yLCAxKTsKICAgICAgdlsyXSA9IEpTX0dldFByb3BlcnR5VWludDMyKGN0eCwgY29sb3IsIDIpOwogICAgICB2WzNdID0gSlNfR2V0UHJvcGVydHlVaW50MzIoY3R4LCBjb2xvciwgMyk7CiAgICB9IGVsc2UgewogICAgICB2WzBdID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBjb2xvciwgInIiKTsKICAgICAgdlsxXSA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgY29sb3IsICJnIik7CiAgICAgIHZbMl0gPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGNvbG9yLCAiYiIpOwogICAgICB2WzNdID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBjb2xvciwgImEiKTsKICAgIH0KICAgIEpTX1RvRmxvYXQ2NChjdHgsICZjWzBdLCB2WzBdKTsKICAgIEpTX1RvRmxvYXQ2NChjdHgsICZjWzFdLCB2WzFdKTsKICAgIEpTX1RvRmxvYXQ2NChjdHgsICZjWzJdLCB2WzJdKTsKICAgIEpTX1RvRmxvYXQ2NChjdHgsICZjWzNdLCB2WzNdKTsKCiAgICBKU19GcmVlVmFsdWUoY3R4LCB2WzBdKTsKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIHZbMV0pOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgdlsyXSk7CiAgICBKU19GcmVlVmFsdWUoY3R4LCB2WzNdKTsKICB9IGVsc2UgaWYoSlNfSXNOdW1iZXIoY29sb3IpKSB7CiAgICB1aW50MzJfdCB2YWx1ZTsKICAgIEpTX1RvVWludDMyKGN0eCwgJnZhbHVlLCBjb2xvcik7CiAgICBjWzBdID0gdmFsdWUgJiAweGZmOwogICAgY1sxXSA9ICh2YWx1ZSA+PiA4KSAmIDB4ZmY7CiAgICBjWzJdID0gKHZhbHVlID4+IDE2KSAmIDB4ZmY7CiAgICBjWzNdID0gKHZhbHVlID4+IDI0KSAmIDB4ZmY7CiAgfSBlbHNlIHsKICAgIHJldCA9IDA7CiAgfQoKICBzdGQ6OmNvcHkoYy5jYmVnaW4oKSwgYy5jZW5kKCksIG91dC0+YXJyLmJlZ2luKCkpOwoKICByZXR1cm4gcmV0Owp9CgppbnQKanNfY29sb3JfcmVhZChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlLCBKU0NvbG9yRGF0YTx1aW50OF90Piogb3V0KSB7CiAgSlNDb2xvckRhdGE8ZG91YmxlPiBjb2xvcjsKICBpZihqc19jb2xvcl9yZWFkKGN0eCwgdmFsdWUsICZjb2xvcikpIHsKICAgIG91dC0+YXJyWzBdID0gY29sb3IuYXJyWzBdOwogICAgb3V0LT5hcnJbMV0gPSBjb2xvci5hcnJbMV07CiAgICBvdXQtPmFyclsyXSA9IGNvbG9yLmFyclsyXTsKICAgIG91dC0+YXJyWzNdID0gY29sb3IuYXJyWzNdOwogICAgcmV0dXJuIDE7CiAgfQogIHJldHVybiAwOwp9CgppbnQKanNfcmVmKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBuYW1lLCBKU1ZhbHVlQ29uc3QgYXJnLCBKU1ZhbHVlIHZhbHVlKSB7CiAgaWYoSlNfSXNGdW5jdGlvbihjdHgsIGFyZykpIHsKICAgIEpTVmFsdWVDb25zdCB2ID0gdmFsdWU7CiAgICBKU19DYWxsKGN0eCwgYXJnLCBKU19VTkRFRklORUQsIDEsICZ2KTsKICB9IGVsc2UgaWYoanNfaXNfYXJyYXkoY3R4LCBhcmcpKSB7CiAgICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIGFyZywgMCwgdmFsdWUpOwogIH0gZWxzZSBpZihKU19Jc09iamVjdChhcmcpKSB7CiAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIGFyZywgbmFtZSwgdmFsdWUpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gMDsKICB9CiAgcmV0dXJuIDE7Cn0KCiNpZmRlZiBKU19CSU5ESU5HU19JTklUX01PRFVMRQpzdGF0aWMgaW50CmpzX2JpbmRpbmdzX2luaXQoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtKSB7CiAganNfcG9pbnRfaW5pdChjdHgsIG0pOwogIGpzX3BvaW50X2l0ZXJhdG9yX2luaXQoY3R4LCBtKTsKICBqc19zaXplX2luaXQoY3R4LCBtKTsKICBqc19yZWN0X2luaXQoY3R4LCBtKTsKICBqc19tYXRfaW5pdChjdHgsIG0pOwogIGpzX2NvbnRvdXJfaW5pdChjdHgsIG0pOwogIGpzX2RyYXdfaW5pdChjdHgsIG0pOwogIGpzX3ZpZGVvX2NhcHR1cmVfaW5pdChjdHgsIG0pOwogIHJldHVybiAwOwp9CgpleHRlcm4gIkMiIEpTTW9kdWxlRGVmKgoKanNfaW5pdF9tb2R1bGUoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG1vZHVsZV9uYW1lKSB7CiAgSlNNb2R1bGVEZWYqIG07CgogIG0gPSBKU19OZXdDTW9kdWxlKGN0eCwgbW9kdWxlX25hbWUsICZqc19iaW5kaW5nc19pbml0KTsKCiAgcmV0dXJuIG07Cn0KCiNlbmRpZgoAAAAAAAAAAHcSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQEAAAAAAACJAQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"cut",
					null,
					"AQAAAP4AAAAAAAAA/gAAAAAAAAAdAAAAI2luY2x1ZGUgInF1aWNranMvcXVpY2tqcy5oIgo",
					"AQAAAAAAAAABAAAA/gAAAAAAAAAbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABaEgAALy8jaW5jbHVkZSAicGxvdC1jdi5ocHAiCiNpbmNsdWRlICJnZW9tZXRyeS5ocHAiCiNpbmNsdWRlICJqc2JpbmRpbmdzLmhwcCIKI2luY2x1ZGUgImpzX3BvaW50LmhwcCIKI2luY2x1ZGUgImpzX3NpemUuaHBwIgojaW5jbHVkZSAianNfcmVjdC5ocHAiCiNpbmNsdWRlICJqc19jb250b3VyLmhwcCIKI2luY2x1ZGUgImpzX21hdC5ocHAiCiNpbmNsdWRlICJqc19wb2ludF9pdGVyYXRvci5ocHAiCiNpbmNsdWRlICJxdWlja2pzL2N1dGlscy5oIgoKI2luY2x1ZGUgPG9wZW5jdjIvY29yZS9jb3JlLmhwcD4KI2luY2x1ZGUgPG9wZW5jdjIvaW1ncHJvYy9pbWdwcm9jLmhwcD4KI2luY2x1ZGUgPGlvbWFuaXA+Cgp0ZW1wbGF0ZTxjbGFzcyBUPiBjbGFzcyBqc2FsbG9jYXRvciB7CnB1YmxpYzoKICB0eXBlZGVmIFQgdmFsdWVfdHlwZTsKICB0eXBlZGVmIFQqIHBvaW50ZXI7CiAgdHlwZWRlZiBjb25zdCBUKiBjb25zdF9wb2ludGVyOwogIHR5cGVkZWYgVCYgcmVmZXJlbmNlOwogIHR5cGVkZWYgY29uc3QgVCYgY29uc3RfcmVmZXJlbmNlOwogIHR5cGVkZWYgc3RkOjpzaXplX3Qgc2l6ZV90eXBlOwogIHR5cGVkZWYgc3RkOjpwdHJkaWZmX3QgZGlmZmVyZW5jZV90eXBlOwogIHRlbXBsYXRlPGNsYXNzIFU+IHN0cnVjdCByZWJpbmQgeyB0eXBlZGVmIGpzYWxsb2NhdG9yPFU+IG90aGVyOyB9OwogIHBvaW50ZXIKICBhZGRyZXNzKHJlZmVyZW5jZSB2YWx1ZSkgY29uc3QgewogICAgcmV0dXJuICZ2YWx1ZTsKICB9CiAgY29uc3RfcG9pbnRlcgogIGFkZHJlc3MoY29uc3RfcmVmZXJlbmNlIHZhbHVlKSBjb25zdCB7CiAgICByZXR1cm4gJnZhbHVlOwogIH0KICBqc2FsbG9jYXRvcigpIHRocm93KCkge30KICBqc2FsbG9jYXRvcihjb25zdCBqc2FsbG9jYXRvciYpIHRocm93KCkge30KICB0ZW1wbGF0ZTxjbGFzcyBVPiBqc2FsbG9jYXRvcihjb25zdCBqc2FsbG9jYXRvcjxVPiYpIHRocm93KCkge30KICB+anNhbGxvY2F0b3IoKSB0aHJvdygpIHt9CiAgc2l6ZV90eXBlCiAgbWF4X3NpemUoKSBjb25zdCB0aHJvdygpIHsKICAgIHJldHVybiBzdGQ6Om51bWVyaWNfbGltaXRzPHN0ZDo6c2l6ZV90Pjo6bWF4KCkgLyBzaXplb2YoVCk7CiAgfQogIHBvaW50ZXIKICBhbGxvY2F0ZShzaXplX3R5cGUgbnVtLCBjb25zdCB2b2lkKiA9IDApIHsKICAgIHBvaW50ZXIgcmV0OwogICAgc3RkOjpjZXJyIDw8ICJhbGxvY2F0ZSAiIDw8IG51bSA8PCAiIGVsZW1lbnQocykiCiAgICAgICAgICAgICAgPDwgIiBvZiBzaXplICIgPDwgc2l6ZW9mKFQpIDw8IHN0ZDo6ZW5kbDsKCiAgICBzdGQ6OmNlcnIgPDwgIiBhbGxvY2F0ZWQgYXQ6ICIgPDwgKHZvaWQqKXJldCA8PCBzdGQ6OmVuZGw7CiAgICByZXR1cm4gcmV0OwogIH0KICB2b2lkCiAgY29uc3RydWN0KHBvaW50ZXIgcCwgY29uc3QgVCYgdmFsdWUpIHsKICAgIHAtPlQodmFsdWUpOwogIH0KICB2b2lkCiAgZGVzdHJveShwb2ludGVyIHApIHsKICAgIHAtPn5UKCk7CiAgfQogIHZvaWQKICBkZWFsbG9jYXRlKHBvaW50ZXIgcCwgc2l6ZV90eXBlIG51bSkgewogICAgc3RkOjpjZXJyIDw8ICJkZWFsbG9jYXRlICIgPDwgbnVtIDw8ICIgZWxlbWVudChzKSIKICAgICAgICAgICAgICA8PCAiIG9mIHNpemUgIiA8PCBzaXplb2YoVCkgPDwgIiBhdDogIiA8PCAodm9pZCopcCA8PCBzdGQ6OmVuZGw7CiAgICBqc19mcmVlKHApOwogIH0KfTsKCi8qZXh0ZXJuICJDIiB7fQoKSlNWYWx1ZSBpbnQzMmFycmF5X3Byb3RvLCBpbnQzMmFycmF5X2N0b3I7CkpTQ2xhc3NJRCBpbnQzMmFycmF5X2NsYXNzX2lkOyovCgpleHRlcm4gIkMrKyIgdGVtcGxhdGU8Y2xhc3MgVHlwZT4gSlNWYWx1ZSBqc19jb250b3VyX25ldyhKU0NvbnRleHQqIGN0eCwgY29uc3Qgc3RkOjp2ZWN0b3I8VHlwZT4mIHBvaW50cyk7CgovKkpTVmFsdWUKanNfdmVjdG9yX3ZlYzRpX3RvX2FycmF5KEpTQ29udGV4dCogY3R4LCBjb25zdCBzdGQ6OnZlY3Rvcjxjdjo6VmVjNGk+JiB2ZWMpIHsKICBKU1ZhbHVlIHJldCA9IEpTX05ld0FycmF5KGN0eCk7CiAgdWludDMyX3QgaSwgaiwgbiA9IHZlYy5zaXplKCk7CiAgZm9yKGkgPSAwOyBpIDwgbjsgaSsrKSB7CiAgICBKU1ZhbHVlIGl0ZW0gPSBKU19OZXdPYmplY3RQcm90byhjdHgsIGludDMyYXJyYXlfcHJvdG8pOwogICAgZm9yKGogPSAwOyBqIDwgNDsgaisrKSB7IEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgaXRlbSwgaiwgSlNfTmV3SW50MzIoY3R4LCB2ZWNbaV1bal0pKTsgfQogICAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCByZXQsIGksIGl0ZW0pOwogIH0KICByZXR1cm4gcmV0Owp9Ki8KCmludApqc19jb2xvcl9yZWFkKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgY29sb3IsIEpTQ29sb3JEYXRhPGRvdWJsZT4qIG91dCkgewogIGludCByZXQgPSAxOwogIHN0ZDo6YXJyYXk8ZG91YmxlLCA0PiBjOwogIGlmKEpTX0lzT2JqZWN0KGNvbG9yKSkgewogICAgSlNWYWx1ZSB2WzRdOwogICAgaWYoanNfaXNfYXJyYXkoY3R4LCBjb2xvcikpIHsKICAgICAgdlswXSA9IEpTX0dldFByb3BlcnR5VWludDMyKGN0eCwgY29sb3IsIDApOwogICAgICB2WzFdID0gSlNfR2V0UHJvcGVydHlVaW50MzIoY3R4LCBjb2xvciwgMSk7CiAgICAgIHZbMl0gPSBKU19HZXRQcm9wZXJ0eVVpbnQzMihjdHgsIGNvbG9yLCAyKTsKICAgICAgdlszXSA9IEpTX0dldFByb3BlcnR5VWludDMyKGN0eCwgY29sb3IsIDMpOwogICAgfSBlbHNlIHsKICAgICAgdlswXSA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgY29sb3IsICJyIik7CiAgICAgIHZbMV0gPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGNvbG9yLCAiZyIpOwogICAgICB2WzJdID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBjb2xvciwgImIiKTsKICAgICAgdlszXSA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgY29sb3IsICJhIik7CiAgICB9CiAgICBKU19Ub0Zsb2F0NjQoY3R4LCAmY1swXSwgdlswXSk7CiAgICBKU19Ub0Zsb2F0NjQoY3R4LCAmY1sxXSwgdlsxXSk7CiAgICBKU19Ub0Zsb2F0NjQoY3R4LCAmY1syXSwgdlsyXSk7CiAgICBKU19Ub0Zsb2F0NjQoY3R4LCAmY1szXSwgdlszXSk7CgogICAgSlNfRnJlZVZhbHVlKGN0eCwgdlswXSk7CiAgICBKU19GcmVlVmFsdWUoY3R4LCB2WzFdKTsKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIHZbMl0pOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgdlszXSk7CiAgfSBlbHNlIGlmKEpTX0lzTnVtYmVyKGNvbG9yKSkgewogICAgdWludDMyX3QgdmFsdWU7CiAgICBKU19Ub1VpbnQzMihjdHgsICZ2YWx1ZSwgY29sb3IpOwogICAgY1swXSA9IHZhbHVlICYgMHhmZjsKICAgIGNbMV0gPSAodmFsdWUgPj4gOCkgJiAweGZmOwogICAgY1syXSA9ICh2YWx1ZSA+PiAxNikgJiAweGZmOwogICAgY1szXSA9ICh2YWx1ZSA+PiAyNCkgJiAweGZmOwogIH0gZWxzZSB7CiAgICByZXQgPSAwOwogIH0KCiAgc3RkOjpjb3B5KGMuY2JlZ2luKCksIGMuY2VuZCgpLCBvdXQtPmFyci5iZWdpbigpKTsKCiAgcmV0dXJuIHJldDsKfQoKaW50CmpzX2NvbG9yX3JlYWQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSwgSlNDb2xvckRhdGE8dWludDhfdD4qIG91dCkgewogIEpTQ29sb3JEYXRhPGRvdWJsZT4gY29sb3I7CiAgaWYoanNfY29sb3JfcmVhZChjdHgsIHZhbHVlLCAmY29sb3IpKSB7CiAgICBvdXQtPmFyclswXSA9IGNvbG9yLmFyclswXTsKICAgIG91dC0+YXJyWzFdID0gY29sb3IuYXJyWzFdOwogICAgb3V0LT5hcnJbMl0gPSBjb2xvci5hcnJbMl07CiAgICBvdXQtPmFyclszXSA9IGNvbG9yLmFyclszXTsKICAgIHJldHVybiAxOwogIH0KICByZXR1cm4gMDsKfQoKaW50CmpzX3JlZihKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbmFtZSwgSlNWYWx1ZUNvbnN0IGFyZywgSlNWYWx1ZSB2YWx1ZSkgewogIGlmKEpTX0lzRnVuY3Rpb24oY3R4LCBhcmcpKSB7CiAgICBKU1ZhbHVlQ29uc3QgdiA9IHZhbHVlOwogICAgSlNfQ2FsbChjdHgsIGFyZywgSlNfVU5ERUZJTkVELCAxLCAmdik7CiAgfSBlbHNlIGlmKGpzX2lzX2FycmF5KGN0eCwgYXJnKSkgewogICAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCBhcmcsIDAsIHZhbHVlKTsKICB9IGVsc2UgaWYoSlNfSXNPYmplY3QoYXJnKSkgewogICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBhcmcsIG5hbWUsIHZhbHVlKTsKICB9IGVsc2UgewogICAgcmV0dXJuIDA7CiAgfQogIHJldHVybiAxOwp9CgojaWZkZWYgSlNfQklORElOR1NfSU5JVF9NT0RVTEUKc3RhdGljIGludApqc19iaW5kaW5nc19pbml0KEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewogIGpzX3BvaW50X2luaXQoY3R4LCBtKTsKICBqc19wb2ludF9pdGVyYXRvcl9pbml0KGN0eCwgbSk7CiAganNfc2l6ZV9pbml0KGN0eCwgbSk7CiAganNfcmVjdF9pbml0KGN0eCwgbSk7CiAganNfbWF0X2luaXQoY3R4LCBtKTsKICBqc19jb250b3VyX2luaXQoY3R4LCBtKTsKICBqc19kcmF3X2luaXQoY3R4LCBtKTsKICBqc192aWRlb19jYXB0dXJlX2luaXQoY3R4LCBtKTsKICByZXR1cm4gMDsKfQoKZXh0ZXJuICJDIiBKU01vZHVsZURlZioKCmpzX2luaXRfbW9kdWxlKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBtb2R1bGVfbmFtZSkgewogIEpTTW9kdWxlRGVmKiBtOwoKICBtID0gSlNfTmV3Q01vZHVsZShjdHgsIG1vZHVsZV9uYW1lLCAmanNfYmluZGluZ3NfaW5pdCk7CgogIHJldHVybiBtOwp9CgojZW5kaWYKAAAAAAAAAABaEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gAAAAAAAAD+AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "#include \"js.hpp\"\n#include \"jsbindings.hpp\"\n#include \"util.hpp\"\n#include <cstring>\n#include <iostream>\n#include <cstring>\n#include <filesystem>\n#include <cassert>\n#include <regex>\n\nextern \"C\" {\n#include \"quickjs/quickjs.h\"\n#include \"quickjs/quickjs-libc.h\"\n#include \"quickjs/cutils.h\"\n\n// jsrt js;\n\nchar* normalize_module(JSContext* ctx, const char* module_base_name, const char* module_name, void* opaque);\n\nstruct JSString {\n  JSRefCountHeader header; /* must come first, 32-bit */\n  uint32_t len : 31;\n  uint8_t is_wide_char : 1; /* 0 = 8 bits, 1 = 16 bits characters */\n  /* for JS_ATOM_TYPE_SYMBOL: hash = 0, atom_type = 3,\n     for JS_ATOM_TYPE_PRIVATE: hash = 1, atom_type = 3\n     XXX: could change encoding to have one more bit in hash */\n  uint32_t hash : 30;\n  uint8_t atom_type : 2; /* != 0 if atom, JS_ATOM_TYPE_x */\n  uint32_t hash_next;    /* atom_index for JS_ATOM_TYPE_SYMBOL */\n#ifdef DUMP_LEAKS\n  struct list_head link; /* string list */\n#endif\n  union {\n    uint8_t str8[0]; /* 8 bit strings will get an extra null terminator */\n    uint16_t str16[0];\n  } u;\n};\n\ntypedef struct JSString JSAtomStruct;\n};\n\nstatic JSValue\njs_print(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv) {\n  int i;\n  const char* str;\n\n  for(i = 0; i < argc; i++) {\n    if(i != 0)\n      putchar(' ');\n    str = JS_ToCString(ctx, argv[i]);\n    if(!str)\n      return JS_EXCEPTION;\n    fputs(str, stdout);\n    JS_FreeCString(ctx, str);\n  }\n  putchar('\\n');\n  return JS_UNDEFINED;\n}\n\nstruct JSProperty;\nstruct JSShapeProperty;\n\nbool\njsrt::init(int argc, char* argv[]) {\n  int load_std = 0;\n\n  if(ctx == nullptr)\n    if(!create())\n      return false;\n\n  // JS_AddIntrinsicBaseObjects(ctx);\n  js_std_add_helpers(ctx, argc, argv);\n\n  /* system modules */\n  js_init_module_std(ctx, \"std\");\n  js_init_module_os(ctx, \"os\");\n\n  /* make 'std' and 'os' visible to non module code */\n  if(load_std) {\n    const char* str = \"import * as std from 'std';\\n\"\n                      \"import * as os from 'os';\\n\"\n                      \"globalThis.std = std;\\n\"\n                      \"globalThis.os = os;\\n\";\n    eval_buf(str, strlen(str), \"<input>\", JS_EVAL_TYPE_MODULE);\n  }\n\n  /* loader for ES6 modules */\n  JS_SetModuleLoaderFunc(get_runtime(), &normalize_module, js_module_loader, this);\n\n  // global.get();\n\n  /*  this->_undefined = get_undefined();\n    this->_null = get_null();\n    this->_true = get_true();\n    this->_false = get_false();*/\n\n  return ctx != nullptr;\n}\n\nbool\njsrt::create(JSContext* _ctx) {\n  assert(ctx == nullptr);\n  if(_ctx) {\n    // rt = JS_GetRuntime(ctx = _ctx);\n  } else {\n    JSRuntime* rt;\n    if((rt = JS_NewRuntime())) {\n      js_std_init_handlers(rt);\n\n      ctx = JS_NewContext(rt);\n    }\n  }\n  return ctx != nullptr;\n}\n\n/*jsrt::value*\njsrt::get_function(const char* name) {\n  auto it = funcmap.find(name);\n  if(it != funcmap.end()) {\n    std::pair<JSCFunction*, value>& val = it->second;\n    return &val.second;\n  }\n  return nullptr;\n}*/\n\nstd::string\njsrt::to_str(const_value val) {\n  std::string ret;\n  if(JS_IsFunction(ctx, val))\n    ret = \"Function\";\n  else if(JS_IsNumber(val))\n    ret = \"Number\";\n  else if(JS_IsBool(val))\n    ret = \"Boolean\";\n  else if(JS_IsString(val))\n    ret = \"String\";\n  else if(js_is_array(ctx, val))\n    ret = \"Array\";\n  else if(JS_IsObject(val))\n    ret = \"Object\";\n  else if(JS_IsSymbol(val))\n    ret = \"Symbol\";\n  else if(JS_IsException(val))\n    ret = \"Exception\";\n  else if(JS_IsUninitialized(val))\n    ret = \"Uninitialized\";\n  else if(JS_IsUndefined(val))\n    ret = \"undefined\";\n\n  return ret;\n}\n\njsrt::const_value\njsrt::prototype(const_value obj) const {\n  return JS_GetPrototype(ctx, obj);\n}\n\nstd::vector<const char*>\njsrt::property_names(const_value obj, bool enum_only, bool recursive) const {\n  std::vector<const char*> ret;\n  property_names(obj, ret, enum_only);\n  return ret;\n}\n\nvoid\njsrt::property_names(const_value obj, std::vector<const char*>& out, bool enum_only, bool recursive) const {\n  JSPropertyEnum* props;\n  uint32_t nprops;\n  while(JS_IsObject(obj)) {\n    props = nullptr;\n    nprops = 0;\n    JS_GetOwnPropertyNames(\n        ctx, &props, &nprops, obj, JS_GPN_STRING_MASK | JS_GPN_SYMBOL_MASK | (enum_only ? JS_GPN_ENUM_ONLY : 0));\n    for(uint32_t i = 0; i < nprops; i++) {\n      const char* s = JS_AtomToCString(ctx, props[i].atom);\n      out.push_back(s);\n    }\n    if(!recursive)\n      break;\n\n    obj = prototype(obj);\n  }\n}\n\nbool\njsrt::is_point(const_value val) const {\n  if(is_array(val)) {\n    int32_t length = -1;\n    get_number(get_property<const char*>(val, \"length\"), length);\n    if(length == 2)\n      return true;\n  } else if(is_object(val)) {\n    JSValue x, y;\n    x = get_property<const char*>(val, \"x\");\n    y = get_property<const char*>(val, \"y\");\n    if(is_number(x) && is_number(y))\n      return true;\n  }\n\n  return false;\n}\n\nbool\njsrt::is_rect(const_value val) const {\n  if(is_object(val)) {\n    JSValue x, y, w, h;\n    x = get_property<const char*>(val, \"x\");\n    y = get_property<const char*>(val, \"y\");\n    w = get_property<const char*>(val, \"width\");\n    h = get_property<const char*>(val, \"height\");\n    if(is_number(x) && is_number(y))\n      if(is_number(w) && is_number(h))\n        return true;\n  }\n\n  return false;\n}\n\nbool\njsrt::is_color(const_value val) const {\n  JSValue b = _undefined, g = _undefined, r = _undefined, a = _undefined;\n\n  if(is_array_like(val)) {\n    uint32_t length;\n    get_number(get_property<const char*>(val, \"length\"), length);\n\n    if(length == 3 || length == 4) {\n      b = get_property<uint32_t>(val, 0);\n      g = get_property<uint32_t>(val, 1);\n      r = get_property<uint32_t>(val, 2);\n      a = length > 3 ? get_property<uint32_t>(val, 3) : const_cast<jsrt*>(this)->create<int32_t>(255);\n    } else {\n      return false;\n    }\n  } else if(is_object(val)) {\n    b = get_property<const char*>(val, \"b\");\n    g = get_property<const char*>(val, \"g\");\n    r = get_property<const char*>(val, \"r\");\n    a = get_property<const char*>(val, \"a\");\n  }\n\n  if(is_number(b) && is_number(g) && is_number(r) && is_number(a))\n    return true;\n  return false;\n}\n\n/*\njsrt::global::global(jsrt& rt) : val(JS_UNDEFINED), js(rt) {}\n\nbool\njsrt::global::get() const {\n  if(JS_IsUndefined((const_value)val)) {\n    if(js.ctx) {\n      value global = JS_GetGlobalObject(js.ctx);\n\n      JS_SetPropertyStr(js.ctx, global, \"global\", JS_DupValue(js.ctx, global));\n      JS_FreeValue(js.ctx, global);\n    }\n\n    if(js.ctx) {\n      val = JS_GetGlobalObject(js.ctx);\n      return true;\n    }\n  }\n  return false;\n}\n\njsrt::global::global(global&& o) noexcept : val(std::move(o.val)), js(o.js) {}\n\njsrt::global::~global() {\n  if(js.ctx)\n    JS_FreeValue(js.ctx, val);\n}*/\n\njsrt::value\njsrt::get_undefined() const {\n  return JS_UNDEFINED;\n}\n\njsrt::value\njsrt::get_null() const {\n  return JS_NULL;\n}\n\njsrt::value\njsrt::get_true() const {\n  return JS_TRUE;\n}\n\njsrt::value\njsrt::get_false() const {\n  return JS_FALSE;\n}\n\njsrt::~jsrt() {\n  if(ctx)\n    JS_FreeContext(ctx);\n  ctx = nullptr;\n}\n\nJSValue\njsrt::eval_buf(const char* buf, int buf_len, const char* filename, int eval_flags) {\n  jsrt::value val;\n  if((eval_flags & JS_EVAL_TYPE_MASK) == JS_EVAL_TYPE_MODULE) {\n    val = JS_Eval(ctx, buf, buf_len, filename, eval_flags | JS_EVAL_FLAG_COMPILE_ONLY);\n    if(!JS_IsException(val)) {\n      js_module_set_import_meta(ctx, val, TRUE, TRUE);\n      val = JS_EvalFunction(ctx, val);\n    }\n  } else {\n    val = JS_Eval(ctx, buf, buf_len, filename, eval_flags);\n  }\n  if(JS_IsException(val)) {\n    js_std_dump_error(ctx);\n  } else {\n  }\n  return val;\n}\n\njsrt::value\njsrt::eval_file(const char* filename, int module) {\n  char* buf;\n  int eval_flags;\n  jsrt::value ret;\n  size_t buf_len;\n  buf = reinterpret_cast<char*>(js_load_file(ctx, &buf_len, filename));\n  if(!buf) {\n    perror(filename);\n    exit(1);\n  }\n  if(module < 0)\n    module = (str_end(filename, \".mjs\") || JS_DetectModule((const char*)buf, buf_len));\n\n  eval_flags = module ? JS_EVAL_TYPE_MODULE : JS_EVAL_TYPE_GLOBAL;\n\n  /*  std::string script(buf, buf_len);\n    std::cerr << \"Script: \" << script << std::endl;\n */\n  ret = eval_buf(buf, buf_len, filename, eval_flags);\n  js_free(ctx, buf);\n  return ret;\n}\n\nvoid\njsrt::set_global(const char* name, jsrt::value val) {\n  value globalThis = JS_GetGlobalObject(ctx);\n  JS_SetPropertyStr(ctx, globalThis, name, val);\n}\n\njsrt::value\njsrt::get_global(const char* name) const {\n  value globalThis = JS_GetGlobalObject(ctx);\n  value ret = JS_GetPropertyStr(ctx, globalThis, name);\n  return ret;\n}\n\nbool\njsrt::is_promise(const_value val) {\n  jsrt::value promise = get_global(\"Promise\");\n  jsrt::value promise_proto = get_property<const char*>(promise, \"prototype\");\n  return is_object(val) && (JS_IsInstanceOf(ctx, val, promise) || JS_IsInstanceOf(ctx, val, promise_proto));\n}\n\njsrt::value\njsrt::call(const char* name, size_t argc, value argv[]) const {\n  const_value func = get_global(name);\n  return call(func, argc, argv);\n}\n\njsrt::value\njsrt::call(const_value func, std::vector<value>& args) const {\n  return call(func, args.size(), const_cast<value*>(args.data()));\n}\n\njsrt::value\njsrt::call(const_value func, const_value this_arg, size_t argc, value argv[]) const {\n  value ret = JS_Call(ctx, func, this_arg, argc, const_cast<const_value*>(argv));\n  if(JS_IsException(ret))\n    dump_error();\n  return ret;\n}\n\njsrt::value\njsrt::call(const_value func, size_t argc, value argv[]) const {\n  return call(func, global_object(), argc, argv);\n}\n\nextern \"C\" char*\nnormalize_module(JSContext* ctx, const char* module_base_name, const char* module_name, void* opaque) {\n  using std::filesystem::exists;\n  using std::filesystem::path;\n  using std::filesystem::weakly_canonical;\n\n  char* name;\n  jsrt* js = static_cast<jsrt*>(opaque);\n\n  std::string module_dir = std::string(CONFIG_PREFIX) + \"/lib/quickjs\";\n\n  /*std::cerr << \"module_base_name: \" << module_base_name << std::endl;\n  std::cerr << \"module_name: \" << module_name << std::endl;\n  std::cerr << \"module_dir: \" << module_dir << std::endl;*/\n\n  if(module_name[0] == '.' && module_name[1] == '/')\n    module_name += 2;\n\n  const char* module_ext = strrchr(module_name, '.');\n  // std::cerr << \"module_ext: \" << module_ext << std::endl;\n\n  std::string module;\n  path module_path;\n  if((module_ext && !strcmp(\".so\", module_ext)) || module_ext == nullptr) {\n    module = module_dir + \"/\" + module_name;\n    module_path = path(module);\n  } else {\n    module = module_base_name;\n    module_path = path(module).replace_filename(path(module_name, module_name + strlen(module_name)));\n  }\n\n  std::string module_pathstr;\n\n  // std::cerr << \"module_path: \" << module_path.string() << std::endl;\n\n  bool present = exists(module_path);\n  /*  std::cerr << \"exists module_path: \" << present << std::endl;*/\n  module_pathstr = module_path.string();\n\n  if(!present) {\n    module_path = weakly_canonical(module_path);\n    module_pathstr = module_path.string();\n\n    present = exists(module_path);\n  }\n  /*std::cerr << \"module_pathstr: \" << module_pathstr << std::endl;\n  std::cerr << \"module_name: \" << module_name << std::endl;\n  std::cerr << \"present: \" << present << std::endl;*/\n\n  if(true) {\n\n    /*\n    module_pathstr.resize(module_pathstr.size()+1);\n    */\n    const char* s = module_pathstr.c_str();\n    name = static_cast<char*>(js_strdup(ctx, s));\n\n    return name;\n  }\n  return 0;\n}\n\nvoid\njsrt::dump_error() const {\n  JSValue exception_val;\n\n  exception_val = JS_GetException(ctx);\n  dump_exception(exception_val, true);\n  JS_FreeValue(ctx, exception_val);\n}\n\nvoid\njsrt::dump_exception(JSValueConst exception_val, bool is_throw) const {\n  JSValue val;\n  const char* stack;\n  bool is_error;\n\n  is_error = JS_IsError(ctx, exception_val);\n  /*  if(is_throw && !is_error)\n      printf(\"Throw: \");*/\n  js_print(ctx, JS_NULL, 1, (JSValueConst*)&exception_val);\n  if(is_error) {\n    val = JS_GetPropertyStr(ctx, exception_val, \"stack\");\n    if(!JS_IsUndefined(val)) {\n      stack = JS_ToCString(ctx, val);\n      printf(\"%s\\n\", stack);\n      JS_FreeCString(ctx, stack);\n    }\n    JS_FreeValue(ctx, val);\n  }\n}\n\njsrt::atom\njsrt::new_atom(const char* buf, size_t len) const {\n  return JS_NewAtomLen(ctx, buf, len);\n}\n\njsrt::atom\njsrt::new_atom(const char* str) const {\n  return JS_NewAtom(ctx, str);\n}\n\njsrt::atom\njsrt::new_atom(uint32_t n) const {\n  return JS_NewAtomUInt32(ctx, n);\n}\n\nvoid\njsrt::free_atom(const jsrt::atom& a) const {\n  JS_FreeAtom(ctx, a);\n}\n\njsrt::value\njsrt::atom_to_value(const jsrt::atom& a) const {\n  return JS_AtomToValue(ctx, a);\n}\n\njsrt::value\njsrt::atom_to_string(const jsrt::atom& a) const {\n  return JS_AtomToString(ctx, a);\n}\n\nconst char*\njsrt::atom_to_cstring(const jsrt::atom& a) const {\n  return JS_AtomToCString(ctx, a);\n}\n\njsrt::atom\njsrt::value_to_atom(const const_value& v) const {\n  return JS_ValueToAtom(ctx, v);\n}\n\njsrt::value\njsrt::get_symbol(const char* name) const {\n  value ctor = get_global(\"Symbol\");\n  if(has_property(ctor, name))\n    return get_property<const char*>(ctor, name);\n\n  const_value for_fn = get_property<const char*>(ctor, \"for\");\n  value arg = new_string(name);\n  return call(for_fn, ctor, 1, &arg);\n}\n\njsrt::value\njsrt::get_property_symbol(const_value obj, const char* symbol) {\n  value sym = get_symbol(symbol);\n  value ret = get_property<value>(obj, sym);\n  free_value(sym);\n  return ret;\n}\n\njsrt::value\njsrt::call_iterator(const_value obj, const char* symbol) {\n  value fn = get_iterator(obj, symbol);\n  value ret = _undefined;\n\n  if(is_function(fn))\n    ret = call(fn, obj, 0, nullptr);\n\n  free_value(fn);\n\n  return ret;\n}\n\njsrt::value\njsrt::call_iterator_next(const_value obj, const char* symbol) {\n  value iter = get_iterator(obj, symbol);\n  value ret = _undefined, next = _undefined;\n\n  if(is_object(iter) && !is_null(iter)) {\n    next = get_property<const char*>(iter, \"next\");\n\n    if(is_function(next) && has_property(next, \"bind\")) {\n      ret = call(get_property<const char*>(next, \"bind\"), iter, 0, nullptr);\n      //   free_value(next);\n    }\n  }\n  // free_value(iter);\n  return ret;\n}\n\nint\njsrt::tag(value val) const {\n  return JS_VALUE_GET_TAG(val);\n}\n\nvoid*\njsrt::obj(const_value val) const {\n  return JS_VALUE_GET_OBJ(val);\n}\n",
			"file": "js.cpp",
			"file_size": 14147,
			"file_write_time": 132653233312368093,
			"settings":
			{
				"buffer_size": 14147,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAACcBAAAAAAAAKAEAAAAAAAAAAAAAKAEAAAAAAAApAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwEAAAAAAAAnAQAAAAAAAAAAAAAAAAAA"
				],
				[
					8,
					2,
					"left_delete",
					null,
					"AgAAACgBAAAAAAAAKAEAAAAAAAABAAAALycBAAAAAAAAJwEAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAKQEAAAAAAAApAQAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAB4BAAAAAAAAHwEAAAAAAAAAAAAAHwEAAAAAAAAgAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgEAAAAAAAAeAQAAAAAAAAAAAAAAAAAA"
				],
				[
					30,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAJcGAAAAAAAAmQYAAAAAAAAAAAAA/wUAAAAAAAABBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wUAAAAAAACXBgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAP4FAAAAAAAA/wUAAAAAAAAAAAAA/wUAAAAAAAD/BQAAAAAAAJ0AAAAKLyoKanNydDo6dmFsdWUganNydDo6X3VuZGVmaW5lZCA9IEpTX1VOREVGSU5FRDsKanNydDo6dmFsdWUganNydDo6X3RydWUgPSBKU19UUlVFOwpqc3J0Ojp2YWx1ZSBqc3J0OjpfZmFsc2UgPSBKU19GQUxTRTsKanNydDo6dmFsdWUganNydDo6X251bGwgPSBKU19OVUxMOyov",
					"AQAAAAAAAAABAAAA/gUAAAAAAACbBgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA/wUAAAAAAAD/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA/wUAAAAAAAD/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"cut",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAI2luY2x1ZGUgImpzYmluZGluZ3MuaHBwIgo",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					2,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAA0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "js"
					},
					"AwAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALAAAAAAAAAAoAAABqc2JpbmRpbmdzCwAAAAAAAAAMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgAAAAAAAAAUAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "#ifndef JS_HPP\n#define JS_HPP\n\n#include <errno.h>\n\nextern \"C\" {\n#include \"quickjs/quickjs-atom.h\"\n}\nenum {\n  JS_NULL,\n#define DEF(name, str) JS_ATOM_##name,\n#include \"quickjs-atom.h\"\n#undef DEF\n  JS_ATOM_END,\n};\n#include \"quickjs/quickjs.h\"\n\n#include <unordered_map>\n#include <vector>\n#include <type_traits>\n#include <functional>\n#include <string>\n#include <cstring>\n#include <iostream>\n#include <iterator>\n\nstruct jsiter;\n\nstruct jsatom {\n\n  static jsatom\n  create(JSContext* ctx, const char* str) {\n    return jsatom(JS_NewAtom(ctx, str));\n  }\n  static jsatom\n  create(JSContext* ctx, uint32_t num) {\n    return jsatom(JS_NewAtomUInt32(ctx, num));\n  }\n  static jsatom\n  create(JSContext* ctx, const char* x, size_t n) {\n    return jsatom(JS_NewAtomLen(ctx, x, n));\n  }\n  static jsatom\n  create(JSContext* ctx, const jsatom& atom) {\n    return jsatom(JS_DupAtom(ctx, atom));\n  }\n  static jsatom\n  create(JSContext* ctx, const JSValueConst& value) {\n    return jsatom(JS_ValueToAtom(ctx, value));\n  }\n  static jsatom\n  create(JSContext* ctx, const std::string& str) {\n    return create(ctx, str.data(), str.size());\n  }\n\n  //~jsatom() { destroy(); }\n\n  static void\n  destroy(JSContext* ctx, jsatom& a) {\n    JS_FreeAtom(ctx, a._a);\n    a._a = JS_ATOM_NULL;\n  }\n\n  operator JSAtom() const { return _a; }\n\n  const char*\n  to_cstring(JSContext* _ctx) const {\n    return JS_AtomToCString(_ctx, _a);\n  }\n\n  JSValue\n  to_value(JSContext* _ctx) const {\n    return JS_AtomToValue(_ctx, _a);\n  }\n\n  JSValue\n  to_string(JSContext* _ctx) const {\n    return JS_AtomToString(_ctx, _a);\n  }\n\nprivate:\n  jsatom(JSAtom a) : _a(a) {}\n\n  static jsatom\n  create(JSAtom a) {\n    jsatom ret(a);\n    return ret;\n  }\n\n  JSAtom _a;\n};\n\nstruct jsrt {\n  typedef JSValue value;\n  typedef JSValueConst const_value;\n  typedef JSAtom atom;\n\n  static constexpr value _true = JS_TRUE, _false = JS_FALSE, _null = JS_NULL, _undefined = JS_UNDEFINED;\n\n  bool init(int argc, char* argv[]);\n  bool create(JSContext* ctx = 0);\n\n  jsrt() {}\n  jsrt(JSContext* c) : ctx(JS_DupContext(c)) {}\n  ~jsrt();\n\n  value\n  new_string(const char* str) const {\n    return JS_NewString(ctx, str);\n  }\n\n  typedef value c_function(jsrt* rt, const_value this_val, int argc, const_value* argv);\n\n  value eval_buf(const char* buf, int buf_len, const char* filename, int eval_flags);\n  value eval_file(const char* filename, int module = -1);\n\n  // value add_function(const char* name, JSCFunction* fn, int args = 0);\n\n  template<class T> void get_number(const_value val, T& ref) const;\n  void get_string(const_value val, std::string& str) const;\n  void get_string(const_value val, const char*& cstr) const;\n\n  template<class T> void get_int_array(const_value val, T& ref) const;\n  template<class T> void get_point(const_value val, T& ref) const;\n  template<class T> void get_point_array(const_value val, std::vector<T>& ref) const;\n  template<class T> void get_rect(const_value val, T& ref) const;\n  template<class T> void get_color(const_value val, T& ref) const;\n\n  void\n  get_boolean(const_value val, bool& ref) {\n    bool b = JS_ToBool(ctx, val);\n    ref = b;\n  }\n  bool\n  get_boolean(const_value val) {\n    bool b;\n    get_boolean(val, b);\n    return b;\n  }\n\n  value create_array(int32_t size = -1);\n  value create_object();\n  template<class T> value create(T arg);\n  template<class T> value create_point(T x, T y);\n\n  template<class T>\n  value\n  get_property(const_value obj, T prop) const {\n    throw std::runtime_error(\"template specialization\");\n  }\n\n  value get_property_atom(const_value obj, atom) const;\n  value get_property_symbol(const_value obj, const char* symbol);\n\n  bool has_property(const_value obj, const jsatom& atom) const;\n\n  bool\n  has_property(const_value obj, const std::string& name) const {\n    jsatom atom = jsatom::create(ctx, name);\n    bool ret = has_property(obj, atom);\n    jsatom::destroy(ctx, atom);\n    return ret;\n  }\n  bool\n  has_property(const_value obj, uint32_t index) const {\n    jsatom atom = jsatom::create(ctx, index);\n    bool ret = has_property(obj, atom);\n    jsatom::destroy(ctx, atom);\n    return ret;\n  }\n  bool\n  has_property(const_value obj, const const_value& prop) const {\n    jsatom atom = jsatom::create(ctx, prop);\n    bool ret = has_property(obj, atom);\n    jsatom::destroy(ctx, atom);\n    return ret;\n  }\n\n  template<class T>\n  void\n  set_property(const_value obj, T prop, value val) {}\n\n  void set_property(const_value obj, const jsatom& atom, value val, int flags);\n  void\n  set_property(const_value obj, const std::string& name, value val, int flags) {\n    jsatom atom = jsatom::create(ctx, name);\n    set_property(obj, atom, val, flags);\n    jsatom::destroy(ctx, atom);\n  }\n\n  void\n  set_property(const_value obj, uint32_t index, value val, int flags) {\n    jsatom atom = jsatom::create(ctx, index);\n    set_property(obj, atom, val, flags);\n    jsatom::destroy(ctx, atom);\n  }\n\n  void\n  set_property(const_value obj, const const_value& prop, value val, int flags) {\n    jsatom atom = jsatom::create(ctx, prop);\n    set_property(obj, atom, val, flags);\n    jsatom::destroy(ctx, atom);\n  }\n\n  value get_constructor(const_value obj) const;\n  bool has_constructor(const_value obj) const;\n\n  value get_prototype(const_value obj) const;\n  bool has_prototype(const_value obj) const;\n\n  std::string function_name(const_value fn) const;\n\n  std::string\n  class_name(const_value obj) const {\n    return function_name(get_constructor(obj));\n  }\n\n  value get_global(const char* name) const;\n  void set_global(const char* name, value v);\n\n  value get_symbol(const char* name) const;\n  value\n  get_iterator(const_value obj, const char* symbol = \"iterator\") {\n    return get_property_symbol(obj, symbol);\n  }\n  value call_iterator(const_value obj, const char* symbol = \"iterator\");\n  value call_iterator_next(const_value obj, const char* symbol = \"iterator\");\n\n  const_value\n  global_object() const {\n    value globalThis = JS_GetGlobalObject(ctx);\n    return globalThis;\n  }\n  value\n  global_object() {\n    value globalThis = JS_GetGlobalObject(ctx);\n    return globalThis;\n  }\n\n  value call(const_value func, size_t argc, value argv[]) const;\n  value call(const_value func, std::vector<value>& args) const;\n  value call(const char* name, size_t argc, value argv[]) const;\n  value call(const_value func, const_value this_arg, size_t argc, value argv[]) const;\n\n  std::string to_str(const_value val);\n\n  template<class T> T to(const_value val);\n  template<class T> value from(const T& val);\n\n  const_value prototype(const_value obj) const;\n\n  void property_names(const_value obj, std::vector<const char*>& out, bool enum_only = false, bool recursive = false) const;\n\n  std::vector<const char*> property_names(const_value obj, bool enum_only = true, bool recursive = true) const;\n\n  void dump_error() const;\n\n  void dump_exception(JSValueConst exception_val, bool is_throw) const;\n\n  bool is_number(const_value val) const;\n  bool is_big_int(const_value val) const;\n  bool is_big_float(const_value val) const;\n  bool is_big_decimal(const_value val) const;\n  bool is_bool(const_value val) const;\n  bool is_null(const_value val) const;\n  bool is_undefined(const_value val) const;\n  bool is_exception(const_value val) const;\n  bool is_uninitialized(const_value val) const;\n  bool is_string(const_value val) const;\n  bool is_symbol(const_value val) const;\n  bool is_object(const_value val) const;\n  bool is_error(const_value val) const;\n  bool is_function(const_value val) const;\n  bool is_constructor(const_value val) const;\n  bool is_array(const_value val) const;\n  bool is_extensible(const_value val) const;\n\n  bool is_promise(const_value val);\n  bool is_point(const_value val) const;\n  bool is_rect(const_value val) const;\n  bool is_color(const_value val) const;\n  bool is_array_like(const_value val) const;\n\n  bool is_iterable(const_value val);\n  bool is_iterator(const_value val) const;\n\n  // int tag(const_value val) const;\n  int tag(value val) const;\n  void* obj(const_value val) const;\n\n  std::string\n  typestr(const_value val) const {\n    if(is_number(val))\n      return \"number\";\n    else if(is_bool(val))\n      return \"boolean\";\n    else if(is_symbol(val))\n      return \"symbol\";\n    else if(is_undefined(val))\n      return \"undefined\";\n\n    /*   else if(is_constructor(val))\n       return \"constructor\";*/\n    else if(is_object(val) || is_null(val)) {\n      if(!is_null(val) && obj(val)) {\n        if(is_function(val))\n          return \"function\";\n        else if(is_array(val))\n          return \"array\";\n        else if(is_point(val))\n          return \"point\";\n        else if(is_rect(val))\n          return \"rect\";\n        else if(is_color(val))\n          return \"color\";\n      }\n      return \"object\";\n    }\n    return \"unknown\";\n  }\n\n  std::string\n  to_string(const_value arg) const {\n    std::string ret;\n    get_string(arg, ret);\n    return ret;\n  }\n\n  atom new_atom(const char*, size_t) const;\n  atom new_atom(const char*) const;\n  atom new_atom(uint32_t) const;\n  atom value_to_atom(const const_value& v) const;\n\n  void free_atom(const atom& a) const;\n\n  value atom_to_value(const atom& a) const;\n  value atom_to_string(const atom& a) const;\n  const char* atom_to_cstring(const atom& a) const;\n\n  void\n  free_value(const value& v) const {\n    JS_FreeValue(ctx, v);\n  }\n\nprotected:\n  value get_undefined() const;\n  value get_null() const;\n  value get_true() const;\n  value get_false() const;\n\npublic:\n  JSContext* ctx;\n\nprivate:\n  JSRuntime*\n  get_runtime() const {\n    return JS_GetRuntime(ctx);\n  }\n\npublic:\n  int32_t get_length(const const_value& v) const;\n  jsiter begin(JSValue& v);\n  jsiter end(JSValue& v);\n\nprivate:\n  friend class jsiter;\n\n  std::function<JSValue(JSValue, uint32_t)> index() const;\n  std::function<JSValue(uint32_t)> index(const JSValueConst&) const;\n};\n\ninline void\njsrt::get_string(const_value val, std::string& str) const {\n  const char* s = JS_ToCString(ctx, val);\n  str = std::string(s);\n  JS_FreeCString(ctx, s);\n}\n\ninline void\njsrt::get_string(const_value val, const char*& str) const {\n  const char* s = JS_ToCString(ctx, val);\n  str = strdup(s);\n  JS_FreeCString(ctx, s);\n}\n\ntemplate<>\ninline void\njsrt::get_number<int32_t>(const_value val, int32_t& ref) const {\n  int32_t i = -1;\n  JS_ToInt32(ctx, &i, val);\n  ref = i;\n}\n\ntemplate<>\ninline void\njsrt::get_number<int64_t>(const_value val, int64_t& ref) const {\n  int64_t i = 0;\n  JS_ToInt64(ctx, &i, val);\n  ref = i;\n}\n\ntemplate<>\ninline void\njsrt::get_number<double>(const_value val, double& ref) const {\n  double f = 0;\n  JS_ToFloat64(ctx, &f, val);\n  ref = f;\n}\n\ntemplate<>\ninline void\njsrt::get_number<float>(const_value val, float& ref) const {\n  double f = 0;\n  get_number(val, f);\n  ref = f;\n}\n\ntemplate<>\ninline void\njsrt::get_number<uint32_t>(const_value val, uint32_t& ref) const {\n  int64_t i = 0;\n  get_number<int64_t>(val, i);\n  ref = static_cast<uint32_t>(i);\n}\n\ntemplate<class T>\ninline void\njsrt::get_int_array(const_value val, T& ref) const {\n  uint32_t i, n, length = 0, arr = JS_IsArray(ctx, val);\n  if(arr) {\n    get_number(get_property<const char*>(val, \"length\"), length);\n    for(i = 0; i < length; i++) {\n      value v = get_property<uint32_t>(val, i);\n      get_number(v, n);\n      ref[i] = n;\n    }\n  }\n}\n\ntemplate<class T>\ninline void\njsrt::get_point(const_value val, T& ref) const {\n  const_value vx = _undefined, vy = _undefined;\n\n  if(is_array(val)) {\n    uint32_t length;\n    get_number(get_property<const char*>(val, \"length\"), length);\n    if(length >= 2) {\n      vx = get_property<uint32_t>(val, 0);\n      vy = get_property<uint32_t>(val, 1);\n    } else {\n      return;\n    }\n  } else if(is_object(val) && has_property(val, \"x\") && has_property(val, \"y\")) {\n    vx = get_property<const char*>(val, \"x\");\n    vy = get_property<const char*>(val, \"y\");\n  }\n\n  get_number(vx, ref.x);\n  get_number(vy, ref.y);\n}\n\ntemplate<class T>\ninline void\njsrt::get_rect(const_value val, T& ref) const {\n  if(is_object(val)) {\n    double vw, vh;\n\n    get_point(val, ref);\n\n    get_number(get_property<const char*>(val, \"width\"), vw);\n    get_number(get_property<const char*>(val, \"height\"), vh);\n\n    ref.width = vw;\n    ref.height = vh;\n  }\n}\n\ntemplate<class T>\ninline void\njsrt::get_color(const_value val, T& ref) const {\n  const_value vr = _undefined, vg = _undefined, vb = _undefined, va = _undefined;\n\n  if(is_object(val) && has_property(val, \"r\") && has_property(val, \"g\") && has_property(val, \"b\")) {\n    vr = get_property<const char*>(val, \"r\");\n    vg = get_property<const char*>(val, \"g\");\n    vb = get_property<const char*>(val, \"b\");\n    va = get_property<const char*>(val, \"a\");\n  } else if(is_array_like(val)) {\n    uint32_t length;\n    get_number(get_property<const char*>(val, \"length\"), length);\n    if(length >= 3) {\n      vr = get_property<uint32_t>(val, 0);\n      vg = get_property<uint32_t>(val, 1);\n      vb = get_property<uint32_t>(val, 2);\n      va = get_property<uint32_t>(val, 3);\n    } else {\n      return;\n    }\n  }\n  get_number(vb, ref[0]);\n  get_number(vg, ref[1]);\n  get_number(vr, ref[2]);\n  get_number(va, ref[3]);\n}\n\ntemplate<class T>\ninline void\njsrt::get_point_array(const_value val, std::vector<T>& ref) const {\n  if(is_array_like(val)) {\n    uint32_t i, length;\n\n    get_number(get_property<const char*>(val, \"length\"), length);\n    ref.resize(length);\n\n    for(i = 0; i < length; i++) {\n      JSValueConst pt = get_property<uint32_t>(val, i);\n\n      get_point(pt, ref[i]);\n    }\n  }\n}\n\ntemplate<>\ninline jsrt::value\njsrt::create<double>(double num) {\n  return JS_NewFloat64(ctx, num);\n}\n\ntemplate<>\ninline jsrt::value\njsrt::create<float>(float num) {\n  return create(static_cast<double>(num));\n}\n\ntemplate<>\ninline jsrt::value\njsrt::create<int>(int num) {\n  return JS_NewInt32(ctx, num);\n}\n\ntemplate<>\ninline jsrt::value\njsrt::create<const char*>(const char* str) {\n  return JS_NewString(ctx, str);\n}\n\ntemplate<>\ninline jsrt::value\njsrt::create<bool>(bool b) {\n  return b ? get_true() : get_false();\n}\n\ninline jsrt::value\njsrt::create_array(int32_t size) {\n  value ret = JS_NewArray(ctx);\n  if(size >= 0)\n    JS_SetPropertyStr(ctx, ret, \"length\", JS_NewInt32(ctx, size));\n\n  return ret;\n}\n\ninline jsrt::value\njsrt::create_object() {\n  return JS_NewObject(ctx);\n}\n\ntemplate<class T>\ninline jsrt::value\njsrt::create(T arg) {\n  return std::is_pointer<T>::value && arg == nullptr ? get_null() : get_undefined();\n}\n\ntemplate<class T>\ninline jsrt::value\njsrt::create_point(T x, T y) {\n  value obj = JS_NewObject(ctx);\n  JS_SetPropertyStr(ctx, obj, \"x\", create(x));\n  JS_SetPropertyStr(ctx, obj, \"y\", create(y));\n  return obj;\n}\n\ntemplate<>\ninline jsrt::value\njsrt::get_property<uint32_t>(const_value obj, uint32_t index) const {\n  return JS_GetPropertyUint32(ctx, obj, index);\n}\n\ntemplate<>\ninline jsrt::value\njsrt::get_property<int>(const_value obj, int index) const {\n  return JS_GetPropertyUint32(ctx, obj, index);\n}\n\ntemplate<>\ninline jsrt::value\njsrt::get_property<const std::string&>(const_value obj, const std::string& name) const {\n  return JS_GetPropertyStr(ctx, obj, name.c_str());\n}\n\ntemplate<>\ninline jsrt::value\njsrt::get_property<const char*>(const_value obj, const char* name) const {\n  return JS_GetPropertyStr(ctx, obj, name);\n}\n\ninline jsrt::value\njsrt::get_property_atom(const_value obj, atom a) const {\n  return JS_GetProperty(ctx, obj, a);\n}\n\ntemplate<>\ninline jsrt::value\njsrt::get_property<jsrt::value>(const_value obj, value prop) const {\n  return get_property_atom(obj, value_to_atom(prop));\n}\n\ninline jsrt::value\njsrt::get_constructor(jsrt::const_value obj) const {\n  return get_property<const char*>(get_prototype(obj), \"constructor\");\n}\n\ninline bool\njsrt::has_constructor(jsrt::const_value obj) const {\n  return !is_undefined(get_constructor(obj));\n}\n\ninline jsrt::value\njsrt::get_prototype(jsrt::const_value obj) const {\n  return JS_GetPrototype(ctx, obj);\n}\n\ninline bool\njsrt::has_prototype(jsrt::const_value obj) const {\n  return !is_undefined(get_prototype(obj));\n}\n\ninline std::string\njsrt::function_name(jsrt::const_value fn) const {\n  return to_string(get_property<const char*>(fn, \"name\"));\n}\n\ninline bool\njsrt::has_property(const_value obj, const jsatom& atom) const {\n  return JS_HasProperty(ctx, obj, atom);\n}\n\ntemplate<>\ninline void\njsrt::set_property<const char*>(const_value obj, const char* name, value val) {\n  // JS_SetPropertyStr(ctx, obj, name, val);\n  JS_DefinePropertyValueStr(ctx, obj, name, val, JS_PROP_C_W_E);\n}\n\ntemplate<>\ninline void\njsrt::set_property<uint32_t>(const_value obj, uint32_t index, value val) {\n  JS_SetPropertyUint32(ctx, obj, index, val);\n}\n\ntemplate<>\ninline void\njsrt::set_property<const jsatom&>(const_value obj, const jsatom& atom, value val) {\n  JS_SetProperty(ctx, obj, atom, val);\n}\n\ninline void\njsrt::set_property(const_value obj, const jsatom& atom, value val, int flags) {\n  JS_SetPropertyInternal(ctx, obj, atom, val, flags);\n}\n\ntemplate<class T>\ninline jsrt::value\nvector_to_js(jsrt& js, const T& v, size_t n, const std::function<jsrt::value(const typename T::value_type&)>& fn) {\n  using std::placeholders::_1;\n  jsrt::value ret = js.create_array(n);\n  for(uint32_t i = 0; i < n; i++) js.set_property(ret, i, fn(v[i]));\n  return ret;\n}\n\ntemplate<class T>\ninline jsrt::value\nvector_to_js(jsrt& js, const T& v, size_t n) {\n  return vector_to_js(v, n, std::bind(&jsrt::create<typename T::value_type>, &js, std::placeholders::_1));\n}\n\ntemplate<class T>\ninline jsrt::value\nvector_to_js(jsrt& js, const T& v) {\n  return vector_to_js(js, v, v.size());\n}\n\ntemplate<class P>\ninline jsrt::value\nvector_to_js(jsrt& js, const std::vector<P>& v, const std::function<jsrt::value(const P&)>& fn) {\n  return vector_to_js(js, v, v.size(), fn);\n}\n\ntemplate<class P>\ninline jsrt::value\npointer_to_js(jsrt& js, const P* v, size_t n, const std::function<jsrt::value(const P&)>& fn) {\n  jsrt::value ret = js.create_array(n);\n  for(uint32_t i = 0; i < n; i++) js.set_property(ret, i, fn(v[i]));\n  return ret;\n}\n\ntemplate<class P>\ninline jsrt::value\npointer_to_js(jsrt& js, const P* v, size_t n) {\n  std::function<jsrt::value(const P&)> fn([&](const P& v) -> jsrt::value { return js.create(v); });\n\n  return pointer_to_js(js, v, n, fn);\n}\n\ntemplate<class P>\ninline jsrt::value\nvector_to_js(jsrt& js, const std::vector<P>& v, jsrt::value (*fn)(const P&)) {\n  uint32_t i, n = v.size();\n  jsrt::value ret = js.create_array(n);\n  for(i = 0; i < n; i++) js.set_property(ret, i, fn(v[i]));\n  return ret;\n}\n\ntemplate<class P>\ninline jsrt::value\nvector_to_js(jsrt& js, const std::vector<P>& v) {\n  using std::placeholders::_1;\n  return vector_to_js<P>(v, std::bind(&jsrt::create<P>, &js, _1));\n}\n\ninline std::string\nto_string(const char* s) {\n  return std::string(s);\n}\n\ninline bool\njsrt::is_number(const_value val) const {\n  return JS_IsNumber(val);\n}\n\ninline bool\njsrt::is_big_int(const_value val) const {\n  return JS_IsBigInt(ctx, val);\n}\n\ninline bool\njsrt::is_big_float(const_value val) const {\n  return JS_IsBigFloat(val);\n}\n\ninline bool\njsrt::is_big_decimal(const_value val) const {\n  return JS_IsBigDecimal(val);\n}\n\ninline bool\njsrt::is_bool(const_value val) const {\n  return JS_IsBool(val);\n}\n\ninline bool\njsrt::is_null(const_value val) const {\n  return JS_IsNull(val);\n}\n\ninline bool\njsrt::is_undefined(const_value val) const {\n  return JS_IsUndefined(val);\n}\n\ninline bool\njsrt::is_exception(const_value val) const {\n  return JS_IsException(val);\n}\n\ninline bool\njsrt::is_uninitialized(const_value val) const {\n  return JS_IsUninitialized(val);\n}\n\ninline bool\njsrt::is_string(const_value val) const {\n  return JS_IsString(val);\n}\n\ninline bool\njsrt::is_symbol(const_value val) const {\n  return JS_IsSymbol(val);\n}\n\ninline bool\njsrt::is_object(const_value val) const {\n  return JS_IsObject(val);\n}\n\ninline bool\njsrt::is_error(const_value val) const {\n  return JS_IsError(ctx, val);\n}\n\ninline bool\njsrt::is_function(const_value val) const {\n  return JS_IsFunction(ctx, val);\n}\n\ninline bool\njsrt::is_constructor(const_value val) const {\n  return JS_IsConstructor(ctx, val);\n}\n\ninline bool\njsrt::is_array(const_value val) const {\n  return JS_IsArray(ctx, val);\n}\n\ninline bool\njsrt::is_extensible(const_value val) const {\n  return JS_IsExtensible(ctx, val);\n}\n\ninline bool\njsrt::is_array_like(const_value val) const {\n  if(is_array(val))\n    return true;\n\n  if(has_property(val, \"length\")) {\n    if(is_number(get_property<const char*>(val, \"length\")))\n      return true;\n  }\n  return false;\n}\n\n/**\n * Array iterator\n */\nstruct jsiter {\n  JSValue\n  operator*() const {\n    if(p < n)\n      return i((uint32_t)p);\n    else\n      return JS_UNDEFINED;\n  }\n  jsiter\n  operator++() {\n    jsiter ret = *this;\n    if(p < n)\n      p++;\n    return ret;\n  }\n  jsiter&\n  operator++(int) {\n    if(p < n)\n      ++p;\n    return *this;\n  }\n  bool\n  operator==(const jsiter& o) const {\n    return p == o.p && n == o.n;\n  }\n  bool\n  operator<(const jsiter& o) const {\n    return p < o.p;\n  }\n  bool\n  operator>(const jsiter& o) const {\n    return p > o.p;\n  }\n  bool\n  operator<=(const jsiter& o) const {\n    return !(*this > o);\n  }\n  bool\n  operator>=(const jsiter& o) const {\n    return !(*this < o);\n  }\n  bool\n  operator!=(const jsiter& o) const {\n    return !(*this == o);\n  }\n\n  ptrdiff_t\n  operator-(const jsiter& o) const {\n    return p - o.p;\n  }\n\n  jsiter\n  operator-(size_t o) const {\n    return jsiter(i, n, p - o);\n  }\n\n  jsiter\n  operator+(size_t o) const {\n    return jsiter(i, n, p + o);\n  }\n\nprotected:\n  std::function<JSValue(uint32_t)> i;\n  uint32_t n;\n  uint32_t p;\n\nprivate:\n  friend class jsrt;\n\n  jsiter(std::function<JSValue(uint32_t)> index, size_t len, size_t pos) : i(index), n(len), p(pos) {}\n  jsiter(jsrt& js, const JSValue& arr, size_t len) : i(js.index(arr)), n(len), p(0) {}\n  jsiter(jsrt& js, const JSValue& arr, size_t len, size_t pos) : i(js.index(arr)), n(len), p(pos) {}\n};\n\ninline int32_t\njsrt::get_length(const jsrt::const_value& a) const {\n  uint32_t length;\n  JSValue v = get_property<const char*>(a, \"length\");\n  if(is_undefined(v))\n    return -1;\n  get_number(v, length);\n  return length;\n}\n\ninline jsiter\njsrt::begin(JSValue& v) {\n  uint32_t n = get_length(v);\n  return jsiter(*this, v, n, 0);\n}\n\ninline jsiter\njsrt::end(JSValue& v) {\n  uint32_t n = get_length(v);\n  return jsiter(*this, v, n, n);\n}\n\ninline std::function<JSValue(JSValue, uint32_t)>\njsrt::index() const {\n  return std::bind(&jsrt::get_property<uint32_t>, this, std::placeholders::_1, std::placeholders::_2);\n}\n\ninline std::function<JSValue(uint32_t)>\njsrt::index(const JSValueConst& a) const {\n  return std::bind(&jsrt::get_property<uint32_t>, this, a, std::placeholders::_1);\n}\n\ninline bool\njsrt::is_iterable(const_value val) {\n  bool ret = false;\n  value sym = get_symbol(\"iterator\");\n  if(is_object(val) && has_property(val, sym)) {\n    value iter = get_property<value>(val, sym);\n    ret = is_function(iter);\n  }\n  free_value(sym);\n  return ret;\n}\n\ninline bool\njsrt::is_iterator(const_value val) const {\n  if(is_object(val) && has_property(val, \"next\")) {\n    value next = get_property<const char*>(val, \"next\");\n    return is_function(next);\n  }\n  return false;\n}\n\nextern \"C\" jsrt js;\n\ntemplate<>\ninline std::string\njsrt::to<std::string>(jsrt::const_value val) {\n  return jsrt::to_string(val);\n}\n\ntemplate<>\ninline int32_t\njsrt::to<int32_t>(jsrt::const_value val) {\n  int32_t ret;\n  jsrt::get_number(val, ret);\n  return ret;\n}\n\ntemplate<>\ninline uint32_t\njsrt::to<uint32_t>(jsrt::const_value val) {\n  uint32_t ret;\n  jsrt::get_number(val, ret);\n  return ret;\n}\n\ntemplate<>\ninline float\njsrt::to<float>(jsrt::const_value val) {\n  float ret;\n  jsrt::get_number(val, ret);\n  return ret;\n}\n\ntemplate<>\ninline double\njsrt::to<double>(jsrt::const_value val) {\n  double ret;\n  jsrt::get_number(val, ret);\n  return ret;\n}\n\ntemplate<>\ninline jsrt::value\njsrt::from<std::string>(const std::string& value) {\n  return new_string(value.c_str());\n}\n\n#endif // defined JS_HPP\n",
			"file": "js.hpp",
			"file_size": 23851,
			"file_write_time": 132653233037368085,
			"redo_stack":
			[
				[
					69,
					1,
					"left_delete",
					null,
					"AQAAAGIAAAAAAAAAZAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgAAAAAAAABiAAAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 23851,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					14,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAEMHAAAAAAAARAcAAAAAAAAAAAAARAcAAAAAAABFBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwcAAAAAAABDBwAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " JS_UNDEFINED"
					},
					"DQAAAEUHAAAAAAAARgcAAAAAAAAAAAAARgcAAAAAAABHBwAAAAAAAAAAAABHBwAAAAAAAEgHAAAAAAAAAAAAAEgHAAAAAAAASQcAAAAAAAAAAAAASQcAAAAAAABKBwAAAAAAAAAAAABKBwAAAAAAAEsHAAAAAAAAAAAAAEsHAAAAAAAATAcAAAAAAAAAAAAATAcAAAAAAABNBwAAAAAAAAAAAABNBwAAAAAAAE4HAAAAAAAAAAAAAE4HAAAAAAAATwcAAAAAAAAAAAAATwcAAAAAAABQBwAAAAAAAAAAAABQBwAAAAAAAFEHAAAAAAAAAAAAAFEHAAAAAAAAUgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQcAAAAAAABFBwAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADcHAAAAAAAAOAcAAAAAAAAAAAAAOAcAAAAAAAA5BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwcAAAAAAAA3BwAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " JS_NUKL"
					},
					"CAAAADkHAAAAAAAAOgcAAAAAAAAAAAAAOgcAAAAAAAA7BwAAAAAAAAAAAAA7BwAAAAAAADwHAAAAAAAAAAAAADwHAAAAAAAAPQcAAAAAAAAAAAAAPQcAAAAAAAA+BwAAAAAAAAAAAAA+BwAAAAAAAD8HAAAAAAAAAAAAAD8HAAAAAAAAQAcAAAAAAAAAAAAAQAcAAAAAAABBBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQcAAAAAAAA5BwAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					2,
					"left_delete",
					null,
					"AgAAAEAHAAAAAAAAQAcAAAAAAAABAAAATD8HAAAAAAAAPwcAAAAAAAABAAAASw",
					"AQAAAAAAAAABAAAAQQcAAAAAAABBBwAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "LL"
					},
					"AgAAAD8HAAAAAAAAQAcAAAAAAAAAAAAAQAcAAAAAAABBBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwcAAAAAAAA/BwAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADAHAAAAAAAAMQcAAAAAAAAAAAAAMQcAAAAAAAAyBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAcAAAAAAAAwBwAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " JS_FALSE"
					},
					"CQAAADIHAAAAAAAAMwcAAAAAAAAAAAAAMwcAAAAAAAA0BwAAAAAAAAAAAAA0BwAAAAAAADUHAAAAAAAAAAAAADUHAAAAAAAANgcAAAAAAAAAAAAANgcAAAAAAAA3BwAAAAAAAAAAAAA3BwAAAAAAADgHAAAAAAAAAAAAADgHAAAAAAAAOQcAAAAAAAAAAAAAOQcAAAAAAAA6BwAAAAAAAAAAAAA6BwAAAAAAADsHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgcAAAAAAAAyBwAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"paste",
					null,
					"AQAAACgHAAAAAAAAMgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAcAAAAAAAAoBwAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "TRUE"
					},
					"BQAAAC0HAAAAAAAALgcAAAAAAAAAAAAALgcAAAAAAAAuBwAAAAAAAAUAAABGQUxTRS4HAAAAAAAALwcAAAAAAAAAAAAALwcAAAAAAAAwBwAAAAAAAAAAAAAwBwAAAAAAADEHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgcAAAAAAAAtBwAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " constexpr"
					},
					"CgAAABwHAAAAAAAAHQcAAAAAAAAAAAAAHQcAAAAAAAAeBwAAAAAAAAAAAAAeBwAAAAAAAB8HAAAAAAAAAAAAAB8HAAAAAAAAIAcAAAAAAAAAAAAAIAcAAAAAAAAhBwAAAAAAAAAAAAAhBwAAAAAAACIHAAAAAAAAAAAAACIHAAAAAAAAIwcAAAAAAAAAAAAAIwcAAAAAAAAkBwAAAAAAAAAAAAAkBwAAAAAAACUHAAAAAAAAAAAAACUHAAAAAAAAJgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAcAAAAAAAAcBwAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAJgcAAAAAAAAmBwAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAgwwAAAAAAACDDAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"left_delete",
					null,
					"AQAAAGMAAAAAAAAAYwAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAZAAAAAAAAABkAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_clahe.cpp",
			"settings":
			{
				"buffer_size": 4958,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"paste",
					null,
					"AQAAANUAAAAAAAAAFQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QAAAAAAAADVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANUAAAAAAAAA1gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QAAAAAAAADVAAAAAAAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAHEwAAI2luY2x1ZGUgImpzYmluZGluZ3MuaHBwIgojaW5jbHVkZSAianNfc2l6ZS5ocHAiCiNpbmNsdWRlICJqc19wb2ludC5ocHAiCiNpbmNsdWRlICJqc19tYXQuaHBwIgojaW5jbHVkZSAianNfYWxsb2MuaHBwIgoKSlNWYWx1ZSBjbGFoZV9wcm90byA9IEpTX1VOREVGSU5FRCwgY2xhaGVfY2xhc3MgPSBKU19VTkRFRklORUQ7CkpTQ2xhc3NJRCBqc19jbGFoZV9jbGFzc19pZDsKCmV4dGVybiAiQyIgVklTSUJMRSBpbnQganNfY2xhaGVfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKZXh0ZXJuICJDIiBWSVNJQkxFIEpTVmFsdWUKanNfY2xhaGVfbmV3KEpTQ29udGV4dCogY3R4LCBkb3VibGUgY2xpcExpbWl0ID0gNDAuMCwgY3Y6OlNpemUgdGlsZUdyaWRTaXplID0gY3Y6OlNpemUoOCwgOCkpIHsKICBKU1ZhbHVlIHJldDsKICBKU0NMQUhFRGF0YSogczsKICByZXQgPSBKU19OZXdPYmplY3RQcm90b0NsYXNzKGN0eCwgY2xhaGVfcHJvdG8sIGpzX2NsYWhlX2NsYXNzX2lkKTsKICBzID0ganNfYWxsb2NhdGU8SlNDTEFIRURhdGE+KGN0eCk7CiAgbmV3KHMpIEpTQ0xBSEVEYXRhKCk7CiAgKnMgPSBjdjo6Y3JlYXRlQ0xBSEUoY2xpcExpbWl0LCB0aWxlR3JpZFNpemUpOwogIEpTX1NldE9wYXF1ZShyZXQsIHMpOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX2NsYWhlX2N0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBuZXdfdGFyZ2V0LCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgZG91YmxlIGNsaXBMaW1pdCA9IDQwLjA7CiAgSlNTaXplRGF0YTxkb3VibGU+IHRpbGVHcmlkU2l6ZSA9IGN2OjpTaXplMmQoOCwgOCk7CiAgaWYoYXJnYyA+PSAxKQogICAgSlNfVG9GbG9hdDY0KGN0eCwgJmNsaXBMaW1pdCwgYXJndlswXSk7CiAgaWYoYXJnYyA+PSAyKQogICAgaWYoIWpzX3NpemVfcmVhZChjdHgsIGFyZ3ZbMV0sICZ0aWxlR3JpZFNpemUpKQogICAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogIHJldHVybiBqc19jbGFoZV9uZXcoY3R4LCBjbGlwTGltaXQsIHRpbGVHcmlkU2l6ZSk7Cn0KCkpTQ0xBSEVEYXRhKgpqc19jbGFoZV9kYXRhKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsKSB7CiAgcmV0dXJuIHN0YXRpY19jYXN0PEpTQ0xBSEVEYXRhKj4oSlNfR2V0T3BhcXVlMihjdHgsIHZhbCwganNfY2xhaGVfY2xhc3NfaWQpKTsKfQoKdm9pZApqc19jbGFoZV9maW5hbGl6ZXIoSlNSdW50aW1lKiBydCwgSlNWYWx1ZSB2YWwpIHsKICBKU0NMQUhFRGF0YSogcyA9IHN0YXRpY19jYXN0PEpTQ0xBSEVEYXRhKj4oSlNfR2V0T3BhcXVlKHZhbCwganNfY2xhaGVfY2xhc3NfaWQpKTsKICAvKiBOb3RlOiAncycgY2FuIGJlIE5VTEwgaW4gY2FzZSBKU19TZXRPcGFxdWUoKSB3YXMgbm90IGNhbGxlZCAqLwoKICBzLT5+SlNDTEFIRURhdGEoKTsKICBqc19kZWFsbG9jYXRlKHJ0LCBzKTsKfQoKc3RhdGljIEpTVmFsdWUKanNfY2xhaGVfbWV0aG9kKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YsIGludCBtYWdpYykgewogIEpTQ0xBSEVEYXRhKiBzID0gc3RhdGljX2Nhc3Q8SlNDTEFIRURhdGEqPihKU19HZXRPcGFxdWUyKGN0eCwgdGhpc192YWwsIGpzX2NsYWhlX2NsYXNzX2lkKSk7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CiAgSlNQb2ludERhdGE8ZG91YmxlPiBwb2ludCA9IGpzX3BvaW50X2dldChjdHgsIGFyZ3ZbMF0pOwoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgMDogewogICAgICBjdjo6TWF0ICppbnB1dCwgKm91dHB1dDsKICAgICAgaWYoYXJnYyA8IDIpCiAgICAgICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKICAgICAgaW5wdXQgPSBqc19tYXRfZGF0YShjdHgsIGFyZ3ZbMF0pOwogICAgICBvdXRwdXQgPSBqc19tYXRfZGF0YShjdHgsIGFyZ3ZbMV0pOwogICAgICBpZihpbnB1dCA9PSBudWxscHRyIHx8IG91dHB1dCA9PSBudWxscHRyKQogICAgICAgIHJldHVybiBKU19FWENFUFRJT047CiAgICAgICgqcyktPmFwcGx5KCppbnB1dCwgKm91dHB1dCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAxOiB7CiAgICAgICgqcyktPmNvbGxlY3RHYXJiYWdlKCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAyOiB7CiAgICAgIHJldCA9IEpTX05ld0Zsb2F0NjQoY3R4LCAoKnMpLT5nZXRDbGlwTGltaXQoKSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAzOiB7CiAgICAgIHJldCA9IGpzX3NpemVfd3JhcChjdHgsICgqcyktPmdldFRpbGVzR3JpZFNpemUoKSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSA0OiB7CiAgICAgIGRvdWJsZSBjbGlwTGltaXQ7CiAgICAgIGlmKGFyZ2MgPCAxIHx8IEpTX1RvRmxvYXQ2NChjdHgsICZjbGlwTGltaXQsIGFyZ3ZbMF0pID09IC0xKQogICAgICAgIHJldHVybiBKU19FWENFUFRJT047CiAgICAgICgqcyktPnNldENsaXBMaW1pdChjbGlwTGltaXQpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgNTogewogICAgICBKU1NpemVEYXRhPGRvdWJsZT4gc2l6ZTsKICAgICAgaWYoYXJnYyA8IDEgfHwgIWpzX3NpemVfcmVhZChjdHgsIGFyZ3ZbMF0sICZzaXplKSkKICAgICAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogICAgICAoKnMpLT5zZXRUaWxlc0dyaWRTaXplKHNpemUpOwogICAgICBicmVhazsKICAgIH0KICB9CiAgcmV0dXJuIHJldDsKfQoKSlNDbGFzc0RlZiBqc19jbGFoZV9jbGFzcyA9IHsKICAgIC5jbGFzc19uYW1lID0gIkNMQUhFIiwKICAgIC5maW5hbGl6ZXIgPSBqc19jbGFoZV9maW5hbGl6ZXIsCn07Cgpjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc19jbGFoZV9wcm90b19mdW5jc1tdID0ge0pTX0NGVU5DX01BR0lDX0RFRigiYXBwbHkiLCAwLCBqc19jbGFoZV9tZXRob2QsIDApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigiY29sbGVjdEdhcmJhZ2UiLCAwLCBqc19jbGFoZV9tZXRob2QsIDEpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZ2V0Q2xpcExpbWl0IiwgMCwganNfY2xhaGVfbWV0aG9kLCAyKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DRlVOQ19NQUdJQ19ERUYoImdldFRpbGVzR3JpZFNpemUiLCAwLCBqc19jbGFoZV9tZXRob2QsIDMpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigic2V0Q2xpcExpbWl0IiwgMCwganNfY2xhaGVfbWV0aG9kLCA0KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DRlVOQ19NQUdJQ19ERUYoInNldFRpbGVzR3JpZFNpemUiLCAwLCBqc19jbGFoZV9tZXRob2QsIDUpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX1BST1BfU1RSSU5HX0RFRigiW1N5bWJvbC50b1N0cmluZ1RhZ10iLCAiQ0xBSEUiLCBKU19QUk9QX0NPTkZJR1VSQUJMRSl9OwoKZXh0ZXJuICJDIiBpbnQKanNfY2xhaGVfaW5pdChKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG0pIHsKCiAgLyogY3JlYXRlIHRoZSBDTEFIRSBjbGFzcyAqLwogIEpTX05ld0NsYXNzSUQoJmpzX2NsYWhlX2NsYXNzX2lkKTsKICBKU19OZXdDbGFzcyhKU19HZXRSdW50aW1lKGN0eCksIGpzX2NsYWhlX2NsYXNzX2lkLCAmanNfY2xhaGVfY2xhc3MpOwoKICBjbGFoZV9wcm90byA9IEpTX05ld09iamVjdChjdHgpOwogIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgY2xhaGVfcHJvdG8sIGpzX2NsYWhlX3Byb3RvX2Z1bmNzLCBjb3VudG9mKGpzX2NsYWhlX3Byb3RvX2Z1bmNzKSk7CiAgSlNfU2V0Q2xhc3NQcm90byhjdHgsIGpzX2NsYWhlX2NsYXNzX2lkLCBjbGFoZV9wcm90byk7CgogIGNsYWhlX2NsYXNzID0gSlNfTmV3Q0Z1bmN0aW9uMihjdHgsIGpzX2NsYWhlX2N0b3IsICJDTEFIRSIsIDIsIEpTX0NGVU5DX2NvbnN0cnVjdG9yLCAwKTsKICAvKiBzZXQgcHJvdG8uY29uc3RydWN0b3IgYW5kIGN0b3IucHJvdG90eXBlICovCiAgSlNfU2V0Q29uc3RydWN0b3IoY3R4LCBjbGFoZV9jbGFzcywgY2xhaGVfcHJvdG8pOwoKICBpZihtKQogICAgSlNfU2V0TW9kdWxlRXhwb3J0KGN0eCwgbSwgIkNMQUhFIiwgY2xhaGVfY2xhc3MpOwoKICByZXR1cm4gMDsKfQoKdm9pZApqc19jbGFoZV9jb25zdHJ1Y3RvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSBwYXJlbnQsIGNvbnN0IGNoYXIqIG5hbWUpIHsKICBpZihKU19Jc1VuZGVmaW5lZChjbGFoZV9jbGFzcykpCiAgICBqc19jbGFoZV9pbml0KGN0eCwgMCk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcGFyZW50LCBuYW1lID8gbmFtZSA6ICJDTEFIRSIsIGNsYWhlX2NsYXNzKTsKfQoKI2lmZGVmIEpTX0NMQUhFX01PRFVMRQojZGVmaW5lIEpTX0lOSVRfTU9EVUxFIC8qVklTSUJMRSovIGpzX2luaXRfbW9kdWxlCiNlbHNlCiNkZWZpbmUgSlNfSU5JVF9NT0RVTEUgLypWSVNJQkxFKi8ganNfaW5pdF9tb2R1bGVfY2xhaGUKI2VuZGlmCgpleHRlcm4gIkMiIEpTTW9kdWxlRGVmKgpKU19JTklUX01PRFVMRShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbW9kdWxlX25hbWUpIHsKICBKU01vZHVsZURlZiogbTsKICBtID0gSlNfTmV3Q01vZHVsZShjdHgsIG1vZHVsZV9uYW1lLCAmanNfY2xhaGVfaW5pdCk7CiAgaWYoIW0pCiAgICByZXR1cm4gTlVMTDsKICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiQ0xBSEUiKTsKICByZXR1cm4gbTsKfQoAAAAAAAAAAFMTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"cut",
					null,
					"AQAAAAYTAAAAAAAABhMAAAAAAABNAAAACmV4dGVybiAiQyIgVklTSUJMRSB2b2lkIGpzX2NsYWhlX2V4cG9ydChKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG0pIHsKfQo",
					"AQAAAAAAAAABAAAABhMAAAAAAABTEwAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"paste",
					null,
					"AQAAABwSAAAAAAAAaRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHBIAAAAAAAAcEgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"paste",
					null,
					"AQAAAGcSAAAAAAAAjhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZxIAAAAAAABnEgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"paste",
					null,
					"AgAAAEgTAAAAAAAAVxMAAAAAAAAAAAAAVxMAAAAAAABXEwAAAAAAABIAAABKU19BZGRNb2R1bGVFeHBvcnQ",
					"AQAAAAAAAAABAAAASBMAAAAAAABaEwAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					2,
					"left_delete",
					null,
					"AgAAAF8TAAAAAAAAXxMAAAAAAAAIAAAAICJDTEFIRSJeEwAAAAAAAF4TAAAAAAAAAQAAACw",
					"AQAAAAAAAAABAAAAXxMAAAAAAABnEwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuEwAAI2luY2x1ZGUgImpzYmluZGluZ3MuaHBwIgojaW5jbHVkZSAianNfc2l6ZS5ocHAiCiNpbmNsdWRlICJqc19wb2ludC5ocHAiCiNpbmNsdWRlICJqc19tYXQuaHBwIgojaW5jbHVkZSAianNfYWxsb2MuaHBwIgoKSlNWYWx1ZSBjbGFoZV9wcm90byA9IEpTX1VOREVGSU5FRCwgY2xhaGVfY2xhc3MgPSBKU19VTkRFRklORUQ7CkpTQ2xhc3NJRCBqc19jbGFoZV9jbGFzc19pZDsKCmV4dGVybiAiQyIgVklTSUJMRSBpbnQganNfY2xhaGVfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKZXh0ZXJuICJDIiBWSVNJQkxFIEpTVmFsdWUKanNfY2xhaGVfbmV3KEpTQ29udGV4dCogY3R4LCBkb3VibGUgY2xpcExpbWl0ID0gNDAuMCwgY3Y6OlNpemUgdGlsZUdyaWRTaXplID0gY3Y6OlNpemUoOCwgOCkpIHsKICBKU1ZhbHVlIHJldDsKICBKU0NMQUhFRGF0YSogczsKICByZXQgPSBKU19OZXdPYmplY3RQcm90b0NsYXNzKGN0eCwgY2xhaGVfcHJvdG8sIGpzX2NsYWhlX2NsYXNzX2lkKTsKICBzID0ganNfYWxsb2NhdGU8SlNDTEFIRURhdGE+KGN0eCk7CiAgbmV3KHMpIEpTQ0xBSEVEYXRhKCk7CiAgKnMgPSBjdjo6Y3JlYXRlQ0xBSEUoY2xpcExpbWl0LCB0aWxlR3JpZFNpemUpOwogIEpTX1NldE9wYXF1ZShyZXQsIHMpOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX2NsYWhlX2N0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBuZXdfdGFyZ2V0LCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgZG91YmxlIGNsaXBMaW1pdCA9IDQwLjA7CiAgSlNTaXplRGF0YTxkb3VibGU+IHRpbGVHcmlkU2l6ZSA9IGN2OjpTaXplMmQoOCwgOCk7CiAgaWYoYXJnYyA+PSAxKQogICAgSlNfVG9GbG9hdDY0KGN0eCwgJmNsaXBMaW1pdCwgYXJndlswXSk7CiAgaWYoYXJnYyA+PSAyKQogICAgaWYoIWpzX3NpemVfcmVhZChjdHgsIGFyZ3ZbMV0sICZ0aWxlR3JpZFNpemUpKQogICAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogIHJldHVybiBqc19jbGFoZV9uZXcoY3R4LCBjbGlwTGltaXQsIHRpbGVHcmlkU2l6ZSk7Cn0KCkpTQ0xBSEVEYXRhKgpqc19jbGFoZV9kYXRhKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsKSB7CiAgcmV0dXJuIHN0YXRpY19jYXN0PEpTQ0xBSEVEYXRhKj4oSlNfR2V0T3BhcXVlMihjdHgsIHZhbCwganNfY2xhaGVfY2xhc3NfaWQpKTsKfQoKdm9pZApqc19jbGFoZV9maW5hbGl6ZXIoSlNSdW50aW1lKiBydCwgSlNWYWx1ZSB2YWwpIHsKICBKU0NMQUhFRGF0YSogcyA9IHN0YXRpY19jYXN0PEpTQ0xBSEVEYXRhKj4oSlNfR2V0T3BhcXVlKHZhbCwganNfY2xhaGVfY2xhc3NfaWQpKTsKICAvKiBOb3RlOiAncycgY2FuIGJlIE5VTEwgaW4gY2FzZSBKU19TZXRPcGFxdWUoKSB3YXMgbm90IGNhbGxlZCAqLwoKICBzLT5+SlNDTEFIRURhdGEoKTsKICBqc19kZWFsbG9jYXRlKHJ0LCBzKTsKfQoKc3RhdGljIEpTVmFsdWUKanNfY2xhaGVfbWV0aG9kKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YsIGludCBtYWdpYykgewogIEpTQ0xBSEVEYXRhKiBzID0gc3RhdGljX2Nhc3Q8SlNDTEFIRURhdGEqPihKU19HZXRPcGFxdWUyKGN0eCwgdGhpc192YWwsIGpzX2NsYWhlX2NsYXNzX2lkKSk7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CiAgSlNQb2ludERhdGE8ZG91YmxlPiBwb2ludCA9IGpzX3BvaW50X2dldChjdHgsIGFyZ3ZbMF0pOwoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgMDogewogICAgICBjdjo6TWF0ICppbnB1dCwgKm91dHB1dDsKICAgICAgaWYoYXJnYyA8IDIpCiAgICAgICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKICAgICAgaW5wdXQgPSBqc19tYXRfZGF0YShjdHgsIGFyZ3ZbMF0pOwogICAgICBvdXRwdXQgPSBqc19tYXRfZGF0YShjdHgsIGFyZ3ZbMV0pOwogICAgICBpZihpbnB1dCA9PSBudWxscHRyIHx8IG91dHB1dCA9PSBudWxscHRyKQogICAgICAgIHJldHVybiBKU19FWENFUFRJT047CiAgICAgICgqcyktPmFwcGx5KCppbnB1dCwgKm91dHB1dCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAxOiB7CiAgICAgICgqcyktPmNvbGxlY3RHYXJiYWdlKCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAyOiB7CiAgICAgIHJldCA9IEpTX05ld0Zsb2F0NjQoY3R4LCAoKnMpLT5nZXRDbGlwTGltaXQoKSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAzOiB7CiAgICAgIHJldCA9IGpzX3NpemVfd3JhcChjdHgsICgqcyktPmdldFRpbGVzR3JpZFNpemUoKSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSA0OiB7CiAgICAgIGRvdWJsZSBjbGlwTGltaXQ7CiAgICAgIGlmKGFyZ2MgPCAxIHx8IEpTX1RvRmxvYXQ2NChjdHgsICZjbGlwTGltaXQsIGFyZ3ZbMF0pID09IC0xKQogICAgICAgIHJldHVybiBKU19FWENFUFRJT047CiAgICAgICgqcyktPnNldENsaXBMaW1pdChjbGlwTGltaXQpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgNTogewogICAgICBKU1NpemVEYXRhPGRvdWJsZT4gc2l6ZTsKICAgICAgaWYoYXJnYyA8IDEgfHwgIWpzX3NpemVfcmVhZChjdHgsIGFyZ3ZbMF0sICZzaXplKSkKICAgICAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogICAgICAoKnMpLT5zZXRUaWxlc0dyaWRTaXplKHNpemUpOwogICAgICBicmVhazsKICAgIH0KICB9CiAgcmV0dXJuIHJldDsKfQoKSlNDbGFzc0RlZiBqc19jbGFoZV9jbGFzcyA9IHsKICAgIC5jbGFzc19uYW1lID0gIkNMQUhFIiwKICAgIC5maW5hbGl6ZXIgPSBqc19jbGFoZV9maW5hbGl6ZXIsCn07Cgpjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc19jbGFoZV9wcm90b19mdW5jc1tdID0ge0pTX0NGVU5DX01BR0lDX0RFRigiYXBwbHkiLCAwLCBqc19jbGFoZV9tZXRob2QsIDApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigiY29sbGVjdEdhcmJhZ2UiLCAwLCBqc19jbGFoZV9tZXRob2QsIDEpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZ2V0Q2xpcExpbWl0IiwgMCwganNfY2xhaGVfbWV0aG9kLCAyKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DRlVOQ19NQUdJQ19ERUYoImdldFRpbGVzR3JpZFNpemUiLCAwLCBqc19jbGFoZV9tZXRob2QsIDMpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigic2V0Q2xpcExpbWl0IiwgMCwganNfY2xhaGVfbWV0aG9kLCA0KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DRlVOQ19NQUdJQ19ERUYoInNldFRpbGVzR3JpZFNpemUiLCAwLCBqc19jbGFoZV9tZXRob2QsIDUpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX1BST1BfU1RSSU5HX0RFRigiW1N5bWJvbC50b1N0cmluZ1RhZ10iLCAiQ0xBSEUiLCBKU19QUk9QX0NPTkZJR1VSQUJMRSl9OwoKZXh0ZXJuICJDIiBpbnQKanNfY2xhaGVfaW5pdChKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG0pIHsKCiAgLyogY3JlYXRlIHRoZSBDTEFIRSBjbGFzcyAqLwogIEpTX05ld0NsYXNzSUQoJmpzX2NsYWhlX2NsYXNzX2lkKTsKICBKU19OZXdDbGFzcyhKU19HZXRSdW50aW1lKGN0eCksIGpzX2NsYWhlX2NsYXNzX2lkLCAmanNfY2xhaGVfY2xhc3MpOwoKICBjbGFoZV9wcm90byA9IEpTX05ld09iamVjdChjdHgpOwogIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgY2xhaGVfcHJvdG8sIGpzX2NsYWhlX3Byb3RvX2Z1bmNzLCBjb3VudG9mKGpzX2NsYWhlX3Byb3RvX2Z1bmNzKSk7CiAgSlNfU2V0Q2xhc3NQcm90byhjdHgsIGpzX2NsYWhlX2NsYXNzX2lkLCBjbGFoZV9wcm90byk7CgogIGNsYWhlX2NsYXNzID0gSlNfTmV3Q0Z1bmN0aW9uMihjdHgsIGpzX2NsYWhlX2N0b3IsICJDTEFIRSIsIDIsIEpTX0NGVU5DX2NvbnN0cnVjdG9yLCAwKTsKICAvKiBzZXQgcHJvdG8uY29uc3RydWN0b3IgYW5kIGN0b3IucHJvdG90eXBlICovCiAgSlNfU2V0Q29uc3RydWN0b3IoY3R4LCBjbGFoZV9jbGFzcywgY2xhaGVfcHJvdG8pOwoKICBpZihtKQogICAgSlNfU2V0TW9kdWxlRXhwb3J0KGN0eCwgbSwgIkNMQUhFIiwgY2xhaGVfY2xhc3MpOwoKICByZXR1cm4gMDsKfQoKdm9pZApqc19jbGFoZV9jb25zdHJ1Y3RvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSBwYXJlbnQsIGNvbnN0IGNoYXIqIG5hbWUpIHsKICBpZihKU19Jc1VuZGVmaW5lZChjbGFoZV9jbGFzcykpCiAgICBqc19jbGFoZV9pbml0KGN0eCwgMCk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcGFyZW50LCBuYW1lID8gbmFtZSA6ICJDTEFIRSIsIGNsYWhlX2NsYXNzKTsKfQoKI2lmZGVmIEpTX0NMQUhFX01PRFVMRQojZGVmaW5lIEpTX0lOSVRfTU9EVUxFIC8qVklTSUJMRSovIGpzX2luaXRfbW9kdWxlCiNlbHNlCiNkZWZpbmUgSlNfSU5JVF9NT0RVTEUgLypWSVNJQkxFKi8ganNfaW5pdF9tb2R1bGVfY2xhaGUKI2VuZGlmCgpleHRlcm4gIkMiIFZJU0lCTEUgdm9pZCBqc19jbGFoZV9leHBvcnQoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtKSB7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIkNMQUhFIik7Cn0KCmV4dGVybiAiQyIgSlNNb2R1bGVEZWYqCkpTX0lOSVRfTU9EVUxFKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBtb2R1bGVfbmFtZSkgewogIEpTTW9kdWxlRGVmKiBtOwogIG0gPSBKU19OZXdDTW9kdWxlKGN0eCwgbW9kdWxlX25hbWUsICZqc19jbGFoZV9pbml0KTsKICBpZighbSkKICAgIHJldHVybiBOVUxMOwogIGpzX2NsYWhlX2V4cG9ydChjdHgsIG0pOwogIHJldHVybiBtOwp9AAAAAAAAAABuEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXhMAAAAAAABeEwAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuEwAAI2luY2x1ZGUgImpzYmluZGluZ3MuaHBwIgojaW5jbHVkZSAianNfc2l6ZS5ocHAiCiNpbmNsdWRlICJqc19wb2ludC5ocHAiCiNpbmNsdWRlICJqc19tYXQuaHBwIgojaW5jbHVkZSAianNfYWxsb2MuaHBwIgoKSlNWYWx1ZSBjbGFoZV9wcm90byA9IEpTX1VOREVGSU5FRCwgY2xhaGVfY2xhc3MgPSBKU19VTkRFRklORUQ7CkpTQ2xhc3NJRCBqc19jbGFoZV9jbGFzc19pZDsKCmV4dGVybiAiQyIgVklTSUJMRSBpbnQganNfY2xhaGVfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKZXh0ZXJuICJDIiBWSVNJQkxFIEpTVmFsdWUKanNfY2xhaGVfbmV3KEpTQ29udGV4dCogY3R4LCBkb3VibGUgY2xpcExpbWl0ID0gNDAuMCwgY3Y6OlNpemUgdGlsZUdyaWRTaXplID0gY3Y6OlNpemUoOCwgOCkpIHsKICBKU1ZhbHVlIHJldDsKICBKU0NMQUhFRGF0YSogczsKICByZXQgPSBKU19OZXdPYmplY3RQcm90b0NsYXNzKGN0eCwgY2xhaGVfcHJvdG8sIGpzX2NsYWhlX2NsYXNzX2lkKTsKICBzID0ganNfYWxsb2NhdGU8SlNDTEFIRURhdGE+KGN0eCk7CiAgbmV3KHMpIEpTQ0xBSEVEYXRhKCk7CiAgKnMgPSBjdjo6Y3JlYXRlQ0xBSEUoY2xpcExpbWl0LCB0aWxlR3JpZFNpemUpOwogIEpTX1NldE9wYXF1ZShyZXQsIHMpOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX2NsYWhlX2N0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBuZXdfdGFyZ2V0LCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgZG91YmxlIGNsaXBMaW1pdCA9IDQwLjA7CiAgSlNTaXplRGF0YTxkb3VibGU+IHRpbGVHcmlkU2l6ZSA9IGN2OjpTaXplMmQoOCwgOCk7CiAgaWYoYXJnYyA+PSAxKQogICAgSlNfVG9GbG9hdDY0KGN0eCwgJmNsaXBMaW1pdCwgYXJndlswXSk7CiAgaWYoYXJnYyA+PSAyKQogICAgaWYoIWpzX3NpemVfcmVhZChjdHgsIGFyZ3ZbMV0sICZ0aWxlR3JpZFNpemUpKQogICAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogIHJldHVybiBqc19jbGFoZV9uZXcoY3R4LCBjbGlwTGltaXQsIHRpbGVHcmlkU2l6ZSk7Cn0KCkpTQ0xBSEVEYXRhKgpqc19jbGFoZV9kYXRhKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsKSB7CiAgcmV0dXJuIHN0YXRpY19jYXN0PEpTQ0xBSEVEYXRhKj4oSlNfR2V0T3BhcXVlMihjdHgsIHZhbCwganNfY2xhaGVfY2xhc3NfaWQpKTsKfQoKdm9pZApqc19jbGFoZV9maW5hbGl6ZXIoSlNSdW50aW1lKiBydCwgSlNWYWx1ZSB2YWwpIHsKICBKU0NMQUhFRGF0YSogcyA9IHN0YXRpY19jYXN0PEpTQ0xBSEVEYXRhKj4oSlNfR2V0T3BhcXVlKHZhbCwganNfY2xhaGVfY2xhc3NfaWQpKTsKICAvKiBOb3RlOiAncycgY2FuIGJlIE5VTEwgaW4gY2FzZSBKU19TZXRPcGFxdWUoKSB3YXMgbm90IGNhbGxlZCAqLwoKICBzLT5+SlNDTEFIRURhdGEoKTsKICBqc19kZWFsbG9jYXRlKHJ0LCBzKTsKfQoKc3RhdGljIEpTVmFsdWUKanNfY2xhaGVfbWV0aG9kKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YsIGludCBtYWdpYykgewogIEpTQ0xBSEVEYXRhKiBzID0gc3RhdGljX2Nhc3Q8SlNDTEFIRURhdGEqPihKU19HZXRPcGFxdWUyKGN0eCwgdGhpc192YWwsIGpzX2NsYWhlX2NsYXNzX2lkKSk7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CiAgSlNQb2ludERhdGE8ZG91YmxlPiBwb2ludCA9IGpzX3BvaW50X2dldChjdHgsIGFyZ3ZbMF0pOwoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgMDogewogICAgICBjdjo6TWF0ICppbnB1dCwgKm91dHB1dDsKICAgICAgaWYoYXJnYyA8IDIpCiAgICAgICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKICAgICAgaW5wdXQgPSBqc19tYXRfZGF0YShjdHgsIGFyZ3ZbMF0pOwogICAgICBvdXRwdXQgPSBqc19tYXRfZGF0YShjdHgsIGFyZ3ZbMV0pOwogICAgICBpZihpbnB1dCA9PSBudWxscHRyIHx8IG91dHB1dCA9PSBudWxscHRyKQogICAgICAgIHJldHVybiBKU19FWENFUFRJT047CiAgICAgICgqcyktPmFwcGx5KCppbnB1dCwgKm91dHB1dCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAxOiB7CiAgICAgICgqcyktPmNvbGxlY3RHYXJiYWdlKCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAyOiB7CiAgICAgIHJldCA9IEpTX05ld0Zsb2F0NjQoY3R4LCAoKnMpLT5nZXRDbGlwTGltaXQoKSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAzOiB7CiAgICAgIHJldCA9IGpzX3NpemVfd3JhcChjdHgsICgqcyktPmdldFRpbGVzR3JpZFNpemUoKSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSA0OiB7CiAgICAgIGRvdWJsZSBjbGlwTGltaXQ7CiAgICAgIGlmKGFyZ2MgPCAxIHx8IEpTX1RvRmxvYXQ2NChjdHgsICZjbGlwTGltaXQsIGFyZ3ZbMF0pID09IC0xKQogICAgICAgIHJldHVybiBKU19FWENFUFRJT047CiAgICAgICgqcyktPnNldENsaXBMaW1pdChjbGlwTGltaXQpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgNTogewogICAgICBKU1NpemVEYXRhPGRvdWJsZT4gc2l6ZTsKICAgICAgaWYoYXJnYyA8IDEgfHwgIWpzX3NpemVfcmVhZChjdHgsIGFyZ3ZbMF0sICZzaXplKSkKICAgICAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogICAgICAoKnMpLT5zZXRUaWxlc0dyaWRTaXplKHNpemUpOwogICAgICBicmVhazsKICAgIH0KICB9CiAgcmV0dXJuIHJldDsKfQoKSlNDbGFzc0RlZiBqc19jbGFoZV9jbGFzcyA9IHsKICAgIC5jbGFzc19uYW1lID0gIkNMQUhFIiwKICAgIC5maW5hbGl6ZXIgPSBqc19jbGFoZV9maW5hbGl6ZXIsCn07Cgpjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc19jbGFoZV9wcm90b19mdW5jc1tdID0ge0pTX0NGVU5DX01BR0lDX0RFRigiYXBwbHkiLCAwLCBqc19jbGFoZV9tZXRob2QsIDApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigiY29sbGVjdEdhcmJhZ2UiLCAwLCBqc19jbGFoZV9tZXRob2QsIDEpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZ2V0Q2xpcExpbWl0IiwgMCwganNfY2xhaGVfbWV0aG9kLCAyKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DRlVOQ19NQUdJQ19ERUYoImdldFRpbGVzR3JpZFNpemUiLCAwLCBqc19jbGFoZV9tZXRob2QsIDMpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigic2V0Q2xpcExpbWl0IiwgMCwganNfY2xhaGVfbWV0aG9kLCA0KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DRlVOQ19NQUdJQ19ERUYoInNldFRpbGVzR3JpZFNpemUiLCAwLCBqc19jbGFoZV9tZXRob2QsIDUpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX1BST1BfU1RSSU5HX0RFRigiW1N5bWJvbC50b1N0cmluZ1RhZ10iLCAiQ0xBSEUiLCBKU19QUk9QX0NPTkZJR1VSQUJMRSl9OwoKZXh0ZXJuICJDIiBpbnQKanNfY2xhaGVfaW5pdChKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG0pIHsKCiAgLyogY3JlYXRlIHRoZSBDTEFIRSBjbGFzcyAqLwogIEpTX05ld0NsYXNzSUQoJmpzX2NsYWhlX2NsYXNzX2lkKTsKICBKU19OZXdDbGFzcyhKU19HZXRSdW50aW1lKGN0eCksIGpzX2NsYWhlX2NsYXNzX2lkLCAmanNfY2xhaGVfY2xhc3MpOwoKICBjbGFoZV9wcm90byA9IEpTX05ld09iamVjdChjdHgpOwogIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgY2xhaGVfcHJvdG8sIGpzX2NsYWhlX3Byb3RvX2Z1bmNzLCBjb3VudG9mKGpzX2NsYWhlX3Byb3RvX2Z1bmNzKSk7CiAgSlNfU2V0Q2xhc3NQcm90byhjdHgsIGpzX2NsYWhlX2NsYXNzX2lkLCBjbGFoZV9wcm90byk7CgogIGNsYWhlX2NsYXNzID0gSlNfTmV3Q0Z1bmN0aW9uMihjdHgsIGpzX2NsYWhlX2N0b3IsICJDTEFIRSIsIDIsIEpTX0NGVU5DX2NvbnN0cnVjdG9yLCAwKTsKICAvKiBzZXQgcHJvdG8uY29uc3RydWN0b3IgYW5kIGN0b3IucHJvdG90eXBlICovCiAgSlNfU2V0Q29uc3RydWN0b3IoY3R4LCBjbGFoZV9jbGFzcywgY2xhaGVfcHJvdG8pOwoKICBpZihtKQogICAgSlNfU2V0TW9kdWxlRXhwb3J0KGN0eCwgbSwgIkNMQUhFIiwgY2xhaGVfY2xhc3MpOwoKICByZXR1cm4gMDsKfQoKdm9pZApqc19jbGFoZV9jb25zdHJ1Y3RvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSBwYXJlbnQsIGNvbnN0IGNoYXIqIG5hbWUpIHsKICBpZihKU19Jc1VuZGVmaW5lZChjbGFoZV9jbGFzcykpCiAgICBqc19jbGFoZV9pbml0KGN0eCwgMCk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcGFyZW50LCBuYW1lID8gbmFtZSA6ICJDTEFIRSIsIGNsYWhlX2NsYXNzKTsKfQoKI2lmZGVmIEpTX0NMQUhFX01PRFVMRQojZGVmaW5lIEpTX0lOSVRfTU9EVUxFIC8qVklTSUJMRSovIGpzX2luaXRfbW9kdWxlCiNlbHNlCiNkZWZpbmUgSlNfSU5JVF9NT0RVTEUgLypWSVNJQkxFKi8ganNfaW5pdF9tb2R1bGVfY2xhaGUKI2VuZGlmCgpleHRlcm4gIkMiIFZJU0lCTEUgdm9pZApqc19jbGFoZV9leHBvcnQoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtKSB7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIkNMQUhFIik7Cn0KCmV4dGVybiAiQyIgSlNNb2R1bGVEZWYqCkpTX0lOSVRfTU9EVUxFKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBtb2R1bGVfbmFtZSkgewogIEpTTW9kdWxlRGVmKiBtOwogIG0gPSBKU19OZXdDTW9kdWxlKGN0eCwgbW9kdWxlX25hbWUsICZqc19jbGFoZV9pbml0KTsKICBpZighbSkKICAgIHJldHVybiBOVUxMOwogIGpzX2NsYWhlX2V4cG9ydChjdHgsIG0pOwogIHJldHVybiBtOwp9AAAAAAAAAABuEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXhMAAAAAAABeEwAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuEwAAI2luY2x1ZGUgImpzYmluZGluZ3MuaHBwIgojaW5jbHVkZSAianNfc2l6ZS5ocHAiCiNpbmNsdWRlICJqc19wb2ludC5ocHAiCiNpbmNsdWRlICJqc19tYXQuaHBwIgojaW5jbHVkZSAianNfYWxsb2MuaHBwIgoKSlNWYWx1ZSBjbGFoZV9wcm90byA9IEpTX1VOREVGSU5FRCwgY2xhaGVfY2xhc3MgPSBKU19VTkRFRklORUQ7CkpTQ2xhc3NJRCBqc19jbGFoZV9jbGFzc19pZDsKCmV4dGVybiAiQyIgVklTSUJMRSBpbnQganNfY2xhaGVfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKZXh0ZXJuICJDIiBWSVNJQkxFIEpTVmFsdWUKanNfY2xhaGVfbmV3KEpTQ29udGV4dCogY3R4LCBkb3VibGUgY2xpcExpbWl0ID0gNDAuMCwgY3Y6OlNpemUgdGlsZUdyaWRTaXplID0gY3Y6OlNpemUoOCwgOCkpIHsKICBKU1ZhbHVlIHJldDsKICBKU0NMQUhFRGF0YSogczsKICByZXQgPSBKU19OZXdPYmplY3RQcm90b0NsYXNzKGN0eCwgY2xhaGVfcHJvdG8sIGpzX2NsYWhlX2NsYXNzX2lkKTsKICBzID0ganNfYWxsb2NhdGU8SlNDTEFIRURhdGE+KGN0eCk7CiAgbmV3KHMpIEpTQ0xBSEVEYXRhKCk7CiAgKnMgPSBjdjo6Y3JlYXRlQ0xBSEUoY2xpcExpbWl0LCB0aWxlR3JpZFNpemUpOwogIEpTX1NldE9wYXF1ZShyZXQsIHMpOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX2NsYWhlX2N0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBuZXdfdGFyZ2V0LCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgZG91YmxlIGNsaXBMaW1pdCA9IDQwLjA7CiAgSlNTaXplRGF0YTxkb3VibGU+IHRpbGVHcmlkU2l6ZSA9IGN2OjpTaXplMmQoOCwgOCk7CiAgaWYoYXJnYyA+PSAxKQogICAgSlNfVG9GbG9hdDY0KGN0eCwgJmNsaXBMaW1pdCwgYXJndlswXSk7CiAgaWYoYXJnYyA+PSAyKQogICAgaWYoIWpzX3NpemVfcmVhZChjdHgsIGFyZ3ZbMV0sICZ0aWxlR3JpZFNpemUpKQogICAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogIHJldHVybiBqc19jbGFoZV9uZXcoY3R4LCBjbGlwTGltaXQsIHRpbGVHcmlkU2l6ZSk7Cn0KCkpTQ0xBSEVEYXRhKgpqc19jbGFoZV9kYXRhKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsKSB7CiAgcmV0dXJuIHN0YXRpY19jYXN0PEpTQ0xBSEVEYXRhKj4oSlNfR2V0T3BhcXVlMihjdHgsIHZhbCwganNfY2xhaGVfY2xhc3NfaWQpKTsKfQoKdm9pZApqc19jbGFoZV9maW5hbGl6ZXIoSlNSdW50aW1lKiBydCwgSlNWYWx1ZSB2YWwpIHsKICBKU0NMQUhFRGF0YSogcyA9IHN0YXRpY19jYXN0PEpTQ0xBSEVEYXRhKj4oSlNfR2V0T3BhcXVlKHZhbCwganNfY2xhaGVfY2xhc3NfaWQpKTsKICAvKiBOb3RlOiAncycgY2FuIGJlIE5VTEwgaW4gY2FzZSBKU19TZXRPcGFxdWUoKSB3YXMgbm90IGNhbGxlZCAqLwoKICBzLT5+SlNDTEFIRURhdGEoKTsKICBqc19kZWFsbG9jYXRlKHJ0LCBzKTsKfQoKc3RhdGljIEpTVmFsdWUKanNfY2xhaGVfbWV0aG9kKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YsIGludCBtYWdpYykgewogIEpTQ0xBSEVEYXRhKiBzID0gc3RhdGljX2Nhc3Q8SlNDTEFIRURhdGEqPihKU19HZXRPcGFxdWUyKGN0eCwgdGhpc192YWwsIGpzX2NsYWhlX2NsYXNzX2lkKSk7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CiAgSlNQb2ludERhdGE8ZG91YmxlPiBwb2ludCA9IGpzX3BvaW50X2dldChjdHgsIGFyZ3ZbMF0pOwoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgMDogewogICAgICBjdjo6TWF0ICppbnB1dCwgKm91dHB1dDsKICAgICAgaWYoYXJnYyA8IDIpCiAgICAgICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKICAgICAgaW5wdXQgPSBqc19tYXRfZGF0YShjdHgsIGFyZ3ZbMF0pOwogICAgICBvdXRwdXQgPSBqc19tYXRfZGF0YShjdHgsIGFyZ3ZbMV0pOwogICAgICBpZihpbnB1dCA9PSBudWxscHRyIHx8IG91dHB1dCA9PSBudWxscHRyKQogICAgICAgIHJldHVybiBKU19FWENFUFRJT047CiAgICAgICgqcyktPmFwcGx5KCppbnB1dCwgKm91dHB1dCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAxOiB7CiAgICAgICgqcyktPmNvbGxlY3RHYXJiYWdlKCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAyOiB7CiAgICAgIHJldCA9IEpTX05ld0Zsb2F0NjQoY3R4LCAoKnMpLT5nZXRDbGlwTGltaXQoKSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAzOiB7CiAgICAgIHJldCA9IGpzX3NpemVfd3JhcChjdHgsICgqcyktPmdldFRpbGVzR3JpZFNpemUoKSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSA0OiB7CiAgICAgIGRvdWJsZSBjbGlwTGltaXQ7CiAgICAgIGlmKGFyZ2MgPCAxIHx8IEpTX1RvRmxvYXQ2NChjdHgsICZjbGlwTGltaXQsIGFyZ3ZbMF0pID09IC0xKQogICAgICAgIHJldHVybiBKU19FWENFUFRJT047CiAgICAgICgqcyktPnNldENsaXBMaW1pdChjbGlwTGltaXQpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgNTogewogICAgICBKU1NpemVEYXRhPGRvdWJsZT4gc2l6ZTsKICAgICAgaWYoYXJnYyA8IDEgfHwgIWpzX3NpemVfcmVhZChjdHgsIGFyZ3ZbMF0sICZzaXplKSkKICAgICAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogICAgICAoKnMpLT5zZXRUaWxlc0dyaWRTaXplKHNpemUpOwogICAgICBicmVhazsKICAgIH0KICB9CiAgcmV0dXJuIHJldDsKfQoKSlNDbGFzc0RlZiBqc19jbGFoZV9jbGFzcyA9IHsKICAgIC5jbGFzc19uYW1lID0gIkNMQUhFIiwKICAgIC5maW5hbGl6ZXIgPSBqc19jbGFoZV9maW5hbGl6ZXIsCn07Cgpjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc19jbGFoZV9wcm90b19mdW5jc1tdID0ge0pTX0NGVU5DX01BR0lDX0RFRigiYXBwbHkiLCAwLCBqc19jbGFoZV9tZXRob2QsIDApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigiY29sbGVjdEdhcmJhZ2UiLCAwLCBqc19jbGFoZV9tZXRob2QsIDEpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZ2V0Q2xpcExpbWl0IiwgMCwganNfY2xhaGVfbWV0aG9kLCAyKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DRlVOQ19NQUdJQ19ERUYoImdldFRpbGVzR3JpZFNpemUiLCAwLCBqc19jbGFoZV9tZXRob2QsIDMpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigic2V0Q2xpcExpbWl0IiwgMCwganNfY2xhaGVfbWV0aG9kLCA0KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DRlVOQ19NQUdJQ19ERUYoInNldFRpbGVzR3JpZFNpemUiLCAwLCBqc19jbGFoZV9tZXRob2QsIDUpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX1BST1BfU1RSSU5HX0RFRigiW1N5bWJvbC50b1N0cmluZ1RhZ10iLCAiQ0xBSEUiLCBKU19QUk9QX0NPTkZJR1VSQUJMRSl9OwoKZXh0ZXJuICJDIiBpbnQKanNfY2xhaGVfaW5pdChKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG0pIHsKCiAgLyogY3JlYXRlIHRoZSBDTEFIRSBjbGFzcyAqLwogIEpTX05ld0NsYXNzSUQoJmpzX2NsYWhlX2NsYXNzX2lkKTsKICBKU19OZXdDbGFzcyhKU19HZXRSdW50aW1lKGN0eCksIGpzX2NsYWhlX2NsYXNzX2lkLCAmanNfY2xhaGVfY2xhc3MpOwoKICBjbGFoZV9wcm90byA9IEpTX05ld09iamVjdChjdHgpOwogIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgY2xhaGVfcHJvdG8sIGpzX2NsYWhlX3Byb3RvX2Z1bmNzLCBjb3VudG9mKGpzX2NsYWhlX3Byb3RvX2Z1bmNzKSk7CiAgSlNfU2V0Q2xhc3NQcm90byhjdHgsIGpzX2NsYWhlX2NsYXNzX2lkLCBjbGFoZV9wcm90byk7CgogIGNsYWhlX2NsYXNzID0gSlNfTmV3Q0Z1bmN0aW9uMihjdHgsIGpzX2NsYWhlX2N0b3IsICJDTEFIRSIsIDIsIEpTX0NGVU5DX2NvbnN0cnVjdG9yLCAwKTsKICAvKiBzZXQgcHJvdG8uY29uc3RydWN0b3IgYW5kIGN0b3IucHJvdG90eXBlICovCiAgSlNfU2V0Q29uc3RydWN0b3IoY3R4LCBjbGFoZV9jbGFzcywgY2xhaGVfcHJvdG8pOwoKICBpZihtKQogICAgSlNfU2V0TW9kdWxlRXhwb3J0KGN0eCwgbSwgIkNMQUhFIiwgY2xhaGVfY2xhc3MpOwoKICByZXR1cm4gMDsKfQoKdm9pZApqc19jbGFoZV9jb25zdHJ1Y3RvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSBwYXJlbnQsIGNvbnN0IGNoYXIqIG5hbWUpIHsKICBpZihKU19Jc1VuZGVmaW5lZChjbGFoZV9jbGFzcykpCiAgICBqc19jbGFoZV9pbml0KGN0eCwgMCk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcGFyZW50LCBuYW1lID8gbmFtZSA6ICJDTEFIRSIsIGNsYWhlX2NsYXNzKTsKfQoKI2lmZGVmIEpTX0NMQUhFX01PRFVMRQojZGVmaW5lIEpTX0lOSVRfTU9EVUxFIC8qVklTSUJMRSovIGpzX2luaXRfbW9kdWxlCiNlbHNlCiNkZWZpbmUgSlNfSU5JVF9NT0RVTEUgLypWSVNJQkxFKi8ganNfaW5pdF9tb2R1bGVfY2xhaGUKI2VuZGlmCgpleHRlcm4gIkMiIFZJU0lCTEUgdm9pZApqc19jbGFoZV9leHBvcnQoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtKSB7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIkNMQUhFIik7Cn0KCmV4dGVybiAiQyIgSlNNb2R1bGVEZWYqCkpTX0lOSVRfTU9EVUxFKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBtb2R1bGVfbmFtZSkgewogIEpTTW9kdWxlRGVmKiBtOwogIG0gPSBKU19OZXdDTW9kdWxlKGN0eCwgbW9kdWxlX25hbWUsICZqc19jbGFoZV9pbml0KTsKICBpZighbSkKICAgIHJldHVybiBOVUxMOwogIGpzX2NsYWhlX2V4cG9ydChjdHgsIG0pOwogIHJldHVybiBtOwp9AAAAAAAAAABeEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXhMAAAAAAABeEwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_contour.hpp",
			"settings":
			{
				"buffer_size": 2158,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"paste",
					null,
					"AQAAAOQAAAAAAAAAJgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AAAAAAAAADkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOQAAAAAAAAA5QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AAAAAAAAADkAAAAAAAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuCAAAI2lmbmRlZiBKU19DT05UT1VSX0hQUAojZGVmaW5lIEpTX0NPTlRPVVJfSFBQCgojaW5jbHVkZSAianNfYWxsb2MuaHBwIgojaW5jbHVkZSAiZ2VvbWV0cnkuaHBwIgoKZXh0ZXJuICJDIiB7CmV4dGVybiBKU1ZhbHVlIGNvbnRvdXJfY2xhc3MsIGNvbnRvdXJfcHJvdG87CmV4dGVybiBKU0NsYXNzRGVmIGpzX2NvbnRvdXJfY2xhc3M7CmV4dGVybiBKU0NsYXNzSUQganNfY29udG91cl9jbGFzc19pZDsKCmV4dGVybiAiQyIgVklTSUJMRSBpbnQganNfY29udG91cl9pbml0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7Cgp2b2lkIGpzX2NvbnRvdXJfZmluYWxpemVyKEpTUnVudGltZSogcnQsIEpTVmFsdWUgdmFsKTsKCkpTVmFsdWUganNfY29udG91cl90b19zdHJpbmcoSlNDb250ZXh0KiwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KTsKaW50IGpzX2NvbnRvdXJfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwpKU01vZHVsZURlZioganNfaW5pdF9jb250b3VyX21vZHVsZShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbW9kdWxlX25hbWUpOwp2b2lkIGpzX2NvbnRvdXJfY29uc3RydWN0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWUgcGFyZW50LCBjb25zdCBjaGFyKiBuYW1lKTsKfTsKCnN0YXRpYyBpbmxpbmUgSlNDb250b3VyRGF0YTxkb3VibGU+Kgpqc19jb250b3VyX2RhdGEoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWwpIHsKICByZXR1cm4ganNfY29udG91cl9jbGFzc19pZCA/IHN0YXRpY19jYXN0PEpTQ29udG91ckRhdGE8ZG91YmxlPio+KEpTX0dldE9wYXF1ZTIoY3R4LCB2YWwsIGpzX2NvbnRvdXJfY2xhc3NfaWQpKSA6IDA7Cn0KCkpTVmFsdWUganNfY29udG91cl9uZXcoSlNDb250ZXh0KiBjdHgsIGNvbnN0IEpTQ29udG91ckRhdGE8ZG91YmxlPiYgcG9pbnRzKTsKCnRlbXBsYXRlPGNsYXNzIFQ+CnN0YXRpYyBpbmxpbmUgSlNWYWx1ZQpqc19jb250b3VyX25ldyhKU0NvbnRleHQqIGN0eCwgY29uc3QgSlNDb250b3VyRGF0YTxUPiYgcG9pbnRzKSB7CiAgSlNWYWx1ZSByZXQ7CiAgSlNDb250b3VyRGF0YTxkb3VibGU+KiBjb250b3VyOwogIHJldCA9IEpTX05ld09iamVjdFByb3RvQ2xhc3MoY3R4LCBjb250b3VyX3Byb3RvLCBqc19jb250b3VyX2NsYXNzX2lkKTsKICBjb250b3VyID0ganNfYWxsb2NhdGU8SlNDb250b3VyRGF0YTxkb3VibGU+PihjdHgpOwogIG5ldyhjb250b3VyKSBKU0NvbnRvdXJEYXRhPGRvdWJsZT4oKTsKICBjb250b3VyLT5yZXNpemUocG9pbnRzLnNpemUoKSk7CiAgdHJhbnNmb3JtX3BvaW50cyhwb2ludHMuY2JlZ2luKCksIHBvaW50cy5jZW5kKCksIGNvbnRvdXItPmJlZ2luKCkpOwoKICBKU19TZXRPcGFxdWUocmV0LCBjb250b3VyKTsKICByZXR1cm4gcmV0Owp9OwoKc3RhdGljIGlubGluZSBpbnQKanNfY29udG91cl9yZWFkKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgY29udG91ciwgSlNDb250b3VyRGF0YTxkb3VibGU+KiBvdXQpIHsKICBpbnQgcmV0ID0gMDsKICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgaW5saW5lIEpTQ29udG91ckRhdGE8ZG91YmxlPgpqc19jb250b3VyX2dldChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGNvbnRvdXIpIHsKICBKU0NvbnRvdXJEYXRhPGRvdWJsZT4gciA9IHt9OwogIGpzX2NvbnRvdXJfcmVhZChjdHgsIGNvbnRvdXIsICZyKTsKICByZXR1cm4gcjsKfQoKdGVtcGxhdGU8Y2xhc3MgVD4KSlNWYWx1ZQpqc19jb250b3Vyc19uZXcoSlNDb250ZXh0KiBjdHgsIGNvbnN0IHN0ZDo6dmVjdG9yPEpTQ29udG91ckRhdGE8VD4+JiBjb250b3VycykgewoKICBKU1ZhbHVlIHJldCA9IEpTX05ld0FycmF5KGN0eCk7CiAgdWludDMyX3QgaSwgc2l6ZSA9IGNvbnRvdXJzLnNpemUoKTsKCiAgZm9yKGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7CiAgICBKU1ZhbHVlIGNvbnRvdXIgPSBqc19jb250b3VyX25ldyhjdHgsIGNvbnRvdXJzW2ldKTsKICAgIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCBpLCBjb250b3VyKTsKICB9CgogIHJldHVybiByZXQ7Cn0KCmV4dGVybiAiQyIgaW50IGpzX2NvbnRvdXJfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKI2VuZGlmIC8qIGRlZmluZWQoSlNfQ09OVE9VUl9IUFApICovCgAAAAAAAAAAbggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5QAAAAAAAADlAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_cv.cpp",
			"settings":
			{
				"buffer_size": 84543,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					24,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAMEgBAAAAAAAwSAEAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_cv.hpp",
			"settings":
			{
				"buffer_size": 1321,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOEAAAAAAAAA4gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QAAAAAAAADhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAOIAAAAAAAAAHwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gAAAAAAAADiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAApBQAAI2lmbmRlZiBKU19DVl9IUFAKI2RlZmluZSBKU19DVl9IUFAKCiNpbmNsdWRlIDxvcGVuY3YyL2NvcmUuaHBwPgojaW5jbHVkZSAianNiaW5kaW5ncy5ocHAiCiNpbmNsdWRlICJqc19jb250b3VyLmhwcCIKI2luY2x1ZGUgImpzX3R5cGVkX2FycmF5LmhwcCIKCmV4dGVybiAiQyIgSlNDbGFzc0lEIGpzX21hdF9jbGFzc19pZCwganNfdW1hdF9jbGFzc19pZCwganNfY29udG91cl9jbGFzc19pZDsKCmV4dGVybiAiQyIgVklTSUJMRSBpbnQganNfY3ZfaW5pdChKU0NvbnRleHQqLCBKU01vZHVsZURlZiopOwoKc3RhdGljIGlubGluZSBKU0lucHV0T3V0cHV0QXJyYXkKanNfY3ZfaW5wdXRvdXRwdXRhcnJheShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgY3Y6Ok1hdCogbWF0OwogIGN2OjpVTWF0KiB1bWF0OwogIEpTQ29udG91ckRhdGE8ZG91YmxlPiogY29udG91cjsKICBKU0NvbnRvdXJzRGF0YTxkb3VibGU+KiBjb250b3VyczsKCiAgaWYoKG1hdCA9IHN0YXRpY19jYXN0PGN2OjpNYXQqPihKU19HZXRPcGFxdWUodmFsdWUsIGpzX21hdF9jbGFzc19pZCkpKSkKICAgIHJldHVybiBKU0lucHV0T3V0cHV0QXJyYXkoKm1hdCk7CiAgaWYoKHVtYXQgPSBzdGF0aWNfY2FzdDxjdjo6VU1hdCo+KEpTX0dldE9wYXF1ZSh2YWx1ZSwganNfdW1hdF9jbGFzc19pZCkpKSkKICAgIHJldHVybiBKU0lucHV0T3V0cHV0QXJyYXkoKnVtYXQpOwogIGlmKGpzX2NvbnRvdXJfY2xhc3NfaWQpIHsKICAgIGlmKChjb250b3VyID0gc3RhdGljX2Nhc3Q8SlNDb250b3VyRGF0YTxkb3VibGU+Kj4oSlNfR2V0T3BhcXVlKHZhbHVlLCBqc19jb250b3VyX2NsYXNzX2lkKSkpKQogICAgICByZXR1cm4gSlNJbnB1dE91dHB1dEFycmF5KGN2OjpNYXQoKmNvbnRvdXIpKTsKICB9CgogIGlmKGpzX2lzX2FycmF5YnVmZmVyKGN0eCwgdmFsdWUpKSB7CiAgICB1aW50OF90KiBwdHI7CiAgICBzaXplX3Qgc2l6ZTsKICAgIHB0ciA9IEpTX0dldEFycmF5QnVmZmVyKGN0eCwgJnNpemUsIHZhbHVlKTsKCiAgICByZXR1cm4gSlNJbnB1dE91dHB1dEFycmF5KHB0ciwgc2l6ZSk7CiAgfQoKICBpZihqc19pc190eXBlZGFycmF5KGN0eCwgdmFsdWUpKQogICAgcmV0dXJuIGpzX3R5cGVkYXJyYXlfaW5wdXRvdXRwdXRhcnJheShjdHgsIHZhbHVlKTsKCiAgcmV0dXJuIGN2Ojpub0FycmF5KCk7Cn0KCnRlbXBsYXRlPGNsYXNzIFQ+CnN0YXRpYyBpbmxpbmUgYm9vbApqc19pc19ub2FycmF5KGNvbnN0IFQmIGFycmF5KSB7CiAgcmV0dXJuICZhcnJheSA9PSAmY3Y6Om5vQXJyYXkoKTsKfQoKI2VuZGlmIC8qIGRlZmluZWQoSlNfQ1ZfSFBQKSAqLwAAAAAAAAAAKQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwEAAAAAAAAfAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js_draw.cpp",
			"settings":
			{
				"buffer_size": 16098,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGsBAAAAAAAAbAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawEAAAAAAABrAQAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAGwBAAAAAAAAqwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAEAAAAAAABsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAACIBAAAAAAAAIgEAAAAAAAAxAAAACi8vI2luY2x1ZGUgInBsb3QtY3YuaHBwIgovLyNpbmNsdWRlICJjb2xvci5ocHAiCg",
					"AQAAAAAAAAABAAAAUwEAAAAAAAAiAQAAAAAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAAMUAAAAAAAAAxQAAAAAAAAApAAAALy8jaW5jbHVkZSA8b3BlbmN2Mi9pbWdwcm9jL2ltZ3Byb2MuaHBwPgo",
					"AQAAAAAAAAABAAAAxQAAAAAAAADuAAAAAAAAAAAAAAAAAAAA"
				],
				[
					12,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAxQAAAAAAAADFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"cut",
					null,
					"AQAAAKc+AAAAAAAApz4AAAAAAABLAAAACmV4dGVybiAiQyIgVklTSUJMRSB2b2lkIGpzX2RyYXdfZXhwb3J0KEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewp9",
					"AQAAAAAAAAABAAAApz4AAAAAAADyPgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"paste",
					null,
					"AQAAANY9AAAAAAAAIT4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1j0AAAAAAADWPQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"cut",
					null,
					"AQAAANU9AAAAAAAA1T0AAAAAAABMAAAACgpleHRlcm4gIkMiIFZJU0lCTEUgdm9pZCBqc19kcmF3X2V4cG9ydChKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG0pIHsKfQ",
					"AQAAAAAAAAABAAAAIT4AAAAAAADVPQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"paste",
					null,
					"AQAAAA48AAAAAAAAWjwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADjwAAAAAAAAOPAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFo8AAAAAAAAWzwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWjwAAAAAAABaPAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAAA48AAAAAAAADjwAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAADzwAAAAAAAAPPAAAAAAAAP///////+9/"
				],
				[
					32,
					1,
					"cut",
					null,
					"AQAAAJc9AAAAAAAAlz0AAAAAAAB9AAAAICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiRHJhdyIpOwogIEpTX0FkZE1vZHVsZUV4cG9ydExpc3QoY3R4LCBtLCBqc19kcmF3X3N0YXRpY19mdW5jcywgY291bnRvZihqc19kcmF3X3N0YXRpY19mdW5jcykpOwo",
					"AQAAAAAAAAABAAAAlz0AAAAAAAAUPgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"paste",
					null,
					"AQAAAFg8AAAAAAAA1TwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWDwAAAAAAABYPAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "\njs_draw_export"
					},
					"EgAAABM+AAAAAAAAFD4AAAAAAAAAAAAAFD4AAAAAAAAYPgAAAAAAAAAAAAAUPgAAAAAAABQ+AAAAAAAABAAAACAgICAUPgAAAAAAABY+AAAAAAAAAAAAABY+AAAAAAAAFz4AAAAAAAAAAAAAFz4AAAAAAAAYPgAAAAAAAAAAAAAYPgAAAAAAABk+AAAAAAAAAAAAABk+AAAAAAAAGj4AAAAAAAAAAAAAGj4AAAAAAAAbPgAAAAAAAAAAAAAbPgAAAAAAABw+AAAAAAAAAAAAABw+AAAAAAAAHT4AAAAAAAAAAAAAHT4AAAAAAAAePgAAAAAAAAAAAAAePgAAAAAAAB8+AAAAAAAAAAAAAB8+AAAAAAAAID4AAAAAAAAAAAAAID4AAAAAAAAhPgAAAAAAAAAAAAAhPgAAAAAAACI+AAAAAAAAAAAAACI+AAAAAAAAIz4AAAAAAAAAAAAAIz4AAAAAAAAkPgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEz4AAAAAAAATPgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACQ+AAAAAAAAJj4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJD4AAAAAAAAkPgAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "ctx,m"
					},
					"BQAAACU+AAAAAAAAJj4AAAAAAAAAAAAAJj4AAAAAAAAnPgAAAAAAAAAAAAAnPgAAAAAAACg+AAAAAAAAAAAAACg+AAAAAAAAKT4AAAAAAAAAAAAAKT4AAAAAAAAqPgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJT4AAAAAAAAlPgAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACs+AAAAAAAALD4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKz4AAAAAAAArPgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAALD4AAAAAAAAsPgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAALD4AAAAAAAAsPgAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\nJS_"
					},
					"BwAAAI8EAAAAAAAAkAQAAAAAAAAAAAAAkAQAAAAAAACSBAAAAAAAAAAAAACQBAAAAAAAAJAEAAAAAAAAAgAAACAgkAQAAAAAAACUBAAAAAAAAAAAAACUBAAAAAAAAJUEAAAAAAAAAAAAAJUEAAAAAAAAlgQAAAAAAAAAAAAAlgQAAAAAAACXBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwQAAAAAAACPBAAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					3,
					"left_delete",
					null,
					"AwAAAJYEAAAAAAAAlgQAAAAAAAABAAAAX5UEAAAAAAAAlQQAAAAAAAABAAAAU5QEAAAAAAAAlAQAAAAAAAABAAAASg",
					"AQAAAAAAAAABAAAAlwQAAAAAAACXBAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "js_value_to"
					},
					"CwAAAJQEAAAAAAAAlQQAAAAAAAAAAAAAlQQAAAAAAACWBAAAAAAAAAAAAACWBAAAAAAAAJcEAAAAAAAAAAAAAJcEAAAAAAAAmAQAAAAAAAAAAAAAmAQAAAAAAACZBAAAAAAAAAAAAACZBAAAAAAAAJoEAAAAAAAAAAAAAJoEAAAAAAAAmwQAAAAAAAAAAAAAmwQAAAAAAACcBAAAAAAAAAAAAACcBAAAAAAAAJ0EAAAAAAAAAAAAAJ0EAAAAAAAAngQAAAAAAAAAAAAAngQAAAAAAACfBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAQAAAAAAACUBAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJ8EAAAAAAAAoQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwQAAAAAAACfBAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAKAEAAAAAAAAoQQAAAAAAAAAAAAAoQQAAAAAAACiBAAAAAAAAAAAAACiBAAAAAAAAKMEAAAAAAAAAAAAAKMEAAAAAAAApAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAQAAAAAAACgBAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " argv"
					},
					"BQAAAKQEAAAAAAAApQQAAAAAAAAAAAAApQQAAAAAAACmBAAAAAAAAAAAAACmBAAAAAAAAKcEAAAAAAAAAAAAAKcEAAAAAAAAqAQAAAAAAAAAAAAAqAQAAAAAAACpBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAQAAAAAAACkBAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAKkEAAAAAAAAqwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQQAAAAAAACpBAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "i++"
					},
					"AwAAAKoEAAAAAAAAqwQAAAAAAAAAAAAAqwQAAAAAAACsBAAAAAAAAAAAAACsBAAAAAAAAK0EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgQAAAAAAACqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAK4EAAAAAAAArwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgQAAAAAAACuBAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": " radius"
					},
					"BwAAAK8EAAAAAAAAsAQAAAAAAAAAAAAAsAQAAAAAAACxBAAAAAAAAAAAAACxBAAAAAAAALIEAAAAAAAAAAAAALIEAAAAAAAAswQAAAAAAAAAAAAAswQAAAAAAAC0BAAAAAAAAAAAAAC0BAAAAAAAALUEAAAAAAAAAAAAALUEAAAAAAAAtgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwQAAAAAAACvBAAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALcEAAAAAAAAuAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwQAAAAAAAC3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"left_delete",
					null,
					"AQAAALkEAAAAAAAAuQQAAAAAAAAmAAAAICAgIGpzLmdldF9udW1iZXIoYXJndltpKytdLCByYWRpdXMpOwo",
					"AQAAAAAAAAABAAAAuQQAAAAAAADfBAAAAAAAAAAAAAAAAAAA"
				],
				[
					77,
					1,
					"paste",
					null,
					"AgAAAC0FAAAAAAAAQgUAAAAAAAAAAAAAQgUAAAAAAABCBQAAAAAAAA0AAABqcy5nZXRfbnVtYmVy",
					"AQAAAAAAAAABAAAALQUAAAAAAAA6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"right_delete",
					null,
					"AQAAAEIFAAAAAAAAQgUAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAQgUAAAAAAABCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BwAAAFgFAAAAAAAAWQUAAAAAAAAAAAAAWQUAAAAAAABhBQAAAAAAAAAAAABZBQAAAAAAAFkFAAAAAAAACAAAACAgICAgICAgWQUAAAAAAABfBQAAAAAAAAAAAABfBQAAAAAAAGAFAAAAAAAAAAAAAGAFAAAAAAAAZgUAAAAAAAAAAAAAWQUAAAAAAABZBQAAAAAAAAYAAAAgICAgICA",
					"AQAAAAAAAAABAAAAWAUAAAAAAABYBQAAAAAAAP///////+9/"
				],
				[
					83,
					1,
					"paste",
					null,
					"AgAAACcGAAAAAAAAPAYAAAAAAAAAAAAAPAYAAAAAAAA8BgAAAAAAAA4AAABqcy5nZXRfbnVtYmVyKA",
					"AQAAAAAAAAABAAAAJwYAAAAAAAA1BgAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"paste",
					null,
					"AgAAAJsFAAAAAAAAsAUAAAAAAAAAAAAAsAUAAAAAAACwBQAAAAAAABEAAAAgIGpzLmdldF9ib29sZWFuKA",
					"AQAAAAAAAAABAAAArAUAAAAAAACbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"",
					null,
					"AQAAADMKAAAAAAAARAoAAAAAAAAOAAAAanMuZ2V0X251bWJlcig",
					"AQAAAAAAAAABAAAAMwoAAAAAAABBCgAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"",
					null,
					"AQAAAOwVAAAAAAAA/RUAAAAAAAAOAAAAanMuZ2V0X251bWJlcig",
					"AQAAAAAAAAABAAAA7BUAAAAAAAD6FQAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"",
					null,
					"AQAAABkZAAAAAAAAKhkAAAAAAAAOAAAAanMuZ2V0X251bWJlcig",
					"AQAAAAAAAAABAAAAGRkAAAAAAAAnGQAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"",
					null,
					"AQAAABcfAAAAAAAAKB8AAAAAAAAOAAAAanMuZ2V0X251bWJlcig",
					"AQAAAAAAAAABAAAAFx8AAAAAAAAlHwAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"",
					null,
					"AQAAAD8WAAAAAAAAUBYAAAAAAAAPAAAAanMuZ2V0X2Jvb2xlYW4o",
					"AQAAAAAAAAABAAAAPxYAAAAAAABOFgAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"",
					null,
					"AQAAAG4ZAAAAAAAAfxkAAAAAAAAPAAAAanMuZ2V0X2Jvb2xlYW4o",
					"AQAAAAAAAAABAAAAbhkAAAAAAAB9GQAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"",
					null,
					"AQAAAG4fAAAAAAAAfx8AAAAAAAAPAAAAanMuZ2V0X2Jvb2xlYW4o",
					"AQAAAAAAAAABAAAAbh8AAAAAAAB9HwAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"cut",
					null,
					"AQAAAI4AAAAAAAAAjgAAAAAAAAAVAAAAI2luY2x1ZGUgImpzX2N2LmhwcCIK",
					"AQAAAAAAAAABAAAAjgAAAAAAAACjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					2,
					"paste",
					null,
					"AgAAAI4AAAAAAAAAowAAAAAAAAAAAAAAowAAAAAAAAC4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "js"
					},
					"BAAAAK0AAAAAAAAArgAAAAAAAAAAAAAArgAAAAAAAACuAAAAAAAAAAUAAABqc19jdmsFAAAAAAAAawUAAAAAAAAGAAAAICAgICAgrgAAAAAAAACvAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQAAAAAAAACyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"cut",
					null,
					"AQAAAKMAAAAAAAAAowAAAAAAAAASAAAAI2luY2x1ZGUgImpzLmhwcCIK",
					"AQAAAAAAAAABAAAAowAAAAAAAAC1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAEgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": "JS"
					},
					"AwAAADIWAAAAAAAAMxYAAAAAAAAAAAAAMxYAAAAAAAAzFgAAAAAAAAoAAABqcy5pc19ib29sMxYAAAAAAAA0FgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMhYAAAAAAAA8FgAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"left_delete",
					null,
					"AQAAADMWAAAAAAAAMxYAAAAAAAABAAAAUw",
					"AQAAAAAAAAABAAAANBYAAAAAAAA0FgAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": "S_IsBool"
					},
					"CAAAADMWAAAAAAAANBYAAAAAAAAAAAAANBYAAAAAAAA1FgAAAAAAAAAAAAA1FgAAAAAAADYWAAAAAAAAAAAAADYWAAAAAAAANxYAAAAAAAAAAAAANxYAAAAAAAA4FgAAAAAAAAAAAAA4FgAAAAAAADkWAAAAAAAAAAAAADkWAAAAAAAAOhYAAAAAAAAAAAAAOhYAAAAAAAA7FgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMxYAAAAAAAAzFgAAAAAAAAAAAAAAAPC/"
				],
				[
					199,
					1,
					"",
					null,
					"AwAAAGAfAAAAAAAAaR8AAAAAAAAKAAAAanMuaXNfYm9vbGAZAAAAAAAAaRkAAAAAAAAKAAAAanMuaXNfYm9vbIwFAAAAAAAAlQUAAAAAAAAKAAAAanMuaXNfYm9vbA",
					"AQAAAAAAAAABAAAAYBkAAAAAAABqGQAAAAAAAAAAAAAAAPC/"
				],
				[
					211,
					1,
					"",
					null,
					"AQAAAGgYAAAAAAAAfhgAAAAAAAARAAAAanMuaXNfYXJyYXlfbGlrZSg",
					"AQAAAAAAAAABAAAAaBgAAAAAAAB5GAAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAALIYAAAAAAAAsxgAAAAAAAAAAAAAsxgAAAAAAAC3GAAAAAAAAAAAAACzGAAAAAAAALMYAAAAAAAABAAAACAgICCzGAAAAAAAALUYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAshgAAAAAAACyGAAAAAAAAAAAAAAAAPC/"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": "js_array_to"
					},
					"DQAAAIwYAAAAAAAAjRgAAAAAAAAAAAAAjRgAAAAAAACNGAAAAAAAABIAAABqcy5nZXRfcG9pbnRfYXJyYXmiGAAAAAAAAKIYAAAAAAAAAgAAACAgjRgAAAAAAACOGAAAAAAAAAAAAACOGAAAAAAAAI8YAAAAAAAAAAAAAI8YAAAAAAAAkBgAAAAAAAAAAAAAkBgAAAAAAACRGAAAAAAAAAAAAACRGAAAAAAAAJIYAAAAAAAAAAAAAJIYAAAAAAAAkxgAAAAAAAAAAAAAkxgAAAAAAACUGAAAAAAAAAAAAACUGAAAAAAAAJUYAAAAAAAAAAAAAJUYAAAAAAAAlhgAAAAAAAAAAAAAlhgAAAAAAACXGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjBgAAAAAAACeGAAAAAAAAAAAAAAAAPC/"
				],
				[
					234,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAJgYAAAAAAAAmRgAAAAAAAAAAAAAmRgAAAAAAACaGAAAAAAAAAAAAACaGAAAAAAAAJsYAAAAAAAAAAAAAJsYAAAAAAAAnBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmBgAAAAAAACYGAAAAAAAAAAAAAAAAPC/"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJwYAAAAAAAAnRgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnBgAAAAAAACcGAAAAAAAAAAAAAAAAPC/"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": "js_color_read"
					},
					"DgAAAN0YAAAAAAAA3hgAAAAAAAAAAAAA3hgAAAAAAADeGAAAAAAAAAwAAABqcy5nZXRfY29sb3LeGAAAAAAAAN8YAAAAAAAAAAAAAN8YAAAAAAAA4BgAAAAAAAAAAAAA4BgAAAAAAADhGAAAAAAAAAAAAADhGAAAAAAAAOIYAAAAAAAAAAAAAOIYAAAAAAAA4xgAAAAAAAAAAAAA4xgAAAAAAADkGAAAAAAAAAAAAADkGAAAAAAAAOUYAAAAAAAAAAAAAOUYAAAAAAAA5hgAAAAAAAAAAAAA5hgAAAAAAADnGAAAAAAAAAAAAADnGAAAAAAAAOgYAAAAAAAAAAAAAOgYAAAAAAAA6RgAAAAAAAAAAAAA6RgAAAAAAADqGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3RgAAAAAAADpGAAAAAAAAAAAAAAAAPC/"
				],
				[
					240,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAOsYAAAAAAAA7BgAAAAAAAAAAAAA7BgAAAAAAADtGAAAAAAAAAAAAADtGAAAAAAAAO4YAAAAAAAAAAAAAO4YAAAAAAAA7xgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6xgAAAAAAADrGAAAAAAAAAAAAAAAAPC/"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO8YAAAAAAAA8BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7xgAAAAAAADvGAAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAPsYAAAAAAAA/BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+xgAAAAAAAD7GAAAAAAAAAAAAAAAAPC/"
				],
				[
					256,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAANcYAAAAAAAA2RgAAAAAAAAAAAAAvxgAAAAAAADBGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvxgAAAAAAADXGAAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAL8YAAAAAAAAwBgAAAAAAAAAAAAAwBgAAAAAAADAGAAAAAAAABwAAAAvKiAmJiBqcy5pc19jb2xvcihhcmd2W2ldKSov",
					"AQAAAAAAAAABAAAAvxgAAAAAAADbGAAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					1,
					"left_delete",
					null,
					"AQAAAPAdAAAAAAAA8B0AAAAAAAAoAAAAICAgIC8vICAgIGpzLmdldF9yZWN0KGFyZ3ZbaSsrXSwgcmVjdCk7Cg",
					"AQAAAAAAAAABAAAA8B0AAAAAAAAYHgAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAASAAAAI2luY2x1ZGUgImpzLmhwcCIK",
					"AQAAAAAAAAABAAAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAPC/"
				],
				[
					291,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "cmake/CCache.cmake",
			"settings":
			{
				"buffer_size": 1748,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"right_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"left_delete",
					null,
					"AQAAANQGAAAAAAAA1AYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA1QYAAAAAAADVBgAAAAAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"right_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					9,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADTBgAAc2V0KF9fRklORF9ST09UX1BBVEhfTU9ERV9QUk9HUkFNICR7Q01BS0VfRklORF9ST09UX1BBVEhfTU9ERV9QUk9HUkFNfSkKc2V0KENNQUtFX0ZJTkRfUk9PVF9QQVRIX01PREVfUFJPR1JBTSBORVZFUikKCmZpbmRfcHJvZ3JhbShDQ0FDSEVfRVhFQ1VUQUJMRSBjY2FjaGUgUVVJRVQpCm1hcmtfYXNfYWR2YW5jZWQoQ0NBQ0hFX0VYRUNVVEFCTEUpCgpzZXQoQ01BS0VfRklORF9ST09UX1BBVEhfTU9ERV9QUk9HUkFNICR7X19GSU5EX1JPT1RfUEFUSF9NT0RFX1BST0dSQU19KQpzZXQoX19GSU5EX1JPT1RfUEFUSF9NT0RFX1BST0dSQU0pCgptYWNybyh1c2VfY2NhY2hlKQogIGlmKE5PVCBDQ0FDSEVfRVhFQ1VUQUJMRSkKICAgIG1lc3NhZ2UoRkFUQUxfRVJST1IgInVzZV9jY2FjaGU6IGNjYWNoZSBub3QgZm91bmQuIikKICBlbmRpZigpCgogIGlmKENNQUtFX1ZFUlNJT04gVkVSU0lPTl9MRVNTIDMuNCkKICAgICMgUHJpb3IgdG8gMy40LCBoYWQgdG8gdXNlIHRoZXNlIHByb3BlcnRpZXMgTm90ZTogVGhlc2UgbWF5IGNvbmZsaWN0IHdpdGggQ1Rlc3QKICAgIHNldF9wcm9wZXJ0eShHTE9CQUwgUFJPUEVSVFkgUlVMRV9MQVVOQ0hfQ09NUElMRSAiJHtDQ0FDSEVfRVhFQ1VUQUJMRX0iKQogICAgc2V0X3Byb3BlcnR5KEdMT0JBTCBQUk9QRVJUWSBSVUxFX0xBVU5DSF9MSU5LICIke0NDQUNIRV9FWEVDVVRBQkxFfSIpCiAgZWxzZSgpCiAgICAjIENNYWtlIDMuNCBpbnRyb2R1Y2VkICdDT01QSUxFUl9MQVVOQ0hFUicKICAgIHNldChDTUFLRV9DX0NPTVBJTEVSX0xBVU5DSEVSICIke0NDQUNIRV9FWEVDVVRBQkxFfSIpCiAgICBzZXQoQ01BS0VfQ1hYX0NPTVBJTEVSX0xBVU5DSEVSICIke0NDQUNIRV9FWEVDVVRBQkxFfSIpCiAgZW5kaWYoKQplbmRtYWNybygpCgpmdW5jdGlvbih0YXJnZXRfZW5hYmxlX2NjYWNoZSB0YXJnZXQpCiAgaWYoTk9UIENDQUNIRV9FWEVDVVRBQkxFKQogICAgbWVzc2FnZShGQVRBTF9FUlJPUiAidGFyZ2V0X2VuYWJsZV9jY2FjaGU6IGNjYWNoZSBub3QgZm91bmQuIikKICBlbmRpZigpCgogIGlmKENNQUtFX1ZFUlNJT04gVkVSU0lPTl9HUkVBVEVSIDMuMykKICAgICMgQ01ha2UgMy40IGludHJvZHVjZWQgJ0NPTVBJTEVSX0xBVU5DSEVSJwogICAgc2V0X3Byb3BlcnR5KFRBUkdFVCAiJHt0YXJnZXR9IiBQUk9QRVJUWSBDX0NPTVBJTEVSX0xBVU5DSEVSICIke0NDQUNIRV9FWEVDVVRBQkxFfSIpCiAgICBzZXRfcHJvcGVydHkoVEFSR0VUICIke3RhcmdldH0iIFBST1BFUlRZIENYWF9DT01QSUxFUl9MQVVOQ0hFUiAiJHtDQ0FDSEVfRVhFQ1VUQUJMRX0iKQogIGVsc2UoKQogICAgIyBQcmlvciB0byAzLjQsIGhhZCB0byB1c2UgdGhlc2UgcHJvcGVydGllcyBOb3RlOiBUaGVzZSBtYXkgY29uZmxpY3Qgd2l0aCBDVGVzdAogICAgc2V0X3Byb3BlcnR5KFRBUkdFVCAiJHt0YXJnZXR9IiBQUk9QRVJUWSBSVUxFX0xBVU5DSF9DT01QSUxFICIke0NDQUNIRV9FWEVDVVRBQkxFfSIpCiAgICBzZXRfcHJvcGVydHkoVEFSR0VUICIke3RhcmdldH0iIFBST1BFUlRZIFJVTEVfTEFVTkNIX0xJTksgIiR7Q0NBQ0hFX0VYRUNVVEFCTEV9IikKICBlbmRpZigpCmVuZGZ1bmN0aW9uKCkKCmlmKENDQUNIRV9FWEVDVVRBQkxFKQogIG9wdGlvbihFTkFCTEVfQ0NBQ0hFICJFbmFibGUgY29tcGlsZXIgY2FjaGUiIE9GRikKZW5kaWYoQ0NBQ0hFX0VYRUNVVEFCTEUpCgppZihFTkFCTEVfQ0NBQ0hFKQogIHVzZV9jY2FjaGUoKQplbmRpZihFTkFCTEVfQ0NBQ0hFKQAAAAAAAAAA1AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wYAAAAAAADTBgAAAAAAAAAAAAAAAGlA"
				]
			]
		},
		{
			"file": "cmake/CheckFlags.cmake",
			"settings":
			{
				"buffer_size": 5478,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					23,
					1,
					"insert",
					{
						"characters": " VAR"
					},
					"BAAAALoIAAAAAAAAuwgAAAAAAAAAAAAAuwgAAAAAAAC8CAAAAAAAAAAAAAC8CAAAAAAAAL0IAAAAAAAAAAAAAL0IAAAAAAAAvggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuggAAAAAAAC6CAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"AwAAAL8IAAAAAAAAwAgAAAAAAAAAAAAAwAgAAAAAAADBCAAAAAAAAAAAAADBCAAAAAAAAMIIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwgAAAAAAAC/CAAAAAAAAAAAAAAAQG9A"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMIIAAAAAAAAwwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwggAAAAAAADCCAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAAMIIAAAAAAAAwggAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAwwgAAAAAAADDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMIIAAAAAAAAxAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwggAAAAAAADCCAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "NOT"
					},
					"AwAAAMMIAAAAAAAAxAgAAAAAAAAAAAAAxAgAAAAAAADFCAAAAAAAAAAAAADFCAAAAAAAAMYIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwgAAAAAAADDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " VAR"
					},
					"BAAAAMYIAAAAAAAAxwgAAAAAAAAAAAAAxwgAAAAAAADICAAAAAAAAAAAAADICAAAAAAAAMkIAAAAAAAAAAAAAMkIAAAAAAAAyggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxggAAAAAAADGCAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\nendif"
					},
					"BgAAAMsIAAAAAAAAzAgAAAAAAAAAAAAAzAgAAAAAAADNCAAAAAAAAAAAAADNCAAAAAAAAM4IAAAAAAAAAAAAAM4IAAAAAAAAzwgAAAAAAAAAAAAAzwgAAAAAAADQCAAAAAAAAAAAAADQCAAAAAAAANEIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywgAAAAAAADLCAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANEIAAAAAAAA0wgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0QgAAAAAAADRCAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "NOT"
					},
					"AwAAANIIAAAAAAAA0wgAAAAAAAAAAAAA0wgAAAAAAADUCAAAAAAAAAAAAADUCAAAAAAAANUIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0ggAAAAAAADSCAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " VAR"
					},
					"BAAAANUIAAAAAAAA1ggAAAAAAAAAAAAA1ggAAAAAAADXCAAAAAAAAAAAAADXCAAAAAAAANgIAAAAAAAAAAAAANgIAAAAAAAA2QgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QgAAAAAAADVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "\nset"
					},
					"BAAAAMsIAAAAAAAAzAgAAAAAAAAAAAAAzAgAAAAAAADNCAAAAAAAAAAAAADNCAAAAAAAAM4IAAAAAAAAAAAAAM4IAAAAAAAAzwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywgAAAAAAADLCAAAAAAAAAAAAAAAgGFA"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM8IAAAAAAAA0AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwgAAAAAAADPCAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"left_delete",
					null,
					"AQAAAM8IAAAAAAAAzwgAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA0AgAAAAAAADQCAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAM8IAAAAAAAA0QgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwgAAAAAAADPCAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "VAR"
					},
					"AwAAANAIAAAAAAAA0QgAAAAAAAAAAAAA0QgAAAAAAADSCAAAAAAAAAAAAADSCAAAAAAAANMIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0AgAAAAAAADQCAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " CMAKE_C_FLAGS"
					},
					"DgAAANMIAAAAAAAA1AgAAAAAAAAAAAAA1AgAAAAAAADVCAAAAAAAAAAAAADVCAAAAAAAANYIAAAAAAAAAAAAANYIAAAAAAAA1wgAAAAAAAAAAAAA1wgAAAAAAADYCAAAAAAAAAAAAADYCAAAAAAAANkIAAAAAAAAAAAAANkIAAAAAAAA2ggAAAAAAAAAAAAA2ggAAAAAAADbCAAAAAAAAAAAAADbCAAAAAAAANwIAAAAAAAAAAAAANwIAAAAAAAA3QgAAAAAAAAAAAAA3QgAAAAAAADeCAAAAAAAAAAAAADeCAAAAAAAAN8IAAAAAAAAAAAAAN8IAAAAAAAA4AgAAAAAAAAAAAAA4AgAAAAAAADhCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wgAAAAAAADTCAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAMwIAAAAAAAAzQgAAAAAAAAAAAAAzQgAAAAAAADOCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAgAAAAAAADMCAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"left_delete",
					null,
					"AQAAANYIAAAAAAAA1ggAAAAAAAAIAAAAQ01BS0VfQ18",
					"AQAAAAAAAAABAAAA1ggAAAAAAADeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AgAAAEgJAAAAAAAASQkAAAAAAAAAAAAASQkAAAAAAABJCQAAAAAAAAsAAABGTEFHU19ERUJVRw",
					"AQAAAAAAAAABAAAASAkAAAAAAABTCQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEkJAAAAAAAASwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQkAAAAAAABJCQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "VAR"
					},
					"AwAAAEoJAAAAAAAASwkAAAAAAAAAAAAASwkAAAAAAABMCQAAAAAAAAAAAABMCQAAAAAAAE0JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgkAAAAAAABKCQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"paste",
					null,
					"AgAAAIMJAAAAAAAAiQkAAAAAAAAAAAAAiQkAAAAAAACJCQAAAAAAAAsAAABGTEFHU19ERUJVRw",
					"AQAAAAAAAAABAAAAgwkAAAAAAACOCQAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"paste",
					null,
					"AgAAADEJAAAAAAAANwkAAAAAAAAAAAAANwkAAAAAAAA3CQAAAAAAAAUAAABGTEFHUw",
					"AQAAAAAAAAABAAAAMQkAAAAAAAA2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"paste",
					null,
					"AgAAAGsJAAAAAAAAcQkAAAAAAAAAAAAAcQkAAAAAAABxCQAAAAAAAAsAAABGTEFHU19ERUJVRw",
					"AQAAAAAAAAABAAAAawkAAAAAAAB2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					6,
					"left_delete",
					null,
					"BgAAADwJAAAAAAAAPAkAAAAAAAABAAAARzsJAAAAAAAAOwkAAAAAAAABAAAAVToJAAAAAAAAOgkAAAAAAAABAAAAQjkJAAAAAAAAOQkAAAAAAAABAAAARTgJAAAAAAAAOAkAAAAAAAABAAAARDcJAAAAAAAANwkAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAPQkAAAAAAAA9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABmFQAAaW5jbHVkZShDaGVja0NDb21waWxlckZsYWcpCmluY2x1ZGUoQ2hlY2tDWFhDb21waWxlckZsYWcpCgptYWNybyhhcHBlbmRfdmFycyBTVFIpCiAgZm9yZWFjaChMICR7QVJHTn0pCiAgICBzZXQoTElTVCAiJHske0x9fSIpCiAgICBpZihOT1QgTElTVCBNQVRDSEVTICIuKiR7U1RSfS4qIikKICAgICAgaWYoIiR7TElTVH0iIFNUUkVRVUFMICIiKQogICAgICAgIHNldChMSVNUICIke1NUUn0iKQogICAgICBlbHNlKCIke0xJU1R9IiBTVFJFUVVBTCAiIikKICAgICAgICBzZXQoTElTVCAiJHtMSVNUfSAke1NUUn0iKQogICAgICBlbmRpZigiJHtMSVNUfSIgU1RSRVFVQUwgIiIpCgogICAgZW5kaWYoTk9UIExJU1QgTUFUQ0hFUyAiLioke1NUUn0uKiIpCiAgICBzdHJpbmcoUkVQTEFDRSAiOyIgIiAiIExJU1QgIiR7TElTVH0iKQogICAgIyBtZXNzYWdlKCJOZXcgdmFsdWUgZm9yICR7TH06ICR7TElTVH0iKQogICAgc2V0KCIke0x9IiAiJHtMSVNUfSIgUEFSRU5UX1NDT1BFKQogIGVuZGZvcmVhY2goTCAke0FSR059KQplbmRtYWNybyhhcHBlbmRfdmFycyBTVFIpCgpmdW5jdGlvbihjaGVja19mbGFnIEZMQUcgVkFSKQogIGlmKE5PVCBWQVIgT1IgVkFSIFNUUkVRVUFMICIiKQogICAgc3RyaW5nKFRPVVBQRVIgIiR7RkxBR30iIFRNUCkKICAgIHN0cmluZyhSRUdFWCBSRVBMQUNFICJbXjAtOUEtWmEtel0iIF8gVkFSICIke1RNUH0iKQogIGVuZGlmKE5PVCBWQVIgT1IgVkFSIFNUUkVRVUFMICIiKQogIHNldChDTUFLRV9SRVFVSVJFRF9RVUlFVCBPTikKICBjaGVja19jX2NvbXBpbGVyX2ZsYWcoIiR7RkxBR30iICIke1ZBUn0iKQogIHNldChDTUFLRV9SRVFVSVJFRF9RVUlFVCBPRkYpCgogIHNldChSRVNVTFQgIiR7JHtWQVJ9fSIpCiAgaWYoUkVTVUxUKQogICAgYXBwZW5kX3ZhcnMoJHtGTEFHfSAke0FSR059KQogICAgbWVzc2FnZShTVEFUVVMgIkNvbXBpbGVyIGZsYWcgJHtGTEFHfSAuLi4gc3VwcG9ydGVkIikKICAgICMgbWVzc2FnZSgiYXBwZW5kX3ZhcnMoJHtGTEFHfSAke0FSR059KSIpCiAgZW5kaWYoUkVTVUxUKQplbmRmdW5jdGlvbihjaGVja19mbGFnIEZMQUcgVkFSKQoKbWFjcm8oY2hlY2tfZmxhZ3MgRkxBR1MpCiAgbWVzc2FnZSgiQ2hlY2tpbmcgZmxhZ3MgJHtGTEFHU30gJHtBUkdOfSIpCiAgZm9yZWFjaChGTEFHICR7RkxBR1N9KQogICAgY2hlY2tfZmxhZygke0ZMQUd9ICIiICR7QVJHTn0pCiAgZW5kZm9yZWFjaChGTEFHICR7RkxBR1N9KQplbmRtYWNybyhjaGVja19mbGFncyBGTEFHUykKCm1hY3JvKGNoZWNrX25vd2Fybl9mbGFnIEZMQUcpCiAgY2Fub25pY2FsaXplKFZBUk5BTUUgIiR7RkxBR30iKQogIGNoZWNrX2NfY29tcGlsZXJfZmxhZygiJHtGTEFHfSIgIiR7VkFSTkFNRX0iKQogICMgZHVtcCgke1ZBUk5BTUV9KQoKICBpZigke1ZBUk5BTUV9KQogICAgc2V0KENNQUtFX0NfRkxBR1MgIiR7Q01BS0VfQ19GTEFHU30gJHtGTEFHfSIpCiAgICBzZXQoQ01BS0VfQ1hYX0ZMQUdTICIke0NNQUtFX0NYWF9GTEFHU30gJHtGTEFHfSIpCgogIGVuZGlmKCR7VkFSTkFNRX0pCmVuZG1hY3JvKGNoZWNrX25vd2Fybl9mbGFnIEZMQUcpCgptYWNybyhBRERfTk9XQVJOX0ZMQUdTKQogIHN0cmluZyhSRUdFWCBSRVBMQUNFICIgLVdhbGwiICIiIENNQUtFX0NfRkxBR1MgIiR7Q01BS0VfQ19GTEFHU30iKQogIHN0cmluZyhSRUdFWCBSRVBMQUNFICIgLVdhbGwiICIiIENNQUtFX0NYWF9GTEFHUyAiJHtDTUFLRV9DWFhfRkxBR1N9IikKCiAgbm93YXJuX2ZsYWcoLVduby11bnVzZWQtdmFsdWUpCiAgbm93YXJuX2ZsYWcoLVduby11bnVzZWQtdmFyaWFibGUpCgogIGlmKCIke0NNQUtFX0NYWF9DT01QSUxFUl9JRH0iIE1BVENIRVMgIi4qQ2xhbmcuKiIpCiAgICBub3dhcm5fZmxhZygtV25vLWRlcHJlY2F0ZWQtYW5vbi1lbnVtLWVudW0tY29udmVyc2lvbikKICAgIG5vd2Fybl9mbGFnKC1Xbm8tZXh0ZXJuLWMtY29tcGF0KQogICAgbm93YXJuX2ZsYWcoLVduby1pbXBsaWNpdC1pbnQtZmxvYXQtY29udmVyc2lvbikKICAgIG5vd2Fybl9mbGFnKC1Xbm8tZGVwcmVjYXRlZC1lbnVtLWVudW0tY29udmVyc2lvbikKICBlbmRpZigiJHtDTUFLRV9DWFhfQ09NUElMRVJfSUR9IiBNQVRDSEVTICIuKkNsYW5nLioiKQoKICAjIGR1bXAoQ01BS0VfQ19GTEFHUyBDTUFLRV9DWFhfRkxBR1MpIGR1bXAoQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHKQplbmRtYWNybyhBRERfTk9XQVJOX0ZMQUdTKQoKbWFjcm8oY2hlY2tfcGljX2ZsYWcgVkFSKQppZihOT1QgVkFSKQogIHNldChWQVIgRkxBR1MpCmVuZGlmKE5PVCBWQVIpCiAgY2hlY2tfY3h4X2NvbXBpbGVyX2ZsYWcoIi1mUElDIiBGX1BJQykKICBpZihGX1BJQykKICAgIHNldChDTUFLRV9DXyR7VkFSfSAiJHtDTUFLRV9DXyR7VkFSfX0gLWZQSUMiKQogICAgc2V0KENNQUtFX0NYWF8ke1ZBUn0gIiR7Q01BS0VfQ1hYXyR7VkFSfX0gLWZQSUMiKQogIGVuZGlmKEZfUElDKQplbmRtYWNybyhjaGVja19waWNfZmxhZykKCm1hY3JvKGNoZWNrX29wdF9ub25lX2ZsYWcpCiAgY2hlY2tfY19jb21waWxlcl9mbGFnKCItTzAiIE9QVF9DX09QVF9OT05FKQogIGNoZWNrX2N4eF9jb21waWxlcl9mbGFnKCItTzAiIE9QVF9DWFhfT1BUX05PTkUpCiAgaWYoT1BUX0NfT1BUX05PTkUpCiAgICBpZihOT1QgIiR7Q01BS0VfQ19GTEFHU19ERUJVR30iIE1BVENIRVMgIi1PMCIpCiAgICAgIHNldChDTUFLRV9DX0ZMQUdTX0RFQlVHICIke0NNQUtFX0NfRkxBR1NfREVCVUd9IC1PMCIgQ0FDSEUgU1RSSU5HICJDIGNvbXBpbGVyIG9wdGlvbnMiIEZPUkNFKQogICAgZW5kaWYoTk9UICIke0NNQUtFX0NfRkxBR1NfREVCVUd9IiBNQVRDSEVTICItTzAiKQogIGVuZGlmKE9QVF9DX09QVF9OT05FKQogIGlmKE9QVF9DWFhfT1BUX05PTkUpCiAgICBpZihOT1QgIiR7Q01BS0VfQ1hYX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLU8wIikKICAgICAgc2V0KENNQUtFX0NYWF9GTEFHU19ERUJVRyAiJHtDTUFLRV9DWFhfRkxBR1NfREVCVUd9IC1PMCIgQ0FDSEUgU1RSSU5HICJDKysgY29tcGlsZXIgb3B0aW9ucyIgRk9SQ0UpCiAgICBlbmRpZihOT1QgIiR7Q01BS0VfQ1hYX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLU8wIikKICBlbmRpZihPUFRfQ1hYX09QVF9OT05FKQplbmRtYWNybyhjaGVja19vcHRfbm9uZV9mbGFnKQoKbWFjcm8oY2hlY2tfZGVidWdfZ2RiX2ZsYWcpCiAgY2hlY2tfY19jb21waWxlcl9mbGFnKCItZ2dkYiIgT1BUX0NfR19HREIpCiAgY2hlY2tfY3h4X2NvbXBpbGVyX2ZsYWcoIi1nZ2RiIiBPUFRfQ1hYX0dfR0RCKQogIGlmKE9QVF9DX0dfR0RCKQogICAgaWYoTk9UICIke0NNQUtFX0NfRkxBR1NfREVCVUd9IiBNQVRDSEVTICItZ2dkYiIpCiAgICAgIHNldChDTUFLRV9DX0ZMQUdTX0RFQlVHICIke0NNQUtFX0NfRkxBR1NfREVCVUd9IC1nZ2RiIiBDQUNIRSBTVFJJTkcgIkMgY29tcGlsZXIgb3B0aW9ucyIgRk9SQ0UpCiAgICBlbmRpZihOT1QgIiR7Q01BS0VfQ19GTEFHU19ERUJVR30iIE1BVENIRVMgIi1nZ2RiIikKICBlbmRpZihPUFRfQ19HX0dEQikKICBpZihPUFRfQ1hYX0dfR0RCKQogICAgaWYoTk9UICIke0NNQUtFX0NYWF9GTEFHU19ERUJVR30iIE1BVENIRVMgIi1nZ2RiIikKICAgICAgc2V0KENNQUtFX0NYWF9GTEFHU19ERUJVRyAiJHtDTUFLRV9DWFhfRkxBR1NfREVCVUd9IC1nZ2RiIiBDQUNIRSBTVFJJTkcgIkMrKyBjb21waWxlciBvcHRpb25zIiBGT1JDRSkKICAgIGVuZGlmKE5PVCAiJHtDTUFLRV9DWFhfRkxBR1NfREVCVUd9IiBNQVRDSEVTICItZ2dkYiIpCiAgZW5kaWYoT1BUX0NYWF9HX0dEQikKZW5kbWFjcm8oY2hlY2tfZGVidWdfZ2RiX2ZsYWcpCgptYWNybyhjaGVja19jeHhfc3RhbmRhcmRfZmxhZykKICBmb3JlYWNoKENYWF9TVEFOREFSRCBjKysyMCBjKysxNyBjKysxNCBjKysxMSkKICAgIHN0cmluZyhSRVBMQUNFICJjKysiICJDUExVU1BMVVMiIENYWF9TVEFOREFSRF9OVU0gIiR7Q1hYX1NUQU5EQVJEfSIpCiAgICBzZXQoQ01BS0VfUkVRVUlSRURfUVVJRVQgVFJVRSkKICAgIGNoZWNrX2N4eF9jb21waWxlcl9mbGFnKCItc3RkPSR7Q1hYX1NUQU5EQVJEfSIgQ1hYX1NUQU5EQVJEXyR7Q1hYX1NUQU5EQVJEX05VTX0pCiAgICBzZXQoQ01BS0VfUkVRVUlSRURfUVVJRVQgRkFMU0UpCiAgICBpZihDWFhfU1RBTkRBUkRfJHtDWFhfU1RBTkRBUkRfTlVNfSkKICAgICAgc3RyaW5nKFJFR0VYIFJFUExBQ0UgIlxcKyIgIngiIENYWF9TVEFOREFSRF9OQU1FICIke0NYWF9TVEFOREFSRF9WQUxVRX0iKQogICAgICBzdHJpbmcoVE9VUFBFUiAiJHtDWFhfU1RBTkRBUkRfTkFNRX0iIENYWF9TVEFOREFSRF9OQU1FKQogICAgICBzdHJpbmcoUkVHRVggUkVQTEFDRSAiQ1hYIiAiIiBDWFhfU1RBTkRBUkRfVkVSU0lPTiAiJHtDWFhfU1RBTkRBUkRfTkFNRX0iKQogICAgICBtZXNzYWdlKCJDWFhfU1RBTkRBUkRfTkFNRSA9ICR7Q1hYX1NUQU5EQVJEX05BTUV9IikKICAgICAgbWVzc2FnZSgiQ1hYX1NUQU5EQVJEX1ZFUlNJT04gPSAke0NYWF9TVEFOREFSRF9WRVJTSU9OfSIpCgogICAgICBpZihDWFhfU1RBTkRBUkRfTkFNRSkKICAgICAgICBhZGRfZGVmaW5pdGlvbnMoLUQiJHtDWFhfU1RBTkRBUkRfTkFNRX0iKQogICAgICBlbmRpZihDWFhfU1RBTkRBUkRfTkFNRSkKCiAgICAgIHNldChDWFhfU1RBTkRBUkRfVkFMVUUgIiR7Q1hYX1NUQU5EQVJEfSIgQ0FDSEUgU1RSSU5HICJDKysgc3RhbmRhcmQiIEZPUkNFKQogICAgICBzZXQoQ1hYX1NUQU5EQVJEX0ZMQUcgIi1zdGQ9JHtDWFhfU1RBTkRBUkR9IiBDQUNIRSBTVFJJTkcgIkMrKyBzdGFuZGFyZCBhcmd1bWVudCIgRk9SQ0UpCiAgICAgIHNldChDTUFLRV9DWFhfRkxBR1MgIiR7Q01BS0VfQ1hYX0ZMQUdTfSAke0NYWF9TVEFOREFSRF9GTEFHfSIpCiAgICAgIGJyZWFrKCkKICAgIGVuZGlmKENYWF9TVEFOREFSRF8ke0NYWF9TVEFOREFSRF9OVU19KQogIGVuZGZvcmVhY2goKQoKICBzdHJpbmcoUkVHRVggUkVQTEFDRSAiY1xcK1xcKyIgIiIgQ1hYX1NUQU5EQVJEX1ZFUlNJT04gIiR7Q1hYX1NUQU5EQVJEX1ZBTFVFfSIpCiAgYWRkX2RlZmluaXRpb25zKC1EQ1hYX1NUQU5EQVJEPSR7Q1hYX1NUQU5EQVJEX1ZFUlNJT059KQoKICBtZXNzYWdlKCJDKysgc3RhbmRhcmQ6ICR7Q1hYX1NUQU5EQVJEX1ZBTFVFfSIpCmVuZG1hY3JvKGNoZWNrX2N4eF9zdGFuZGFyZF9mbGFnKQoKbWFjcm8oY2hlY2tfbm93YXJuX2ZsYWcgRkxBRykKICBjYW5vbmljYWxpemUoVkFSTkFNRSAiJHtGTEFHfSIpCiAgY2hlY2tfY19jb21waWxlcl9mbGFnKCIke0ZMQUd9IiAiJHtWQVJOQU1FfSIpCiAgIyBkdW1wKCR7VkFSTkFNRX0pCgogIGlmKCR7VkFSTkFNRX0pCiAgICBzZXQoQ01BS0VfQ19GTEFHUyAiJHtDTUFLRV9DX0ZMQUdTfSAke0ZMQUd9IikKICAgIHNldChDTUFLRV9DWFhfRkxBR1MgIiR7Q01BS0VfQ1hYX0ZMQUdTfSAke0ZMQUd9IikKCiAgZW5kaWYoJHtWQVJOQU1FfSkKZW5kbWFjcm8oY2hlY2tfbm93YXJuX2ZsYWcgRkxBRykKAAAAAAAAAABsFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QgAAAAAAADsCAAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "ARG"
					},
					"BAAAAMkIAAAAAAAAyggAAAAAAAAAAAAAyggAAAAAAADKCAAAAAAAAAMAAABWQVLKCAAAAAAAAMsIAAAAAAAAAAAAAMsIAAAAAAAAzAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQgAAAAAAADMCAAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "ARG"
					},
					"BAAAAO0IAAAAAAAA7ggAAAAAAAAAAAAA7ggAAAAAAADuCAAAAAAAAAMAAABWQVLuCAAAAAAAAO8IAAAAAAAAAAAAAO8IAAAAAAAA8AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QgAAAAAAADwCAAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "N"
					},
					"AQAAAPAIAAAAAAAA8QgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AgAAAAAAADwCAAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "N"
					},
					"AQAAAMwIAAAAAAAAzQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAgAAAAAAADMCAAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					2,
					"left_delete",
					null,
					"AgAAALsIAAAAAAAAuwgAAAAAAAADAAAAVkFSuggAAAAAAAC6CAAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAAuwgAAAAAAAC+CAAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"cut",
					null,
					"AQAAALwIAAAAAAAAvAgAAAAAAAAPAAAAICBpZihOT1QgQVJHTikK",
					"AQAAAAAAAAABAAAAvAgAAAAAAADLCAAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"paste",
					null,
					"AQAAALwIAAAAAAAAywgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAgAAAAAAAC8CAAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"paste",
					null,
					"AQAAAN4IAAAAAAAA7QgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3ggAAAAAAADeCAAAAAAAAAAAAAAAAAAA"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "Ese"
					},
					"BAAAAOAIAAAAAAAA4QgAAAAAAAAAAAAA4QgAAAAAAADhCAAAAAAAAAIAAABpZuEIAAAAAAAA4ggAAAAAAAAAAAAA4ggAAAAAAADjCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4ggAAAAAAADgCAAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					3,
					"left_delete",
					null,
					"AwAAAOIIAAAAAAAA4ggAAAAAAAABAAAAZeEIAAAAAAAA4QgAAAAAAAABAAAAc+AIAAAAAAAA4AgAAAAAAAABAAAARQ",
					"AQAAAAAAAAABAAAA4wgAAAAAAADjCAAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "else"
					},
					"BAAAAOAIAAAAAAAA4QgAAAAAAAAAAAAA4QgAAAAAAADiCAAAAAAAAAAAAADiCAAAAAAAAOMIAAAAAAAAAAAAAOMIAAAAAAAA5AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AgAAAAAAADgCAAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"cut",
					null,
					"AQAAAMsIAAAAAAAAywgAAAAAAAATAAAAICAgIHNldChWQVIgRkxBR1MpCg",
					"AQAAAAAAAAABAAAAywgAAAAAAADeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"paste",
					null,
					"AQAAAMsIAAAAAAAA3ggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywgAAAAAAADLCAAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"paste",
					null,
					"AQAAAO8IAAAAAAAAAgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wgAAAAAAADvCAAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert_snippet",
					{
						"contents": "\"${0:$SELECTION}\""
					},
					"AgAAAPsIAAAAAAAA+wgAAAAAAAAFAAAARkxBR1P7CAAAAAAAAAIJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+wgAAAAAAAAACQAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "${ARGN}]"
					},
					"CQAAAPwIAAAAAAAA/QgAAAAAAAAAAAAA/QgAAAAAAAD9CAAAAAAAAAUAAABGTEFHU/0IAAAAAAAA/ggAAAAAAAAAAAAA/ggAAAAAAAD/CAAAAAAAAAAAAAD/CAAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAQkAAAAAAAAAAAAAAQkAAAAAAAACCQAAAAAAAAAAAAACCQAAAAAAAAMJAAAAAAAAAAAAAAMJAAAAAAAABAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AgAAAAAAAABCQAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"left_delete",
					null,
					"AQAAAAMJAAAAAAAAAwkAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAABAkAAAAAAAAECQAAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"insert",
					{
						"characters": "PUIC"
					},
					"BQAAANcIAAAAAAAA2AgAAAAAAAAAAAAA2AgAAAAAAADYCAAAAAAAAAUAAABGTEFHU9gIAAAAAAAA2QgAAAAAAAAAAAAA2QgAAAAAAADaCAAAAAAAAAAAAADaCAAAAAAAANsIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AgAAAAAAADXCAAAAAAAAAAAAAAAAPC/"
				],
				[
					247,
					3,
					"left_delete",
					null,
					"AwAAANoIAAAAAAAA2ggAAAAAAAABAAAAQ9kIAAAAAAAA2QgAAAAAAAABAAAASdgIAAAAAAAA2AgAAAAAAAABAAAAVQ",
					"AQAAAAAAAAABAAAA2wgAAAAAAADbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					1,
					"insert",
					{
						"characters": "IC_FLAG"
					},
					"BwAAANgIAAAAAAAA2QgAAAAAAAAAAAAA2QgAAAAAAADaCAAAAAAAAAAAAADaCAAAAAAAANsIAAAAAAAAAAAAANsIAAAAAAAA3AgAAAAAAAAAAAAA3AgAAAAAAADdCAAAAAAAAAAAAADdCAAAAAAAAN4IAAAAAAAAAAAAAN4IAAAAAAAA3wgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AgAAAAAAADYCAAAAAAAAAAAAAAAAPC/"
				],
				[
					252,
					1,
					"right_delete",
					null,
					"AQAAAFgJAAAAAAAAWAkAAAAAAAAIAAAAQ01BS0VfQ18",
					"AQAAAAAAAAABAAAAWAkAAAAAAABgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					256,
					1,
					"right_delete",
					null,
					"AQAAAIIJAAAAAAAAggkAAAAAAAAKAAAAQ01BS0VfQ1hYXw",
					"AQAAAAAAAAABAAAAggkAAAAAAACMCQAAAAAAAAAAAAAAAPC/"
				],
				[
					260,
					1,
					"right_delete",
					null,
					"AQAAAGIJAAAAAAAAYgkAAAAAAAAIAAAAQ01BS0VfQ18",
					"AQAAAAAAAAABAAAAYgkAAAAAAABqCQAAAAAAAAAAAAAAAPC/"
				],
				[
					264,
					1,
					"right_delete",
					null,
					"AQAAAIQJAAAAAAAAhAkAAAAAAAAKAAAAQ01BS0VfQ1hYXw",
					"AQAAAAAAAAABAAAAhAkAAAAAAACOCQAAAAAAAAAAAAAAAPC/"
				],
				[
					267,
					1,
					"left_delete",
					null,
					"AQAAAHAJAAAAAAAAcAkAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAcQkAAAAAAABxCQAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAHAJAAAAAAAAcQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAkAAAAAAABwCQAAAAAAAAAAAAAAAPC/"
				],
				[
					284,
					1,
					"insert",
					{
						"characters": "F_PIC"
					},
					"BgAAAHoJAAAAAAAAewkAAAAAAAAAAAAAewkAAAAAAAB7CQAAAAAAAAYAAAAke1ZBUn17CQAAAAAAAHwJAAAAAAAAAAAAAHwJAAAAAAAAfQkAAAAAAAAAAAAAfQkAAAAAAAB+CQAAAAAAAAAAAAB+CQAAAAAAAH8JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegkAAAAAAACACQAAAAAAAAAAAAAAAPC/"
				],
				[
					288,
					1,
					"left_delete",
					null,
					"AQAAAIEJAAAAAAAAgQkAAAAAAAAKAAAAJHske1ZBUn19IA",
					"AQAAAAAAAAABAAAAgQkAAAAAAACLCQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "cmake/JSBindings.cmake",
			"settings":
			{
				"buffer_size": 5641,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"left_delete",
					null,
					"AQAAABIAAAAAAAAAEgAAAAAAAAA4AAAAaW5jbHVkZSgke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vY21ha2Uvb3BlbmN2LmNtYWtlKQo",
					"AQAAAAAAAAABAAAAEgAAAAAAAABKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAASAAAAIyBpbmNsdWRlOiBPcGVuQ1YK",
					"AQAAAAAAAAABAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					9,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADoEQAACmlmKFdJTjMyIE9SIE1JTkdXKQogIHNldChRVUlDS0pTX0xJQlJBUllfRElSICIke3F1aWNranNfQklOQVJZX0RJUn0iKQogIHNldChRVUlDS0pTX01PRFVMRV9ERVBFTkRFTkNJRVMgInF1aWNranMiKQplbmRpZihXSU4zMiBPUiBNSU5HVykKCnNldChRVUlDS0pTX01PRFVMRV9DRkxBR1MgIi1mdmlzaWJpbGl0eT1oaWRkZW4iKQoKZnVuY3Rpb24oY29uZmlnX3NoYXJlZF9tb2R1bGUgVEFSR0VUX05BTUUpCiAgaWYoUVVJQ0tKU19MSUJSQVJZX0RJUikKICAgIHRhcmdldF9saW5rX2RpcmVjdG9yaWVzKCR7VEFSR0VUX05BTUV9IFBSSVZBVEUgIiR7UVVJQ0tKU19MSUJSQVJZX0RJUn0iKQogIGVuZGlmKFFVSUNLSlNfTElCUkFSWV9ESVIpCiAgaWYoUVVJQ0tKU19NT0RVTEVfREVQRU5ERU5DSUVTKQogICAgdGFyZ2V0X2xpbmtfbGlicmFyaWVzKCR7VEFSR0VUX05BTUV9ICR7UVVJQ0tKU19NT0RVTEVfREVQRU5ERU5DSUVTfSkKICBlbmRpZihRVUlDS0pTX01PRFVMRV9ERVBFTkRFTkNJRVMpCiAgaWYoUVVJQ0tKU19NT0RVTEVfQ0ZMQUdTKQogICAgdGFyZ2V0X2NvbXBpbGVfb3B0aW9ucygke1RBUkdFVF9OQU1FfSBQUklWQVRFICIke1FVSUNLSlNfTU9EVUxFX0NGTEFHU30iKQogIGVuZGlmKFFVSUNLSlNfTU9EVUxFX0NGTEFHUykKZW5kZnVuY3Rpb24oY29uZmlnX3NoYXJlZF9tb2R1bGUgVEFSR0VUX05BTUUpCgpzZXQoSlNfQklORElOR1NfQ09NTU9OIGNvbG9yLmhwcCBnZW9tZXRyeS5ocHAganMuaHBwIGpzX2FsbG9jLmhwcCBqc19hcnJheS5ocHAganNfY29udG91ci5ocHAganNfbGluZS5ocHAganNfcG9pbnQuaHBwIGpzX3JlY3QuaHBwIGpzX3NpemUuaHBwIGpzX3R5cGVkX2FycmF5LmhwcCBqc2JpbmRpbmdzLmhwcCBwc2ltcGwuaHBwIHV0aWwuaHBwKQpzZXQoanNfbGluZV9TT1VSQ0VTIGxpbmUuY3BwIGxpbmUuaHBwKQoKZnVuY3Rpb24obWFrZV9zaGFyZWRfbW9kdWxlIEZOQU1FKQogIHN0cmluZyhSRUdFWCBSRVBMQUNFICJfIiAiLSIgTkFNRSAiJHtGTkFNRX0iKQogIHN0cmluZyhUT1VQUEVSICIke0ZOQU1FfSIgVU5BTUUpCgogIHNldChUQVJHRVRfTkFNRSBxdWlja2pzLSR7TkFNRX0pCgogIGlmKEFSR04pCiAgICBzZXQoU09VUkNFUyAke0FSR059KQogIGVsc2UoQVJHTikKICAgIHNldChTT1VSQ0VTIGpzXyR7Rk5BTUV9LmNwcCAke2pzXyR7Rk5BTUV9X1NPVVJDRVN9IGpzYmluZGluZ3MuY3BwIHV0aWwuY3BwIGpzLmhwcCBqcy5jcHAgJHtKU19CSU5ESU5HU19DT01NT059KQogIGVuZGlmKEFSR04pCgogIGFkZF9saWJyYXJ5KCR7VEFSR0VUX05BTUV9IFNIQVJFRCAke1NPVVJDRVN9KQoKICB0YXJnZXRfbGlua19saWJyYXJpZXMoJHtUQVJHRVRfTkFNRX0gJHtPcGVuQ1ZfTElCU30pCiAgc2V0X3RhcmdldF9wcm9wZXJ0aWVzKCR7VEFSR0VUX05BTUV9IFBST1BFUlRJRVMgUFJFRklYICIiICMgQlVJTERfUlBBVEggIiR7T1BFTkNWX0xJQlJBUllfRElSU306JHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJQQVRIICIke09QRU5DVl9MSUJSQVJZX0RJUlN9OiR7Q01BS0VfSU5TVEFMTF9QUkVGSVh9L2xpYjoke0NNQUtFX0lOU1RBTExfUFJFRklYfS9saWIvcXVpY2tqcyIgT1VUUFVUX05BTUUgIiR7TkFNRX0iIENPTVBJTEVfRkxBR1MgIiR7UVVJQ0tKU19NT0RVTEVfQ0ZMQUdTfSIgQlVJTERfUlBBVEggIiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfToke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn06JHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9L3F1aWNranM6JHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9L3F1aWNranMiKQogIHRhcmdldF9jb21waWxlX2RlZmluaXRpb25zKCR7VEFSR0VUX05BTUV9IFBSSVZBVEUgQ09ORklHX1BSRUZJWD0iJHtDTUFLRV9JTlNUQUxMX1BSRUZJWH0iKQogIGluc3RhbGwoVEFSR0VUUyAke1RBUkdFVF9OQU1FfSBERVNUSU5BVElPTiBsaWIvcXVpY2tqcyBQRVJNSVNTSU9OUyBPV05FUl9SRUFEIE9XTkVSX1dSSVRFIE9XTkVSX0VYRUNVVEUgR1JPVVBfUkVBRCBHUk9VUF9FWEVDVVRFIFdPUkxEX1JFQUQgV09STERfRVhFQ1VURSkKCiAgY29uZmlnX3NoYXJlZF9tb2R1bGUoJHtUQVJHRVRfTkFNRX0pCgogIGlmKE9wZW5DVl9GT1VORCkKICAgIHRhcmdldF9pbmNsdWRlX2RpcmVjdG9yaWVzKCR7VEFSR0VUX05BTUV9IFBVQkxJQyAke09wZW5DVl9JTkNMVURFX0RJUlN9KQogICAgdGFyZ2V0X2xpbmtfbGlicmFyaWVzKCR7VEFSR0VUX05BTUV9ICR7T3BlbkNWX0xJQlN9KQogIGVuZGlmKCkKZW5kZnVuY3Rpb24oKQoKZnVuY3Rpb24obWFrZV9qc19iaW5kaW5ncykKICBmaWxlKEdMT0IgSlNfQklORElOR1NfU09VUkNFUyAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vanNfKi5jcHApCgogIGZvcmVhY2goTU9EICR7SlNfQklORElOR1NfU09VUkNFU30pCiAgICBzdHJpbmcoUkVHRVggUkVQTEFDRSAiXFwuY3BwIiAiIiBNT0QgIiR7TU9EfSIpCiAgICBzdHJpbmcoUkVHRVggUkVQTEFDRSAiLiovanNfIiAiIiBNT0QgIiR7TU9EfSIpCiAgICBsaXN0KEFQUEVORCBKU19CSU5ESU5HU19NT0RVTEVTICR7TU9EfSkKICBlbmRmb3JlYWNoKE1PRCAke0pTX0JJTkRJTkdTX1NPVVJDRVN9KQoKICBmb3JlYWNoKEpTX01PRFVMRSAke0pTX0JJTkRJTkdTX01PRFVMRVN9KQogICAgbWFrZV9zaGFyZWRfbW9kdWxlKCR7SlNfTU9EVUxFfSkKICBlbmRmb3JlYWNoKCkKCiAgc3RyaW5nKFJFUExBQ0UgIjsiICIgIiBNT0RVTEVfTkFNRVMgIiR7SlNfQklORElOR1NfTU9EVUxFU30iKQogIG1lc3NhZ2UoU1RBVFVTICJDb25maWd1cmVkIG1vZHVsZXM6ICR7TU9EVUxFX05BTUVTfSIpCgogIGFkZF9kZXBlbmRlbmNpZXMocXVpY2tqcy1yZWN0IHF1aWNranMtcG9pbnQgcXVpY2tqcy1zaXplKQogICMgYWRkX2RlcGVuZGVuY2llcyhxdWlja2pzLWNvbnRvdXIgcXVpY2tqcy1tYXQgcXVpY2tqcy1yZWN0IHF1aWNranMtcG9pbnQpCgogIGFkZF9kZXBlbmRlbmNpZXMocXVpY2tqcy1jb250b3VyIHF1aWNranMtbWF0KQoKICB0YXJnZXRfbGlua19saWJyYXJpZXMocXVpY2tqcy1tYXQgcXVpY2tqcy1zaXplKQogIHRhcmdldF9saW5rX2xpYnJhcmllcyhxdWlja2pzLXBvaW50LWl0ZXJhdG9yIHF1aWNranMtbGluZSBxdWlja2pzLXBvaW50KQogIHRhcmdldF9saW5rX2xpYnJhcmllcyhxdWlja2pzLWNvbnRvdXIgcXVpY2tqcy1wb2ludC1pdGVyYXRvciBxdWlja2pzLW1hdCkKICB0YXJnZXRfbGlua19saWJyYXJpZXMocXVpY2tqcy1saW5lIHF1aWNranMtcG9pbnQpCiAgdGFyZ2V0X2xpbmtfbGlicmFyaWVzKHF1aWNranMtcmVjdCBxdWlja2pzLXNpemUgcXVpY2tqcy1wb2ludCkKICB0YXJnZXRfbGlua19saWJyYXJpZXMocXVpY2tqcy12aWRlby1jYXB0dXJlIHF1aWNranMtbWF0KQogIHRhcmdldF9saW5rX2xpYnJhcmllcyhxdWlja2pzLWN2IHF1aWNranMtbWF0IHF1aWNranMtY29udG91ciBxdWlja2pzLXJlY3QgcXVpY2tqcy1saW5lKQogIHRhcmdldF9saW5rX2xpYnJhcmllcyhxdWlja2pzLWRyYXcgcXVpY2tqcy1tYXQgcXVpY2tqcy1jb250b3VyIHF1aWNranMtc2l6ZSkKICB0YXJnZXRfbGlua19saWJyYXJpZXMocXVpY2tqcy1jbGFoZSBxdWlja2pzLW1hdCBxdWlja2pzLXNpemUpCiAgdGFyZ2V0X2xpbmtfbGlicmFyaWVzKHF1aWNranMtdW1hdCBxdWlja2pzLW1hdCkKICB0YXJnZXRfbGlua19saWJyYXJpZXMocXVpY2tqcy1zdWJkaXYyZCBxdWlja2pzLWNvbnRvdXIpCgogIHRhcmdldF9saW5rX2xpYnJhcmllcyhxdWlja2pzLWN2IHBuZykKCiAgIyBhZGRfZGVwZW5kZW5jaWVzKHF1aWNranMtcG9pbnQtaXRlcmF0b3IgcXVpY2tqcy1jb250b3VyIHF1aWNranMtbWF0KQoKICBmaWxlKEdMT0IgSlNfQklORElOR1NfU09VUkNFUyBjb2xvci5jcHAgZGF0YS5jcHAgZ2VvbWV0cnkuY3BwIGpzYmluZGluZ3MuY3BwIGpzXyouY3BwIGpzLmNwcCBsaW5lLmNwcCBtYXRyaXguY3BwIHBvbHlnb24uY3BwICouaCAqLmhwcCkKCiAgIyBNYWluCiAgYWRkX2xpYnJhcnkocXVpY2tqcy1vcGVuY3YgTU9EVUxFICR7SlNfQklORElOR1NfU09VUkNFU30pCiAgY29uZmlnX3NoYXJlZF9tb2R1bGUocXVpY2tqcy1vcGVuY3YpCgogIHNldF90YXJnZXRfcHJvcGVydGllcyhxdWlja2pzLW9wZW5jdiBQUk9QRVJUSUVTICMgQ09NUElMRV9GTEFHUyAiLWZ2aXNpYmlsaXR5PWhpZGRlbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSUEFUSCAiJHtPUEVOQ1ZfTElCUkFSWV9ESVJTfToke0NNQUtFX0lOU1RBTExfUFJFRklYfS9saWI6JHtDTUFLRV9JTlNUQUxMX1BSRUZJWH0vbGliL3F1aWNranMiIE9VVFBVVF9OQU1FICJvcGVuY3YiIFBSRUZJWCAiIikKICB0YXJnZXRfY29tcGlsZV9kZWZpbml0aW9ucyhxdWlja2pzLW9wZW5jdiBQUklWQVRFIC1EQ09ORklHX1BSRUZJWD1cIiR7Q01BS0VfSU5TVEFMTF9QUkVGSVh9XCIpCgogIHRhcmdldF9saW5rX2xpYnJhcmllcyhxdWlja2pzLW9wZW5jdiAke09wZW5DVl9MSUJTfSkKICAjIGxpbmsKZW5kZnVuY3Rpb24obWFrZV9qc19iaW5kaW5ncykKAAAAAAAAAADnEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"cut",
					null,
					"AQAAAKADAAAAAAAAoAMAAAAAAABpBQAACmZ1bmN0aW9uKG1ha2Vfc2hhcmVkX21vZHVsZSBGTkFNRSkKICBzdHJpbmcoUkVHRVggUkVQTEFDRSAiXyIgIi0iIE5BTUUgIiR7Rk5BTUV9IikKICBzdHJpbmcoVE9VUFBFUiAiJHtGTkFNRX0iIFVOQU1FKQoKICBzZXQoVEFSR0VUX05BTUUgcXVpY2tqcy0ke05BTUV9KQoKICBpZihBUkdOKQogICAgc2V0KFNPVVJDRVMgJHtBUkdOfSkKICBlbHNlKEFSR04pCiAgICBzZXQoU09VUkNFUyBqc18ke0ZOQU1FfS5jcHAgJHtqc18ke0ZOQU1FfV9TT1VSQ0VTfSBqc2JpbmRpbmdzLmNwcCB1dGlsLmNwcCBqcy5ocHAganMuY3BwICR7SlNfQklORElOR1NfQ09NTU9OfSkKICBlbmRpZihBUkdOKQoKICBhZGRfbGlicmFyeSgke1RBUkdFVF9OQU1FfSBTSEFSRUQgJHtTT1VSQ0VTfSkKCiAgdGFyZ2V0X2xpbmtfbGlicmFyaWVzKCR7VEFSR0VUX05BTUV9ICR7T3BlbkNWX0xJQlN9KQogIHNldF90YXJnZXRfcHJvcGVydGllcygke1RBUkdFVF9OQU1FfSBQUk9QRVJUSUVTIFBSRUZJWCAiIiAjIEJVSUxEX1JQQVRIICIke09QRU5DVl9MSUJSQVJZX0RJUlN9OiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSUEFUSCAiJHtPUEVOQ1ZfTElCUkFSWV9ESVJTfToke0NNQUtFX0lOU1RBTExfUFJFRklYfS9saWI6JHtDTUFLRV9JTlNUQUxMX1BSRUZJWH0vbGliL3F1aWNranMiIE9VVFBVVF9OQU1FICIke05BTUV9IiBDT01QSUxFX0ZMQUdTICIke1FVSUNLSlNfTU9EVUxFX0NGTEFHU30iIEJVSUxEX1JQQVRIICIke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn06JHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9OiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfS9xdWlja2pzOiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfS9xdWlja2pzIikKICB0YXJnZXRfY29tcGlsZV9kZWZpbml0aW9ucygke1RBUkdFVF9OQU1FfSBQUklWQVRFIENPTkZJR19QUkVGSVg9IiR7Q01BS0VfSU5TVEFMTF9QUkVGSVh9IikKICBpbnN0YWxsKFRBUkdFVFMgJHtUQVJHRVRfTkFNRX0gREVTVElOQVRJT04gbGliL3F1aWNranMgUEVSTUlTU0lPTlMgT1dORVJfUkVBRCBPV05FUl9XUklURSBPV05FUl9FWEVDVVRFIEdST1VQX1JFQUQgR1JPVVBfRVhFQ1VURSBXT1JMRF9SRUFEIFdPUkxEX0VYRUNVVEUpCgogIGNvbmZpZ19zaGFyZWRfbW9kdWxlKCR7VEFSR0VUX05BTUV9KQoKICBpZihPcGVuQ1ZfRk9VTkQpCiAgICB0YXJnZXRfaW5jbHVkZV9kaXJlY3Rvcmllcygke1RBUkdFVF9OQU1FfSBQVUJMSUMgJHtPcGVuQ1ZfSU5DTFVERV9ESVJTfSkKICAgIHRhcmdldF9saW5rX2xpYnJhcmllcygke1RBUkdFVF9OQU1FfSAke09wZW5DVl9MSUJTfSkKICBlbmRpZigpCmVuZGZ1bmN0aW9uKCk",
					"AQAAAAAAAAABAAAAoAMAAAAAAAAJCQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"paste",
					null,
					"AQAAAKADAAAAAAAACQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAMAAAAAAACgAwAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAkJAAAAAAAACgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQkAAAAAAAAJCQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"paste",
					null,
					"AQAAAAoJAAAAAAAAcw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgkAAAAAAAAKCQAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					2,
					"left_delete",
					null,
					"AgAAABsJAAAAAAAAGwkAAAAAAAAEAAAAYXJlZBoJAAAAAAAAGgkAAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAAGwkAAAAAAAAfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "tatic"
					},
					"BQAAABoJAAAAAAAAGwkAAAAAAAAAAAAAGwkAAAAAAAAcCQAAAAAAAAAAAAAcCQAAAAAAAB0JAAAAAAAAAAAAAB0JAAAAAAAAHgkAAAAAAAAAAAAAHgkAAAAAAAAfCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgkAAAAAAAAaCQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "STATIC"
					},
					"BwAAAHcKAAAAAAAAeAoAAAAAAAAAAAAAeAoAAAAAAAB4CgAAAAAAAAYAAABTSEFSRUR4CgAAAAAAAHkKAAAAAAAAAAAAAHkKAAAAAAAAegoAAAAAAAAAAAAAegoAAAAAAAB7CgAAAAAAAAAAAAB7CgAAAAAAAHwKAAAAAAAAAAAAAHwKAAAAAAAAfQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwoAAAAAAAB9CgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "-static"
					},
					"BwAAAKMJAAAAAAAApAkAAAAAAAAAAAAApAkAAAAAAAClCQAAAAAAAAAAAAClCQAAAAAAAKYJAAAAAAAAAAAAAKYJAAAAAAAApwkAAAAAAAAAAAAApwkAAAAAAACoCQAAAAAAAAAAAACoCQAAAAAAAKkJAAAAAAAAAAAAAKkJAAAAAAAAqgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowkAAAAAAACjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					2,
					"left_delete",
					null,
					"AgAAAAULAAAAAAAABQsAAAAAAABCAAAAIyBCVUlMRF9SUEFUSCAiJHtPUEVOQ1ZfTElCUkFSWV9ESVJTfToke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0iBAsAAAAAAAAECwAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAABQsAAAAAAABHCwAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAPsKAAAAAAAA/AoAAAAAAAAAAAAA/AoAAAAAAAD+CgAAAAAAAAAAAAD8CgAAAAAAAPwKAAAAAAAAAgAAACAg/AoAAAAAAAAACwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+woAAAAAAAD7CgAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					18,
					"unindent",
					null,
					"EgAAAAoLAAAAAAAACgsAAAAAAAACAAAAICAKCwAAAAAAAAoLAAAAAAAAAgAAACAgCgsAAAAAAAAKCwAAAAAAAAIAAAAgIAoLAAAAAAAACgsAAAAAAAACAAAAICAKCwAAAAAAAAoLAAAAAAAAAgAAACAgCgsAAAAAAAAKCwAAAAAAAAIAAAAgIAoLAAAAAAAACgsAAAAAAAACAAAAICAKCwAAAAAAAAoLAAAAAAAAAgAAACAgCgsAAAAAAAAKCwAAAAAAAAIAAAAgIAoLAAAAAAAACgsAAAAAAAACAAAAICAKCwAAAAAAAAoLAAAAAAAAAgAAACAgCgsAAAAAAAAKCwAAAAAAAAIAAAAgIAoLAAAAAAAACgsAAAAAAAACAAAAICAKCwAAAAAAAAoLAAAAAAAAAgAAACAgCgsAAAAAAAAKCwAAAAAAAAIAAAAgIAoLAAAAAAAACgsAAAAAAAACAAAAICAKCwAAAAAAAAoLAAAAAAAAAgAAACAgCgsAAAAAAAAKCwAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAADgsAAAAAAAAOCwAAAAAAAAAAAAAAAERA"
				],
				[
					79,
					5,
					"unindent",
					null,
					"BQAAAAoLAAAAAAAACgsAAAAAAAACAAAAICAKCwAAAAAAAAoLAAAAAAAAAgAAACAgCgsAAAAAAAAKCwAAAAAAAAIAAAAgIAoLAAAAAAAACgsAAAAAAAACAAAAICAKCwAAAAAAAAoLAAAAAAAAAgAAACAg",
					"AQAAAAAAAAABAAAACgsAAAAAAAAKCwAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"left_delete",
					null,
					"AQAAAGwLAAAAAAAAbAsAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAbQsAAAAAAABtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGwLAAAAAAAAbQsAAAAAAAAAAAAAbQsAAAAAAABxCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAsAAAAAAABsCwAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"left_delete",
					null,
					"AQAAAIYLAAAAAAAAhgsAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAhwsAAAAAAACHCwAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIYLAAAAAAAAhwsAAAAAAAAAAAAAhwsAAAAAAACLCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgsAAAAAAACGCwAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALQLAAAAAAAAtQsAAAAAAAAAAAAAtQsAAAAAAAC5CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAsAAAAAAAC0CwAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEYMAAAAAAAARwwAAAAAAAAAAAAARwwAAAAAAABLDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgwAAAAAAABGDAAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAALULAAAAAAAAtgsAAAAAAAAAAAAAtgsAAAAAAAC2CwAAAAAAAJIAAAAgICAgQlVJTERfUlBBVEggIiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfToke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn06JHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9L3F1aWNranM6JHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9L3F1aWNranMiCg",
					"AQAAAAAAAAABAAAARwwAAAAAAAC1CwAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAAoLAAAAAAAACwsAAAAAAAAAAAAACwsAAAAAAAALCwAAAAAAAGMAAAAgICAgUlBBVEggIiR7T1BFTkNWX0xJQlJBUllfRElSU306JHtDTUFLRV9JTlNUQUxMX1BSRUZJWH0vbGliOiR7Q01BS0VfSU5TVEFMTF9QUkVGSVh9L2xpYi9xdWlja2pzIgo",
					"AQAAAAAAAAABAAAACgsAAAAAAABtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					2,
					"left_delete",
					null,
					"AgAAAPALAAAAAAAA8AsAAAAAAABiAAAAUEVSTUlTU0lPTlMgT1dORVJfUkVBRCBPV05FUl9XUklURSBPV05FUl9FWEVDVVRFIEdST1VQX1JFQUQgR1JPVVBfRVhFQ1VURSBXT1JMRF9SRUFEIFdPUkxEX0VYRUNVVEXvCwAAAAAAAO8LAAAAAAAAAQAAACA",
					"AQAAAAAAAAABAAAA8AsAAAAAAABSDAAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": " $"
					},
					"AgAAALgKAAAAAAAAuQoAAAAAAAAAAAAAuQoAAAAAAAC6CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAoAAAAAAAC4CgAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALoKAAAAAAAAvAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugoAAAAAAAC6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"paste",
					null,
					"AQAAALsKAAAAAAAAzwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwoAAAAAAAC7CgAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "${"
					},
					"AgAAAEgFAAAAAAAASQUAAAAAAAAAAAAASQUAAAAAAABKBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAUAAAAAAABIBQAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"paste",
					null,
					"AQAAAEoFAAAAAAAAXgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgUAAAAAAABKBQAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAF4FAAAAAAAAXwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgUAAAAAAABeBQAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF8FAAAAAAAAYAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwUAAAAAAABfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADYFQAAaWYoV0lOMzIgT1IgTUlOR1cpCiAgc2V0KFFVSUNLSlNfTElCUkFSWV9ESVIgIiR7cXVpY2tqc19CSU5BUllfRElSfSIpCiAgc2V0KFFVSUNLSlNfTU9EVUxFX0RFUEVOREVOQ0lFUyAicXVpY2tqcyIpCmVuZGlmKFdJTjMyIE9SIE1JTkdXKQoKc2V0KFFVSUNLSlNfTU9EVUxFX0NGTEFHUyAiLWZ2aXNpYmlsaXR5PWhpZGRlbiIpCgpmdW5jdGlvbihjb25maWdfc2hhcmVkX21vZHVsZSBUQVJHRVRfTkFNRSkKICBpZihRVUlDS0pTX0xJQlJBUllfRElSKQogICAgdGFyZ2V0X2xpbmtfZGlyZWN0b3JpZXMoJHtUQVJHRVRfTkFNRX0gUFJJVkFURSAiJHtRVUlDS0pTX0xJQlJBUllfRElSfSIpCiAgZW5kaWYoUVVJQ0tKU19MSUJSQVJZX0RJUikKICBpZihRVUlDS0pTX01PRFVMRV9ERVBFTkRFTkNJRVMpCiAgICB0YXJnZXRfbGlua19saWJyYXJpZXMoJHtUQVJHRVRfTkFNRX0gJHtRVUlDS0pTX01PRFVMRV9ERVBFTkRFTkNJRVN9KQogIGVuZGlmKFFVSUNLSlNfTU9EVUxFX0RFUEVOREVOQ0lFUykKICBpZihRVUlDS0pTX01PRFVMRV9DRkxBR1MpCiAgICB0YXJnZXRfY29tcGlsZV9vcHRpb25zKCR7VEFSR0VUX05BTUV9IFBSSVZBVEUgIiR7UVVJQ0tKU19NT0RVTEVfQ0ZMQUdTfSIpCiAgZW5kaWYoUVVJQ0tKU19NT0RVTEVfQ0ZMQUdTKQplbmRmdW5jdGlvbihjb25maWdfc2hhcmVkX21vZHVsZSBUQVJHRVRfTkFNRSkKCnNldChKU19CSU5ESU5HU19DT01NT04gY29sb3IuaHBwIGdlb21ldHJ5LmhwcCBqcy5ocHAganNfYWxsb2MuaHBwIGpzX2FycmF5LmhwcCBqc19jb250b3VyLmhwcCBqc19saW5lLmhwcCBqc19wb2ludC5ocHAganNfcmVjdC5ocHAganNfc2l6ZS5ocHAganNfdHlwZWRfYXJyYXkuaHBwIGpzYmluZGluZ3MuaHBwIHBzaW1wbC5ocHAgdXRpbC5ocHApCnNldChqc19saW5lX1NPVVJDRVMgbGluZS5jcHAgbGluZS5ocHApCgpmdW5jdGlvbihtYWtlX3NoYXJlZF9tb2R1bGUgRk5BTUUpCiAgc3RyaW5nKFJFR0VYIFJFUExBQ0UgIl8iICItIiBOQU1FICIke0ZOQU1FfSIpCiAgc3RyaW5nKFRPVVBQRVIgIiR7Rk5BTUV9IiBVTkFNRSkKCiAgc2V0KFRBUkdFVF9OQU1FIHF1aWNranMtJHtOQU1FfSkKCiAgaWYoQVJHTikKICAgIHNldChTT1VSQ0VTICR7QVJHTn0pCiAgZWxzZShBUkdOKQogICAgc2V0KFNPVVJDRVMganNfJHtGTkFNRX0uY3BwICR7anNfJHtGTkFNRX1fU09VUkNFU30ganNiaW5kaW5ncy5jcHAgdXRpbC5jcHAganMuaHBwIGpzLmNwcCAke0pTX0JJTkRJTkdTX0NPTU1PTn0pCiAgZW5kaWYoQVJHTikKCiAgYWRkX2xpYnJhcnkoJHtUQVJHRVRfTkFNRX0gU0hBUkVEICR7U09VUkNFU30pCgogIHRhcmdldF9saW5rX2xpYnJhcmllcygke1RBUkdFVF9OQU1FfSAke2pzYmluZGluZ3NfTElCUkFSSUVTfSAke09wZW5DVl9MSUJTfSkKICBzZXRfdGFyZ2V0X3Byb3BlcnRpZXMoJHtUQVJHRVRfTkFNRX0gUFJPUEVSVElFUyBQUkVGSVggIiIgIyBCVUlMRF9SUEFUSCAiJHtPUEVOQ1ZfTElCUkFSWV9ESVJTfToke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUlBBVEggIiR7T1BFTkNWX0xJQlJBUllfRElSU306JHtDTUFLRV9JTlNUQUxMX1BSRUZJWH0vbGliOiR7Q01BS0VfSU5TVEFMTF9QUkVGSVh9L2xpYi9xdWlja2pzIiBPVVRQVVRfTkFNRSAiJHtOQU1FfSIgQ09NUElMRV9GTEFHUyAiJHtRVUlDS0pTX01PRFVMRV9DRkxBR1N9IiBCVUlMRF9SUEFUSCAiJHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9OiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfToke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0vcXVpY2tqczoke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0vcXVpY2tqcyIpCiAgdGFyZ2V0X2NvbXBpbGVfZGVmaW5pdGlvbnMoJHtUQVJHRVRfTkFNRX0gUFJJVkFURSBDT05GSUdfUFJFRklYPSIke0NNQUtFX0lOU1RBTExfUFJFRklYfSIpCiAgaW5zdGFsbChUQVJHRVRTICR7VEFSR0VUX05BTUV9IERFU1RJTkFUSU9OIGxpYi9xdWlja2pzIFBFUk1JU1NJT05TIE9XTkVSX1JFQUQgT1dORVJfV1JJVEUgT1dORVJfRVhFQ1VURSBHUk9VUF9SRUFEIEdST1VQX0VYRUNVVEUgV09STERfUkVBRCBXT1JMRF9FWEVDVVRFKQoKICBjb25maWdfc2hhcmVkX21vZHVsZSgke1RBUkdFVF9OQU1FfSkKCiAgaWYoT3BlbkNWX0ZPVU5EKQogICAgdGFyZ2V0X2luY2x1ZGVfZGlyZWN0b3JpZXMoJHtUQVJHRVRfTkFNRX0gUFVCTElDICR7T3BlbkNWX0lOQ0xVREVfRElSU30pCiAgICB0YXJnZXRfbGlua19saWJyYXJpZXMoJHtUQVJHRVRfTkFNRX0gJHtPcGVuQ1ZfTElCU30pCiAgZW5kaWYoKQplbmRmdW5jdGlvbigpCgpmdW5jdGlvbihtYWtlX3N0YXRpY19tb2R1bGUgRk5BTUUpCiAgc3RyaW5nKFJFR0VYIFJFUExBQ0UgIl8iICItIiBOQU1FICIke0ZOQU1FfSIpCiAgc3RyaW5nKFRPVVBQRVIgIiR7Rk5BTUV9IiBVTkFNRSkKCiAgc2V0KFRBUkdFVF9OQU1FIHF1aWNranMtJHtOQU1FfS1zdGF0aWMpCgogIGlmKEFSR04pCiAgICBzZXQoU09VUkNFUyAke0FSR059KQogIGVsc2UoQVJHTikKICAgIHNldChTT1VSQ0VTIGpzXyR7Rk5BTUV9LmNwcCAke2pzXyR7Rk5BTUV9X1NPVVJDRVN9IGpzYmluZGluZ3MuY3BwIHV0aWwuY3BwIGpzLmhwcCBqcy5jcHAgJHtKU19CSU5ESU5HU19DT01NT059KQogIGVuZGlmKEFSR04pCgogIGFkZF9saWJyYXJ5KCR7VEFSR0VUX05BTUV9IFNUQVRJQyAke1NPVVJDRVN9KQoKICB0YXJnZXRfbGlua19saWJyYXJpZXMoJHtUQVJHRVRfTkFNRX0gJHtqc2JpbmRpbmdzX0xJQlJBUklFU30gJHtPcGVuQ1ZfTElCU30pCiAgc2V0X3RhcmdldF9wcm9wZXJ0aWVzKCR7VEFSR0VUX05BTUV9IFBST1BFUlRJRVMgCiAgICBQUkVGSVggIiIKICAgICBPVVRQVVRfTkFNRSAiJHtOQU1FfSIKICAgIENPTVBJTEVfRkxBR1MgIiR7UVVJQ0tKU19NT0RVTEVfQ0ZMQUdTfSIgCiAgICAgKQogIHRhcmdldF9jb21waWxlX2RlZmluaXRpb25zKCR7VEFSR0VUX05BTUV9IFBSSVZBVEUgQ09ORklHX1BSRUZJWD0iJHtDTUFLRV9JTlNUQUxMX1BSRUZJWH0iKQogIGluc3RhbGwoVEFSR0VUUyAke1RBUkdFVF9OQU1FfSBERVNUSU5BVElPTiBsaWIvcXVpY2tqcykKCiAgY29uZmlnX3NoYXJlZF9tb2R1bGUoJHtUQVJHRVRfTkFNRX0pCgogIGlmKE9wZW5DVl9GT1VORCkKICAgIHRhcmdldF9pbmNsdWRlX2RpcmVjdG9yaWVzKCR7VEFSR0VUX05BTUV9IFBVQkxJQyAke09wZW5DVl9JTkNMVURFX0RJUlN9KQogICAgdGFyZ2V0X2xpbmtfbGlicmFyaWVzKCR7VEFSR0VUX05BTUV9ICR7T3BlbkNWX0xJQlN9KQogIGVuZGlmKCkKZW5kZnVuY3Rpb24oKQoKZnVuY3Rpb24obWFrZV9qc19iaW5kaW5ncykKICBmaWxlKEdMT0IgSlNfQklORElOR1NfU09VUkNFUyAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vanNfKi5jcHApCgogIGZvcmVhY2goTU9EICR7SlNfQklORElOR1NfU09VUkNFU30pCiAgICBzdHJpbmcoUkVHRVggUkVQTEFDRSAiXFwuY3BwIiAiIiBNT0QgIiR7TU9EfSIpCiAgICBzdHJpbmcoUkVHRVggUkVQTEFDRSAiLiovanNfIiAiIiBNT0QgIiR7TU9EfSIpCiAgICBsaXN0KEFQUEVORCBKU19CSU5ESU5HU19NT0RVTEVTICR7TU9EfSkKICBlbmRmb3JlYWNoKE1PRCAke0pTX0JJTkRJTkdTX1NPVVJDRVN9KQoKICBmb3JlYWNoKEpTX01PRFVMRSAke0pTX0JJTkRJTkdTX01PRFVMRVN9KQogICAgbWFrZV9zaGFyZWRfbW9kdWxlKCR7SlNfTU9EVUxFfSkKICBlbmRmb3JlYWNoKCkKCiAgc3RyaW5nKFJFUExBQ0UgIjsiICIgIiBNT0RVTEVfTkFNRVMgIiR7SlNfQklORElOR1NfTU9EVUxFU30iKQogIG1lc3NhZ2UoU1RBVFVTICJDb25maWd1cmVkIG1vZHVsZXM6ICR7TU9EVUxFX05BTUVTfSIpCgogIGFkZF9kZXBlbmRlbmNpZXMocXVpY2tqcy1yZWN0IHF1aWNranMtcG9pbnQgcXVpY2tqcy1zaXplKQogICMgYWRkX2RlcGVuZGVuY2llcyhxdWlja2pzLWNvbnRvdXIgcXVpY2tqcy1tYXQgcXVpY2tqcy1yZWN0IHF1aWNranMtcG9pbnQpCgogIGFkZF9kZXBlbmRlbmNpZXMocXVpY2tqcy1jb250b3VyIHF1aWNranMtbWF0KQoKICB0YXJnZXRfbGlua19saWJyYXJpZXMocXVpY2tqcy1tYXQgcXVpY2tqcy1zaXplKQogIHRhcmdldF9saW5rX2xpYnJhcmllcyhxdWlja2pzLXBvaW50LWl0ZXJhdG9yIHF1aWNranMtbGluZSBxdWlja2pzLXBvaW50KQogIHRhcmdldF9saW5rX2xpYnJhcmllcyhxdWlja2pzLWNvbnRvdXIgcXVpY2tqcy1wb2ludC1pdGVyYXRvciBxdWlja2pzLW1hdCkKICB0YXJnZXRfbGlua19saWJyYXJpZXMocXVpY2tqcy1saW5lIHF1aWNranMtcG9pbnQpCiAgdGFyZ2V0X2xpbmtfbGlicmFyaWVzKHF1aWNranMtcmVjdCBxdWlja2pzLXNpemUgcXVpY2tqcy1wb2ludCkKICB0YXJnZXRfbGlua19saWJyYXJpZXMocXVpY2tqcy12aWRlby1jYXB0dXJlIHF1aWNranMtbWF0KQogIHRhcmdldF9saW5rX2xpYnJhcmllcyhxdWlja2pzLWN2IHF1aWNranMtbWF0IHF1aWNranMtY29udG91ciBxdWlja2pzLXJlY3QgcXVpY2tqcy1saW5lKQogIHRhcmdldF9saW5rX2xpYnJhcmllcyhxdWlja2pzLWRyYXcgcXVpY2tqcy1tYXQgcXVpY2tqcy1jb250b3VyIHF1aWNranMtc2l6ZSkKICB0YXJnZXRfbGlua19saWJyYXJpZXMocXVpY2tqcy1jbGFoZSBxdWlja2pzLW1hdCBxdWlja2pzLXNpemUpCiAgdGFyZ2V0X2xpbmtfbGlicmFyaWVzKHF1aWNranMtdW1hdCBxdWlja2pzLW1hdCkKICB0YXJnZXRfbGlua19saWJyYXJpZXMocXVpY2tqcy1zdWJkaXYyZCBxdWlja2pzLWNvbnRvdXIpCgogIHRhcmdldF9saW5rX2xpYnJhcmllcyhxdWlja2pzLWN2IHBuZykKCiAgIyBhZGRfZGVwZW5kZW5jaWVzKHF1aWNranMtcG9pbnQtaXRlcmF0b3IgcXVpY2tqcy1jb250b3VyIHF1aWNranMtbWF0KQoKICBmaWxlKEdMT0IgSlNfQklORElOR1NfU09VUkNFUyBjb2xvci5jcHAgZGF0YS5jcHAgZ2VvbWV0cnkuY3BwIGpzYmluZGluZ3MuY3BwIGpzXyouY3BwIGpzLmNwcCBsaW5lLmNwcCBtYXRyaXguY3BwIHBvbHlnb24uY3BwICouaCAqLmhwcCkKCiAgIyBNYWluCiAgYWRkX2xpYnJhcnkocXVpY2tqcy1vcGVuY3YgTU9EVUxFICR7SlNfQklORElOR1NfU09VUkNFU30pCiAgY29uZmlnX3NoYXJlZF9tb2R1bGUocXVpY2tqcy1vcGVuY3YpCgogIHNldF90YXJnZXRfcHJvcGVydGllcyhxdWlja2pzLW9wZW5jdiBQUk9QRVJUSUVTICMgQ09NUElMRV9GTEFHUyAiLWZ2aXNpYmlsaXR5PWhpZGRlbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSUEFUSCAiJHtPUEVOQ1ZfTElCUkFSWV9ESVJTfToke0NNQUtFX0lOU1RBTExfUFJFRklYfS9saWI6JHtDTUFLRV9JTlNUQUxMX1BSRUZJWH0vbGliL3F1aWNranMiIE9VVFBVVF9OQU1FICJvcGVuY3YiIFBSRUZJWCAiIikKICB0YXJnZXRfY29tcGlsZV9kZWZpbml0aW9ucyhxdWlja2pzLW9wZW5jdiBQUklWQVRFIC1EQ09ORklHX1BSRUZJWD1cIiR7Q01BS0VfSU5TVEFMTF9QUkVGSVh9XCIpCgogIHRhcmdldF9saW5rX2xpYnJhcmllcyhxdWlja2pzLW9wZW5jdiAke09wZW5DVl9MSUJTfSkKICAjIGxpbmsKZW5kZnVuY3Rpb24obWFrZV9qc19iaW5kaW5ncykKAAAAAAAAAADDFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgcAAAAAAACrBwAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJUGAAAAAAAAlgYAAAAAAAAAAAAAlgYAAAAAAADIBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQYAAAAAAACVBgAAAAAAAAAAAAAAAPC/"
				],
				[
					239,
					1,
					"insert",
					{
						"characters": " JS_"
					},
					"BAAAALQHAAAAAAAAtQcAAAAAAAAAAAAAtQcAAAAAAAC2BwAAAAAAAAAAAAC2BwAAAAAAALcHAAAAAAAAAAAAALcHAAAAAAAAuAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAcAAAAAAAC0BwAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAALgHAAAAAAAAuQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAcAAAAAAAC4BwAAAAAAAAAAAAAAAPC/"
				],
				[
					245,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALkHAAAAAAAAuwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQcAAAAAAAC5BwAAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"insert",
					{
						"characters": "UNAME"
					},
					"BQAAALoHAAAAAAAAuwcAAAAAAAAAAAAAuwcAAAAAAAC8BwAAAAAAAAAAAAC8BwAAAAAAAL0HAAAAAAAAAAAAAL0HAAAAAAAAvgcAAAAAAAAAAAAAvgcAAAAAAAC/BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugcAAAAAAAC6BwAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					1,
					"insert",
					{
						"characters": "_MODULE"
					},
					"BwAAAMAHAAAAAAAAwQcAAAAAAAAAAAAAwQcAAAAAAADCBwAAAAAAAAAAAADCBwAAAAAAAMMHAAAAAAAAAAAAAMMHAAAAAAAAxAcAAAAAAAAAAAAAxAcAAAAAAADFBwAAAAAAAAAAAADFBwAAAAAAAMYHAAAAAAAAAAAAAMYHAAAAAAAAxwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAcAAAAAAADABwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "cmake/OpenCV.cmake",
			"settings":
			{
				"buffer_size": 6229,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "F"
					},
					"AgAAACoAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAArAAAAAAAAAAEAAABm",
					"AQAAAAAAAAABAAAAKwAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "macro"
					},
					"BgAAADwAAAAAAAAAPQAAAAAAAAAAAAAAPQAAAAAAAAA9AAAAAAAAAAgAAABmdW5jdGlvbj0AAAAAAAAAPgAAAAAAAAAAAAAAPgAAAAAAAAA/AAAAAAAAAAAAAAA/AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAQQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAAAAAAAAABEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "enb"
					},
					"BAAAAD8YAAAAAAAAQBgAAAAAAAAAAAAAQBgAAAAAAABAGAAAAAAAAAsAAABlbmRmdW5jdGlvbkAYAAAAAAAAQRgAAAAAAAAAAAAAQRgAAAAAAABCGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPxgAAAAAAABKGAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"left_delete",
					null,
					"AQAAAEEYAAAAAAAAQRgAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAQhgAAAAAAABCGAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "dmacro"
					},
					"BgAAAEEYAAAAAAAAQhgAAAAAAAAAAAAAQhgAAAAAAABDGAAAAAAAAAAAAABDGAAAAAAAAEQYAAAAAAAAAAAAAEQYAAAAAAAARRgAAAAAAAAAAAAARRgAAAAAAABGGAAAAAAAAAAAAABGGAAAAAAAAEcYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQRgAAAAAAABBGAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "cmake/FindQuickJS.cmake",
			"settings":
			{
				"buffer_size": 5441,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "m,ac"
					},
					"BQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAgAAABmdW5jdGlvbgEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					3,
					"left_delete",
					null,
					"AwAAAAMAAAAAAAAAAwAAAAAAAAABAAAAYwIAAAAAAAAAAgAAAAAAAAABAAAAYQEAAAAAAAAAAQAAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "acro"
					},
					"BAAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "enbd"
					},
					"BAAAAAIVAAAAAAAAAxUAAAAAAAAAAAAAAxUAAAAAAAAEFQAAAAAAAAAAAAAEFQAAAAAAAAUVAAAAAAAAAAAAAAUVAAAAAAAABhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAhUAAAAAAAACFQAAAAAAAAAAAAAAAAAA"
				],
				[
					16,
					4,
					"left_delete",
					null,
					"BAAAAAUVAAAAAAAABRUAAAAAAAABAAAAZAQVAAAAAAAABBUAAAAAAAABAAAAYgMVAAAAAAAAAxUAAAAAAAABAAAAbgIVAAAAAAAAAhUAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAABhUAAAAAAAAGFQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "endmacro"
					},
					"CQAAAKwLAAAAAAAArQsAAAAAAAAAAAAArQsAAAAAAACtCwAAAAAAAAsAAABlbmRmdW5jdGlvbq0LAAAAAAAArgsAAAAAAAAAAAAArgsAAAAAAACvCwAAAAAAAAAAAACvCwAAAAAAALALAAAAAAAAAAAAALALAAAAAAAAsQsAAAAAAAAAAAAAsQsAAAAAAACyCwAAAAAAAAAAAACyCwAAAAAAALMLAAAAAAAAAAAAALMLAAAAAAAAtAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAsAAAAAAAC3CwAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAALEOAAAAAAAAsg4AAAAAAAAAAAAAsg4AAAAAAAC0DgAAAAAAAAAAAAC0DgAAAAAAALUOAAAAAAAAAAAAALUOAAAAAAAAtw4AAAAAAAAAAAAAsg4AAAAAAACyDgAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAsQ4AAAAAAACxDgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"paste",
					null,
					"AQAAALUOAAAAAAAAaQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQ4AAAAAAAC1DgAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"paste",
					null,
					"AgAAAOcOAAAAAAAAHA8AAAAAAAAAAAAAHA8AAAAAAAAcDwAAAAAAAHQAAAAgICAgc2V0KFNPVVJDRVMganNfJHtGTkFNRX0uY3BwICR7anNfJHtGTkFNRX1fU09VUkNFU30ganNiaW5kaW5ncy5jcHAgdXRpbC5jcHAganMuaHBwIGpzLmNwcCAke0pTX0JJTkRJTkdTX0NPTU1PTn0pCg",
					"AQAAAAAAAAABAAAA5w4AAAAAAABbDwAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AwAAAOkOAAAAAAAA6g4AAAAAAAAAAAAAsw4AAAAAAACzDgAAAAAAAAIAAAAgIOgOAAAAAAAA6Q4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6Q4AAAAAAADpDgAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"left_delete",
					null,
					"AQAAALIOAAAAAAAAsg4AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAsw4AAAAAAACzDgAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					2,
					"left_delete",
					null,
					"AgAAACoPAAAAAAAAKg8AAAAAAAA1AAAAICBzZXQoU09VUkNFUyBxdWlja2pzLSR7TkFNRX0uYyAkeyR7Vk5BTUV9X1NPVVJDRVN9KQopDwAAAAAAACkPAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAKg8AAAAAAABfDwAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABBFQAAbWFjcm8oZmluZF9xdWlja2pzKQogIGluY2x1ZGUoQ2hlY2tJbmNsdWRlRmlsZSkKCiAgaWYoTk9UIFFVSUNLSlNfUFJFRklYKQogICAgc2V0KFFVSUNLSlNfUFJFRklYICIke0NNQUtFX0lOU1RBTExfUFJFRklYfSIgQ0FDSEUgUEFUSCAiUXVpY2tKUyBpbnN0YWxsIGRpcmVjdG9yeSIpCiAgZWxzZShOT1QgUVVJQ0tKU19QUkVGSVgpCiAgICBzZXQoUVVJQ0tKU19QUkVGSVggIiR7UVVJQ0tKU19QUkVGSVh9IiBDQUNIRSBQQVRIICJRdWlja0pTIGluc3RhbGwgZGlyZWN0b3J5IikKICBlbmRpZihOT1QgUVVJQ0tKU19QUkVGSVgpCgogIHNldChDTUFLRV9JTlNUQUxMX1BSRUZJWCAiJHtRVUlDS0pTX1BSRUZJWH0iIENBQ0hFIFBBVEggIkluc3RhbGwgZGlyZWN0b3J5IiBGT1JDRSkKICBzZXRfcHJvcGVydHkoQ0FDSEUgQ01BS0VfQlVJTERfVFlQRSBQUk9QRVJUWSBTVFJJTkdTIERlYnVnIFJlbGVhc2UgTWluU2l6ZVJlbCBSZWxXaXRoRGViSW5mbykKCiAgbWVzc2FnZSgiUXVpY2tKUyBpbnN0YWxsIGRpcmVjdG9yeTogJHtRVUlDS0pTX1BSRUZJWH0iKQoKICBzZXQoQ01BS0VfUkVRVUlSRURfUVVJRVQgVFJVRSkKCiAgc2V0KFFVSUNLSlNfSU5DTFVERV9ESVIgIiR7UVVJQ0tKU19QUkVGSVh9L2luY2x1ZGUvcXVpY2tqcyIpCiAgc2V0KFFVSUNLSlNfSU5DTFVERV9ESVJTICIiKQoKICBpZihFWElTVFMgIiR7UVVJQ0tKU19JTkNMVURFX0RJUn0vcXVpY2tqcy1jb25maWcuaCIpCiAgICBsaXN0KEFQUEVORCBRVUlDS0pTX0lOQ0xVREVfRElSUyAiJHtRVUlDS0pTX0lOQ0xVREVfRElSfSIpCiAgZWxzZShFWElTVFMgIiR7UVVJQ0tKU19JTkNMVURFX0RJUn0vcXVpY2tqcy1jb25maWcuaCIpCiAgICBpZihFWElTVFMgIiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfS8uLi9xdWlja2pzLWNvbmZpZy5oIikKICAgICAgbGlzdChBUFBFTkQgUVVJQ0tKU19JTkNMVURFX0RJUlMgLi4pCiAgICAgIGxpc3QoQVBQRU5EIFFVSUNLSlNfSU5DTFVERV9ESVJTICIke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0vLi4iKQogICAgZWxzZShFWElTVFMgIiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfS8uLi9xdWlja2pzLWNvbmZpZy5oIikKICAgICAgaWYoRVhJU1RTICIke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vLi4vcXVpY2tqcy5oIikKICAgICAgICBmaWxlKFJFTEFUSVZFX1BBVEggUVVJQ0tKU19JTkNMVURFX0RJUiAiJHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9IiAiJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9Ly4uIikKICAgICAgICBsaXN0KEFQUEVORCBRVUlDS0pTX0lOQ0xVREVfRElSUyAiJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9Ly4uIikKICAgICAgZWxzZShFWElTVFMgIiR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS8uLi9xdWlja2pzLmgiKQogICAgICAgIGlmKEVYSVNUUyAiJHtRVUlDS0pTX1BSRUZJWH0vaW5jbHVkZS9xdWlja2pzIikKICAgICAgICAgIGxpc3QoQVBQRU5EIFFVSUNLSlNfSU5DTFVERV9ESVJTICIke1FVSUNLSlNfUFJFRklYfS9pbmNsdWRlL3F1aWNranMiKQogICAgICAgIGVuZGlmKEVYSVNUUyAiJHtRVUlDS0pTX1BSRUZJWH0vaW5jbHVkZS9xdWlja2pzIikKICAgICAgZW5kaWYoRVhJU1RTICIke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vLi4vcXVpY2tqcy5oIikKICAgIGVuZGlmKEVYSVNUUyAiJHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9Ly4uL3F1aWNranMtY29uZmlnLmgiKQogIGVuZGlmKEVYSVNUUyAiJHtRVUlDS0pTX0lOQ0xVREVfRElSfS9xdWlja2pzLWNvbmZpZy5oIikKCiAgc2V0KFFVSUNLSlNfTElCUkFSWV9ESVIgIiR7UVVJQ0tKU19QUkVGSVh9L2xpYi9xdWlja2pzIiBDQUNIRSBQQVRIICJRdWlja0pTIGxpYnJhcnkgZGlyZWN0b3J5IikKCiAgc2V0KFFVSUNLSlNfSU5DTFVERV9ESVJTICIke1FVSUNLSlNfSU5DTFVERV9ESVJTfSIgQ0FDSEUgU1RSSU5HICJRdWlja0pTIGluY2x1ZGUgZGlycyIgRk9SQ0UpCgogIHNldChDTUFLRV9SRVFVSVJFRF9JTkNMVURFUyAiJHtRVUlDS0pTX0lOQ0xVREVfRElSU30iKQoKICBjaGVja19pbmNsdWRlX2ZpbGUocXVpY2tqcy5oIEhBVkVfUVVJQ0tKU19IKQogIGNoZWNrX2luY2x1ZGVfZmlsZShxdWlja2pzLWNvbmZpZy5oIEhBVkVfUVVJQ0tKU19DT05GSUdfSCkKCiAgaWYoSEFWRV9RVUlDS0pTX0NPTkZJR19IKQogICAgIyBkdW1wKEhBVkVfUVVJQ0tKU19DT05GSUdfSCkKICAgIGFkZF9kZWZpbml0aW9ucygtREhBVkVfUVVJQ0tKU19DT05GSUdfSD0xKQogIGVuZGlmKEhBVkVfUVVJQ0tKU19DT05GSUdfSCkKCiAgaWYoTk9UIEhBVkVfUVVJQ0tKU19IKQogICAgbWVzc2FnZShGQVRBTF9FUlJPUiAiUXVpY2tKUyBoZWFkZXJzIG5vdCBmb3VuZCIpCiAgZW5kaWYoTk9UIEhBVkVfUVVJQ0tKU19IKQoKICBpbmNsdWRlX2RpcmVjdG9yaWVzKCR7UVVJQ0tKU19JTkNMVURFX0RJUlN9KQoKICBpZihIQVZFX1FVSUNLSlNfQ09ORklHX0gpCiAgICBhZGRfZGVmaW5pdGlvbnMoLURIQVZFX1FVSUNLSlNfQ09ORklHX0g9MSkKICBlbmRpZihIQVZFX1FVSUNLSlNfQ09ORklHX0gpCgogIGZpbmRfcHJvZ3JhbShRSlMgcWpzIFBBVEhTICIke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0vLi4iICIke1FVSUNLSlNfUFJFRklYfS9iaW4iIEVOViBQQVRIIE5PX0RFRkFVTFRfUEFUSCkKICBmaW5kX3Byb2dyYW0oUUpTQyBxanNjIFBBVEhTICIke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0vLi4iICIke1FVSUNLSlNfUFJFRklYfS9iaW4iIEVOViBQQVRIIE5PX0RFRkFVTFRfUEFUSCkKCiAgbWVzc2FnZShTVEFUVVMgIlF1aWNrSlMgaW50ZXJwcmV0ZXI6ICR7UUpTfSIpCiAgbWVzc2FnZShTVEFUVVMgIlF1aWNrSlMgY29tcGlsZXI6ICR7UUpTQ30iKQoKICBzZXQoQ1VUSUxTX0ggJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9Ly4uL2N1dGlscy5oKQogIHNldChRVUlDS0pTX0ggJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9Ly4uL3F1aWNranMuaCkKZW5kbWFjcm8oZmluZF9xdWlja2pzKQoKZnVuY3Rpb24oY29uZmlnX21vZHVsZSBUQVJHRVRfTkFNRSkKICBpZihRVUlDS0pTX0xJQlJBUllfRElSKQogICAgc2V0X3RhcmdldF9wcm9wZXJ0aWVzKCR7VEFSR0VUX05BTUV9IFBST1BFUlRJRVMgTElOS19ESVJFQ1RPUklFUyAiJHtRVUlDS0pTX0xJQlJBUllfRElSfSIpCiAgZW5kaWYoUVVJQ0tKU19MSUJSQVJZX0RJUikKICBpZihRVUlDS0pTX01PRFVMRV9ERVBFTkRFTkNJRVMpCiAgICB0YXJnZXRfbGlua19saWJyYXJpZXMoJHtUQVJHRVRfTkFNRX0gJHtRVUlDS0pTX01PRFVMRV9ERVBFTkRFTkNJRVN9KQogIGVuZGlmKFFVSUNLSlNfTU9EVUxFX0RFUEVOREVOQ0lFUykKICBpZihRVUlDS0pTX01PRFVMRV9DRkxBR1MpCiAgICB0YXJnZXRfY29tcGlsZV9vcHRpb25zKCR7VEFSR0VUX05BTUV9IFBSSVZBVEUgIiR7UVVJQ0tKU19NT0RVTEVfQ0ZMQUdTfSIpCiAgZW5kaWYoUVVJQ0tKU19NT0RVTEVfQ0ZMQUdTKQplbmRmdW5jdGlvbihjb25maWdfbW9kdWxlIFRBUkdFVF9OQU1FKQoKZnVuY3Rpb24obWFrZV9tb2R1bGUgRk5BTUUpCiAgc3RyaW5nKFJFR0VYIFJFUExBQ0UgIl8iICItIiBOQU1FICIke0ZOQU1FfSIpCiAgc3RyaW5nKFJFR0VYIFJFUExBQ0UgIi0iICJfIiBWTkFNRSAiJHtGTkFNRX0iKQogIHN0cmluZyhUT1VQUEVSICIke0ZOQU1FfSIgVVVOQU1FKQogIHN0cmluZyhSRUdFWCBSRVBMQUNFICItIiAiXyIgVU5BTUUgIiR7VVVOQU1FfSIpCgogIHNldChUQVJHRVRfTkFNRSBxanMtJHtOQU1FfSkKCiAgaWYoQVJHTikKICAgIHNldChTT1VSQ0VTICR7QVJHTn0pCiAgZWxzZShBUkdOKQogICAgc2V0KFNPVVJDRVMgcXVpY2tqcy0ke05BTUV9LmMgJHske1ZOQU1FfV9TT1VSQ0VTfSkKICBlbmRpZihBUkdOKQoKICAjIGR1bXAoVk5BTUUgJHtWTkFNRX1fU09VUkNFUykKICBhZGRfbGlicmFyeSgke1RBUkdFVF9OQU1FfSBTSEFSRUQgJHtTT1VSQ0VTfSkKICBhZGRfbGlicmFyeSgke1RBUkdFVF9OQU1FfS1zdGF0aWMgU1RBVElDICR7U09VUkNFU30pCgogIHNldF90YXJnZXRfcHJvcGVydGllcygke1RBUkdFVF9OQU1FfSBQUk9QRVJUSUVTIFBSRUZJWCAiIiBSUEFUSCAiJHtPUEVOQ1ZfTElCUkFSWV9ESVJTfToke1FVSUNLSlNfUFJFRklYfS9saWI6JHtRVUlDS0pTX1BSRUZJWH0vbGliL3F1aWNranMiIE9VVFBVVF9OQU1FICIke1ZOQU1FfSIgQlVJTERfUlBBVEggIiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfToke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn06JHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9L3F1aWNranM6JHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9L3F1aWNranMiIENPTVBJTEVfRkxBR1MgIiR7TU9EVUxFX0NPTVBJTEVfRkxBR1N9IikKICBzZXRfdGFyZ2V0X3Byb3BlcnRpZXMoJHtUQVJHRVRfTkFNRX0tc3RhdGljIFBST1BFUlRJRVMgUFJFRklYICIiIE9VVFBVVF9OQU1FICIke1ZOQU1FfSIgQ09NUElMRV9GTEFHUyAiIikKICB0YXJnZXRfY29tcGlsZV9kZWZpbml0aW9ucygke1RBUkdFVF9OQU1FfSBQUklWQVRFIEpTX1NIQVJFRF9MSUJSQVJZPTEgSlNfJHtVTkFNRX1fTU9EVUxFPTEgQ09ORklHX1BSRUZJWD0iJHtRVUlDS0pTX1BSRUZJWH0iKQogIHRhcmdldF9jb21waWxlX2RlZmluaXRpb25zKCR7VEFSR0VUX05BTUV9LXN0YXRpYyBQUklWQVRFIEpTXyR7VU5BTUV9X01PRFVMRT0xIENPTkZJR19QUkVGSVg9IiR7UVVJQ0tKU19QUkVGSVh9IikKICBpbnN0YWxsKFRBUkdFVFMgJHtUQVJHRVRfTkFNRX0gREVTVElOQVRJT04gbGliL3F1aWNranMgUEVSTUlTU0lPTlMgT1dORVJfUkVBRCBPV05FUl9XUklURSBPV05FUl9FWEVDVVRFIEdST1VQX1JFQUQgR1JPVVBfRVhFQ1VURSBXT1JMRF9SRUFEIFdPUkxEX0VYRUNVVEUpCiAgaW5zdGFsbChUQVJHRVRTICR7VEFSR0VUX05BTUV9LXN0YXRpYyBERVNUSU5BVElPTiBsaWIvcXVpY2tqcykKCiAgY29uZmlnX21vZHVsZSgke1RBUkdFVF9OQU1FfSkKZW5kZnVuY3Rpb24oKQoKZnVuY3Rpb24oY29tcGlsZV9tb2R1bGUgU09VUkNFKQogIGJhc2VuYW1lKEJBU0UgIiR7U09VUkNFfSIpCiAgYWRkX2N1c3RvbV9jb21tYW5kKE9VVFBVVCAke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0vJHtCQVNFfS5jIENPTU1BTkQgc2ggLXggLWMgInFqc2MgLXYgLWMgLW8gJHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9LyR7QkFTRX0uYyAtbSAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vJHtTT1VSQ0V9IiBERVBFTkRTICR7UUpTQ19ERVBTfSBXT1JLSU5HX0RJUkVDVE9SWSAke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0gQ09NTUVOVCAiR2VuZXJhdGUgJHtCQVNFfS5jIGZyb20gJHtTT1VSQ0V9IHVzaW5nIHFqcyBjb21waWxlciIgU09VUkNFUyAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vJHtTT1VSQ0V9KQoKZW5kZnVuY3Rpb24oY29tcGlsZV9tb2R1bGUgU09VUkNFKQoAAAAAAAAAAFgXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsw8AAAAAAAAQEQAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYFwAAbWFjcm8oZmluZF9xdWlja2pzKQogIGluY2x1ZGUoQ2hlY2tJbmNsdWRlRmlsZSkKCiAgaWYoTk9UIFFVSUNLSlNfUFJFRklYKQogICAgc2V0KFFVSUNLSlNfUFJFRklYICIke0NNQUtFX0lOU1RBTExfUFJFRklYfSIKICAgICAgICBDQUNIRSBQQVRIICJRdWlja0pTIGluc3RhbGwgZGlyZWN0b3J5IikKICBlbHNlKE5PVCBRVUlDS0pTX1BSRUZJWCkKICAgIHNldChRVUlDS0pTX1BSRUZJWCAiJHtRVUlDS0pTX1BSRUZJWH0iIENBQ0hFIFBBVEgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJRdWlja0pTIGluc3RhbGwgZGlyZWN0b3J5IikKICBlbmRpZihOT1QgUVVJQ0tKU19QUkVGSVgpCgogIHNldChDTUFLRV9JTlNUQUxMX1BSRUZJWCAiJHtRVUlDS0pTX1BSRUZJWH0iIENBQ0hFIFBBVEggIkluc3RhbGwgZGlyZWN0b3J5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZPUkNFKQogIHNldF9wcm9wZXJ0eShDQUNIRSBDTUFLRV9CVUlMRF9UWVBFIFBST1BFUlRZIFNUUklOR1MgRGVidWcgUmVsZWFzZSBNaW5TaXplUmVsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsV2l0aERlYkluZm8pCgogIG1lc3NhZ2UoIlF1aWNrSlMgaW5zdGFsbCBkaXJlY3Rvcnk6ICR7UVVJQ0tKU19QUkVGSVh9IikKCiAgc2V0KENNQUtFX1JFUVVJUkVEX1FVSUVUIFRSVUUpCgogIHNldChRVUlDS0pTX0lOQ0xVREVfRElSICIke1FVSUNLSlNfUFJFRklYfS9pbmNsdWRlL3F1aWNranMiKQogIHNldChRVUlDS0pTX0lOQ0xVREVfRElSUyAiIikKCiAgaWYoRVhJU1RTICIke1FVSUNLSlNfSU5DTFVERV9ESVJ9L3F1aWNranMtY29uZmlnLmgiKQogICAgbGlzdChBUFBFTkQgUVVJQ0tKU19JTkNMVURFX0RJUlMgIiR7UVVJQ0tKU19JTkNMVURFX0RJUn0iKQogIGVsc2UoRVhJU1RTICIke1FVSUNLSlNfSU5DTFVERV9ESVJ9L3F1aWNranMtY29uZmlnLmgiKQogICAgaWYoRVhJU1RTICIke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0vLi4vcXVpY2tqcy1jb25maWcuaCIpCiAgICAgIGxpc3QoQVBQRU5EIFFVSUNLSlNfSU5DTFVERV9ESVJTIC4uKQogICAgICBsaXN0KEFQUEVORCBRVUlDS0pTX0lOQ0xVREVfRElSUyAiJHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9Ly4uIikKICAgIGVsc2UoRVhJU1RTICIke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0vLi4vcXVpY2tqcy1jb25maWcuaCIpCiAgICAgIGlmKEVYSVNUUyAiJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9Ly4uL3F1aWNranMuaCIpCiAgICAgICAgZmlsZShSRUxBVElWRV9QQVRIIFFVSUNLSlNfSU5DTFVERV9ESVIgIiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfSIKICAgICAgICAgICAgICIke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vLi4iKQogICAgICAgIGxpc3QoQVBQRU5EIFFVSUNLSlNfSU5DTFVERV9ESVJTICIke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vLi4iKQogICAgICBlbHNlKEVYSVNUUyAiJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9Ly4uL3F1aWNranMuaCIpCiAgICAgICAgaWYoRVhJU1RTICIke1FVSUNLSlNfUFJFRklYfS9pbmNsdWRlL3F1aWNranMiKQogICAgICAgICAgbGlzdChBUFBFTkQgUVVJQ0tKU19JTkNMVURFX0RJUlMgIiR7UVVJQ0tKU19QUkVGSVh9L2luY2x1ZGUvcXVpY2tqcyIpCiAgICAgICAgZW5kaWYoRVhJU1RTICIke1FVSUNLSlNfUFJFRklYfS9pbmNsdWRlL3F1aWNranMiKQogICAgICBlbmRpZihFWElTVFMgIiR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS8uLi9xdWlja2pzLmgiKQogICAgZW5kaWYoRVhJU1RTICIke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0vLi4vcXVpY2tqcy1jb25maWcuaCIpCiAgZW5kaWYoRVhJU1RTICIke1FVSUNLSlNfSU5DTFVERV9ESVJ9L3F1aWNranMtY29uZmlnLmgiKQoKICBzZXQoUVVJQ0tKU19MSUJSQVJZX0RJUiAiJHtRVUlDS0pTX1BSRUZJWH0vbGliL3F1aWNranMiCiAgICAgIENBQ0hFIFBBVEggIlF1aWNrSlMgbGlicmFyeSBkaXJlY3RvcnkiKQoKICBzZXQoUVVJQ0tKU19JTkNMVURFX0RJUlMgIiR7UVVJQ0tKU19JTkNMVURFX0RJUlN9IgogICAgICBDQUNIRSBTVFJJTkcgIlF1aWNrSlMgaW5jbHVkZSBkaXJzIiBGT1JDRSkKCiAgc2V0KENNQUtFX1JFUVVJUkVEX0lOQ0xVREVTICIke1FVSUNLSlNfSU5DTFVERV9ESVJTfSIpCgogIGNoZWNrX2luY2x1ZGVfZmlsZShxdWlja2pzLmggSEFWRV9RVUlDS0pTX0gpCiAgY2hlY2tfaW5jbHVkZV9maWxlKHF1aWNranMtY29uZmlnLmggSEFWRV9RVUlDS0pTX0NPTkZJR19IKQoKICBpZihIQVZFX1FVSUNLSlNfQ09ORklHX0gpCiAgICAjIGR1bXAoSEFWRV9RVUlDS0pTX0NPTkZJR19IKQogICAgYWRkX2RlZmluaXRpb25zKC1ESEFWRV9RVUlDS0pTX0NPTkZJR19IPTEpCiAgZW5kaWYoSEFWRV9RVUlDS0pTX0NPTkZJR19IKQoKICBpZihOT1QgSEFWRV9RVUlDS0pTX0gpCiAgICBtZXNzYWdlKEZBVEFMX0VSUk9SICJRdWlja0pTIGhlYWRlcnMgbm90IGZvdW5kIikKICBlbmRpZihOT1QgSEFWRV9RVUlDS0pTX0gpCgogIGluY2x1ZGVfZGlyZWN0b3JpZXMoJHtRVUlDS0pTX0lOQ0xVREVfRElSU30pCgogIGlmKEhBVkVfUVVJQ0tKU19DT05GSUdfSCkKICAgIGFkZF9kZWZpbml0aW9ucygtREhBVkVfUVVJQ0tKU19DT05GSUdfSD0xKQogIGVuZGlmKEhBVkVfUVVJQ0tKU19DT05GSUdfSCkKCiAgZmluZF9wcm9ncmFtKFFKUyBxanMgUEFUSFMgIiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfS8uLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJHtRVUlDS0pTX1BSRUZJWH0vYmluIiBFTlYgUEFUSCBOT19ERUZBVUxUX1BBVEgpCiAgZmluZF9wcm9ncmFtKFFKU0MgcWpzYyBQQVRIUyAiJHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9Ly4uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiR7UVVJQ0tKU19QUkVGSVh9L2JpbiIgRU5WIFBBVEggTk9fREVGQVVMVF9QQVRIKQoKICBtZXNzYWdlKFNUQVRVUyAiUXVpY2tKUyBpbnRlcnByZXRlcjogJHtRSlN9IikKICBtZXNzYWdlKFNUQVRVUyAiUXVpY2tKUyBjb21waWxlcjogJHtRSlNDfSIpCgogIHNldChDVVRJTFNfSCAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vLi4vY3V0aWxzLmgpCiAgc2V0KFFVSUNLSlNfSCAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vLi4vcXVpY2tqcy5oKQplbmRtYWNybyhmaW5kX3F1aWNranMpCgpmdW5jdGlvbihjb25maWdfbW9kdWxlIFRBUkdFVF9OQU1FKQogIGlmKFFVSUNLSlNfTElCUkFSWV9ESVIpCiAgICBzZXRfdGFyZ2V0X3Byb3BlcnRpZXMoJHtUQVJHRVRfTkFNRX0gUFJPUEVSVElFUyBMSU5LX0RJUkVDVE9SSUVTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJHtRVUlDS0pTX0xJQlJBUllfRElSfSIpCiAgZW5kaWYoUVVJQ0tKU19MSUJSQVJZX0RJUikKICBpZihRVUlDS0pTX01PRFVMRV9ERVBFTkRFTkNJRVMpCiAgICB0YXJnZXRfbGlua19saWJyYXJpZXMoJHtUQVJHRVRfTkFNRX0gJHtRVUlDS0pTX01PRFVMRV9ERVBFTkRFTkNJRVN9KQogIGVuZGlmKFFVSUNLSlNfTU9EVUxFX0RFUEVOREVOQ0lFUykKICBpZihRVUlDS0pTX01PRFVMRV9DRkxBR1MpCiAgICB0YXJnZXRfY29tcGlsZV9vcHRpb25zKCR7VEFSR0VUX05BTUV9IFBSSVZBVEUgIiR7UVVJQ0tKU19NT0RVTEVfQ0ZMQUdTfSIpCiAgZW5kaWYoUVVJQ0tKU19NT0RVTEVfQ0ZMQUdTKQplbmRmdW5jdGlvbihjb25maWdfbW9kdWxlIFRBUkdFVF9OQU1FKQoKZnVuY3Rpb24obWFrZV9tb2R1bGUgRk5BTUUpCiAgc3RyaW5nKFJFR0VYIFJFUExBQ0UgIl8iICItIiBOQU1FICIke0ZOQU1FfSIpCiAgc3RyaW5nKFJFR0VYIFJFUExBQ0UgIi0iICJfIiBWTkFNRSAiJHtGTkFNRX0iKQogIHN0cmluZyhUT1VQUEVSICIke0ZOQU1FfSIgVVVOQU1FKQogIHN0cmluZyhSRUdFWCBSRVBMQUNFICItIiAiXyIgVU5BTUUgIiR7VVVOQU1FfSIpCgogIHNldChUQVJHRVRfTkFNRSBxanMtJHtOQU1FfSkKCiAgaWYoQVJHTikKICAgIHNldChTT1VSQ0VTICR7QVJHTn0pCiAgZWxzZShBUkdOKQogICAgc2V0KFNPVVJDRVMgcXVpY2tqcy0ke05BTUV9LmMgJHske1ZOQU1FfV9TT1VSQ0VTfSkKICBlbmRpZihBUkdOKQoKICAjIGR1bXAoVk5BTUUgJHtWTkFNRX1fU09VUkNFUykKICBhZGRfbGlicmFyeSgke1RBUkdFVF9OQU1FfSBTSEFSRUQgJHtTT1VSQ0VTfSkKICBhZGRfbGlicmFyeSgke1RBUkdFVF9OQU1FfS1zdGF0aWMgU1RBVElDICR7U09VUkNFU30pCgogIHNldF90YXJnZXRfcHJvcGVydGllcygKICAgICR7VEFSR0VUX05BTUV9CiAgICBQUk9QRVJUSUVTCiAgICAgIFBSRUZJWCAiIgogICAgICBSUEFUSAogICAgICAiJHtPUEVOQ1ZfTElCUkFSWV9ESVJTfToke1FVSUNLSlNfUFJFRklYfS9saWI6JHtRVUlDS0pTX1BSRUZJWH0vbGliL3F1aWNranMiCiAgICAgIE9VVFBVVF9OQU1FICIke1ZOQU1FfSIKICAgICAgQlVJTERfUlBBVEgKICAgICAgIiR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfToke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn06JHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9L3F1aWNranM6JHtDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVJ9L3F1aWNranMiCiAgICAgIENPTVBJTEVfRkxBR1MgIiR7TU9EVUxFX0NPTVBJTEVfRkxBR1N9IikKICBzZXRfdGFyZ2V0X3Byb3BlcnRpZXMoCiAgICAke1RBUkdFVF9OQU1FfS1zdGF0aWMgUFJPUEVSVElFUyBQUkVGSVggIiIgT1VUUFVUX05BTUUgIiR7Vk5BTUV9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09NUElMRV9GTEFHUyAiIikKICB0YXJnZXRfY29tcGlsZV9kZWZpbml0aW9ucygKICAgICR7VEFSR0VUX05BTUV9IFBSSVZBVEUgSlNfU0hBUkVEX0xJQlJBUlk9MSBKU18ke1VOQU1FfV9NT0RVTEU9MQogICAgICAgICAgICAgICAgICAgICAgICAgICBDT05GSUdfUFJFRklYPSIke1FVSUNLSlNfUFJFRklYfSIpCiAgdGFyZ2V0X2NvbXBpbGVfZGVmaW5pdGlvbnMoCiAgICAke1RBUkdFVF9OQU1FfS1zdGF0aWMgUFJJVkFURSBKU18ke1VOQU1FfV9NT0RVTEU9MQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09ORklHX1BSRUZJWD0iJHtRVUlDS0pTX1BSRUZJWH0iKQogIGluc3RhbGwoVEFSR0VUUyAke1RBUkdFVF9OQU1FfSBERVNUSU5BVElPTiBsaWIvcXVpY2tqcwogICAgICAgICAgUEVSTUlTU0lPTlMgT1dORVJfUkVBRCBPV05FUl9XUklURSBPV05FUl9FWEVDVVRFIEdST1VQX1JFQUQKICAgICAgICAgICAgICAgICAgICAgIEdST1VQX0VYRUNVVEUgV09STERfUkVBRCBXT1JMRF9FWEVDVVRFKQogIGluc3RhbGwoVEFSR0VUUyAke1RBUkdFVF9OQU1FfS1zdGF0aWMgREVTVElOQVRJT04gbGliL3F1aWNranMpCgogIGNvbmZpZ19tb2R1bGUoJHtUQVJHRVRfTkFNRX0pCmVuZGZ1bmN0aW9uKCkKCmZ1bmN0aW9uKGNvbXBpbGVfbW9kdWxlIFNPVVJDRSkKICBiYXNlbmFtZShCQVNFICIke1NPVVJDRX0iKQogIGFkZF9jdXN0b21fY29tbWFuZCgKICAgIE9VVFBVVCAke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0vJHtCQVNFfS5jCiAgICBDT01NQU5ECiAgICAgIHNoIC14IC1jCiAgICAgICJxanNjIC12IC1jIC1vICR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfS8ke0JBU0V9LmMgLW0gJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9LyR7U09VUkNFfSIKICAgIERFUEVORFMgJHtRSlNDX0RFUFN9CiAgICBXT1JLSU5HX0RJUkVDVE9SWSAke0NNQUtFX0NVUlJFTlRfQklOQVJZX0RJUn0KICAgIENPTU1FTlQgIkdlbmVyYXRlICR7QkFTRX0uYyBmcm9tICR7U09VUkNFfSB1c2luZyBxanMgY29tcGlsZXIiIFNPVVJDRVMKICAgICAgICAgICAgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9LyR7U09VUkNFfSkKCmVuZGZ1bmN0aW9uKGNvbXBpbGVfbW9kdWxlIFNPVVJDRSkKAAAAAAAAAABBFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHRMAAAAAAABhEwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "# sdl2 cmake project-config input for ./configure scripts\n\nset(prefix \"/opt/SDL2\")\nset(exec_prefix \"${prefix}\")\nset(libdir \"${exec_prefix}/lib\")\nset(SDL2_PREFIX \"/opt/SDL2\")\nset(SDL2_EXEC_PREFIX \"/opt/SDL2\")\nset(SDL2_LIBDIR \"${exec_prefix}/lib\")\nset(SDL2_INCLUDE_DIRS \"${prefix}/include/SDL2\")\nset(SDL2_LIBRARIES \"-L${SDL2_LIBDIR} -Wl,-rpath,${libdir} -Wl,--enable-new-dtags -lSDL2\")\nstring(STRIP \"${SDL2_LIBRARIES}\" SDL2_LIBRARIES)\n\nif(NOT TARGET SDL2::SDL2)\n  # Remove -lSDL2 as that is handled by CMake, note the space at the end so it does not replace e.g. -lSDL2main This may require \"libdir\" beeing set (from above)\n  string(REPLACE \"-lSDL2 \" \"\" SDL2_EXTRA_LINK_FLAGS \"-Wl,-rpath,${libdir} -Wl,--enable-new-dtags -lSDL2 \")\n  string(STRIP \"${SDL2_EXTRA_LINK_FLAGS}\" SDL2_EXTRA_LINK_FLAGS)\n  string(REPLACE \"-lSDL2 \" \"\" SDL2_EXTRA_LINK_FLAGS_STATIC \" -Wl,--no-undefined -lm -liconv -ldl -lpthread -lrt \")\n  string(STRIP \"${SDL2_EXTRA_LINK_FLAGS_STATIC}\" SDL2_EXTRA_LINK_FLAGS_STATIC)\n\n  add_library(SDL2::SDL2 SHARED IMPORTED)\n  set_target_properties(SDL2::SDL2 PROPERTIES INTERFACE_INCLUDE_DIRECTORIES \"${prefix}/include/SDL2\" IMPORTED_LINK_INTERFACE_LANGUAGES \"C\" IMPORTED_LOCATION \"${exec_prefix}/lib/${CMAKE_SHARED_LIBRARY_PREFIX}SDL2${CMAKE_SHARED_LIBRARY_SUFFIX}\" INTERFACE_LINK_LIBRARIES \"${SDL2_EXTRA_LINK_FLAGS}\")\n\n  add_library(SDL2::SDL2-static STATIC IMPORTED)\n  set_target_properties(SDL2::SDL2-static PROPERTIES INTERFACE_INCLUDE_DIRECTORIES \"${prefix}/include/SDL2\" IMPORTED_LINK_INTERFACE_LANGUAGES \"C\" IMPORTED_LOCATION \"${exec_prefix}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}SDL2${CMAKE_STATIC_LIBRARY_SUFFIX}\" INTERFACE_LINK_LIBRARIES \"${SDL2_EXTRA_LINK_FLAGS_STATIC}\")\n\n  add_library(SDL2::SDL2main STATIC IMPORTED)\n  set_target_properties(SDL2::SDL2main PROPERTIES IMPORTED_LINK_INTERFACE_LANGUAGES \"C\" IMPORTED_LOCATION \"${exec_prefix}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}SDL2main${CMAKE_STATIC_LIBRARY_SUFFIX}\")\nendif()\n",
			"file": "cmake/SDL2.cmake",
			"file_size": 1939,
			"file_write_time": 132653173921246264,
			"settings":
			{
				"buffer_size": 1939,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# Copyright (c) Matthew Rodusek Distributed under the OSI-approved MIT License. See accompanying file LICENSE.txt or https://opensource.org/licenses/MIT for details.\n\n# .rst: CCache\n# ------\n#\n# This module defines a simple way of enable CCache in a project, if the executable is discovered.\n#\n# This module defines the following variables:\n#\n# ``CCACHE_EXECUTABLE`` Path to the ``ccache`` executable, or ``NOTFOUND`` if it cannot be found.\n\nset(__FIND_ROOT_PATH_MODE_PROGRAM ${CMAKE_FIND_ROOT_PATH_MODE_PROGRAM})\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n\nfind_program(CCACHE_EXECUTABLE ccache QUIET)\nmark_as_advanced(CCACHE_EXECUTABLE)\n\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ${__FIND_ROOT_PATH_MODE_PROGRAM})\nset(__FIND_ROOT_PATH_MODE_PROGRAM)\n\n# .rst: .. command:: use_ccache\n#\n# This command finds and enables ccache, if able to, for a given project.\nmacro(use_ccache)\n  if(NOT CCACHE_EXECUTABLE)\n    message(FATAL_ERROR \"use_ccache: ccache not found.\")\n  endif()\n\n  if(CMAKE_VERSION VERSION_LESS 3.4)\n    # Prior to 3.4, had to use these properties Note: These may conflict with CTest\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CCACHE_EXECUTABLE}\")\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK \"${CCACHE_EXECUTABLE}\")\n  else()\n    # CMake 3.4 introduced 'COMPILER_LAUNCHER'\n    set(CMAKE_C_COMPILER_LAUNCHER \"${CCACHE_EXECUTABLE}\")\n    set(CMAKE_CXX_COMPILER_LAUNCHER \"${CCACHE_EXECUTABLE}\")\n  endif()\nendmacro()\n\n# .rst: .. command:: target_enable_ccache\n#\n# This command finds and enables ccache, if able to, for a given project.\n#\n# .. code-block:: cmake\n#\n# target_enable_ccache(<target>)\n#\n# The parameters are:\n#\n# ``<target>``\n# The target to enable ccache for\nfunction(target_enable_ccache target)\n  if(NOT CCACHE_EXECUTABLE)\n    message(FATAL_ERROR \"target_enable_ccache: ccache not found.\")\n  endif()\n\n  if(CMAKE_VERSION VERSION_GREATER 3.3)\n    # CMake 3.4 introduced 'COMPILER_LAUNCHER'\n    set_property(TARGET \"${target}\" PROPERTY C_COMPILER_LAUNCHER \"${CCACHE_EXECUTABLE}\")\n    set_property(TARGET \"${target}\" PROPERTY CXX_COMPILER_LAUNCHER \"${CCACHE_EXECUTABLE}\")\n  else()\n    # Prior to 3.4, had to use these properties Note: These may conflict with CTest\n    set_property(TARGET \"${target}\" PROPERTY RULE_LAUNCH_COMPILE \"${CCACHE_EXECUTABLE}\")\n    set_property(TARGET \"${target}\" PROPERTY RULE_LAUNCH_LINK \"${CCACHE_EXECUTABLE}\")\n  endif()\nendfunction()\n\nif(CCACHE_EXECUTABLE)\n  option(ENABLE_CCACHE \"Enable compiler cache\" OFF)\nendif(CCACHE_EXECUTABLE)\n\nif(ENABLE_CCACHE)\n  use_ccache()\nendif(ENABLE_CCACHE)\n",
			"file": "cmake/ccache.cmake",
			"file_size": 2552,
			"file_write_time": 132653173920766264,
			"settings":
			{
				"buffer_size": 2552,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "include(CheckLibraryExists)\ninclude(CheckTypeSize)\n\nfunction(DUMP VAR)\n  string(REGEX REPLACE \"[;\\n]\" \" \" A \"${ARGV}\")\n  foreach(VAR ${ARGV})\n    message(\"  ${VAR} = ${${VAR}}\")\n  endforeach(VAR ${ARGV})\nendfunction(DUMP VAR)\n\nfunction(CANONICALIZE OUTPUT_VAR STR)\n  string(REGEX REPLACE \"^-W\" \"WARN_\" TMP_STR \"${STR}\")\n\n  string(REGEX REPLACE \"-\" \"_\" TMP_STR \"${TMP_STR}\")\n  string(TOUPPER \"${TMP_STR}\" TMP_STR)\n\n  set(\"${OUTPUT_VAR}\" \"${TMP_STR}\" PARENT_SCOPE)\nendfunction(CANONICALIZE OUTPUT_VAR STR)\n\nmacro(unset_all)\n  foreach(VAR ${ARGN})\n    unset(\"${VAR}\" PARENT_SCOPE)\n    unset(\"${VAR}\" CACHE)\n  endforeach(VAR ${ARGN})\nendmacro(unset_all)\n\nmacro(check_size TYPE VAR)\n  check_type_size(\"${TYPE}\" CMAKE_${VAR})\n  message(STATUS \"size of ${TYPE} ${CMAKE_${VAR}}\")\nendmacro(check_size TYPE VAR)\n\nmacro(find_static_library VAR NAME)\n  find_library(${VAR} NAMES lib${NAME}.a PATHS \"${CMAKE_INSTALL_PREFIX}/lib\" NO_DEFAULT_PATH)\nendmacro()\n",
			"file": "cmake/functions.cmake",
			"file_size": 944,
			"file_write_time": 132653174821566292,
			"settings":
			{
				"buffer_size": 944,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFYCAAAAAAAAVwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgIAAAAAAABWAgAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAFcCAAAAAAAA7wIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwIAAAAAAABXAgAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAAO8CAAAAAAAAfQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wIAAAAAAADvAgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAFUCAAAAAAAAVQIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAVgIAAAAAAABWAgAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAMwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\n$"
					},
					"AgAAADMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwAAAAAAAAAzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"left_delete",
					null,
					"AQAAADQAAAAAAAAANAAAAAAAAAABAAAAJA",
					"AQAAAAAAAAABAAAANQAAAAAAAAA1AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "include(CheckCCompilerFlag)\ninclude(CheckCXXCompilerFlag)\n\nmacro(append_vars STR)\n  foreach(L ${ARGN})\n    set(LIST \"${${L}}\")\n    if(NOT LIST MATCHES \".*${STR}.*\")\n      if(\"${LIST}\" STREQUAL \"\")\n        set(LIST \"${STR}\")\n      else(\"${LIST}\" STREQUAL \"\")\n        set(LIST \"${LIST} ${STR}\")\n      endif(\"${LIST}\" STREQUAL \"\")\n\n    endif(NOT LIST MATCHES \".*${STR}.*\")\n    string(REPLACE \";\" \" \" LIST \"${LIST}\")\n    # message(\"New value for ${L}: ${LIST}\")\n    set(\"${L}\" \"${LIST}\" PARENT_SCOPE)\n  endforeach(L ${ARGN})\nendmacro(append_vars STR)\n\nfunction(check_flag FLAG VAR)\n  if(NOT VAR OR VAR STREQUAL \"\")\n    string(TOUPPER \"${FLAG}\" TMP)\n    string(REGEX REPLACE \"[^0-9A-Za-z]\" _ VAR \"${TMP}\")\n  endif(NOT VAR OR VAR STREQUAL \"\")\n  set(CMAKE_REQUIRED_QUIET ON)\n  check_c_compiler_flag(\"${FLAG}\" \"${VAR}\")\n  set(CMAKE_REQUIRED_QUIET OFF)\n\n  set(RESULT \"${${VAR}}\")\n  if(RESULT)\n    append_vars(${FLAG} ${ARGN})\n    message(STATUS \"Compiler flag ${FLAG} ... supported\")\n    # message(\"append_vars(${FLAG} ${ARGN})\")\n  endif(RESULT)\nendfunction(check_flag FLAG VAR)\n\nmacro(check_flags FLAGS)\n  message(\"Checking flags ${FLAGS} ${ARGN}\")\n  foreach(FLAG ${FLAGS})\n    check_flag(${FLAG} \"\" ${ARGN})\n  endforeach(FLAG ${FLAGS})\nendmacro(check_flags FLAGS)\n\nmacro(check_nowarn_flag FLAG)\n  canonicalize(VARNAME \"${FLAG}\")\n  check_c_compiler_flag(\"${FLAG}\" \"${VARNAME}\")\n  # dump(${VARNAME})\n\n  if(${VARNAME})\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${FLAG}\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${FLAG}\")\n\n  endif(${VARNAME})\nendmacro(check_nowarn_flag FLAG)\n\nmacro(ADD_NOWARN_FLAGS)\n  string(REGEX REPLACE \" -Wall\" \"\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n  string(REGEX REPLACE \" -Wall\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n\n  nowarn_flag(-Wno-unused-value)\n  nowarn_flag(-Wno-unused-variable)\n\n  if(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \".*Clang.*\")\n    nowarn_flag(-Wno-deprecated-anon-enum-enum-conversion)\n    nowarn_flag(-Wno-extern-c-compat)\n    nowarn_flag(-Wno-implicit-int-float-conversion)\n    nowarn_flag(-Wno-deprecated-enum-enum-conversion)\n  endif(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \".*Clang.*\")\n\n  # dump(CMAKE_C_FLAGS CMAKE_CXX_FLAGS) dump(CMAKE_CXX_FLAGS_DEBUG)\nendmacro(ADD_NOWARN_FLAGS)\n\nmacro(check_pic_flag)\n  check_cxx_compiler_flag(\"-fPIC\" F_PIC)\n  if(F_PIC)\n    set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -fPIC\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -fPIC\")\n  endif(F_PIC)\nendmacro(check_pic_flag)\n\nmacro(check_opt_none_flag)\n  check_c_compiler_flag(\"-O0\" OPT_C_OPT_NONE)\n  check_cxx_compiler_flag(\"-O0\" OPT_CXX_OPT_NONE)\n  if(OPT_C_OPT_NONE)\n    if(NOT \"${CMAKE_C_FLAGS_DEBUG}\" MATCHES \"-O0\")\n      set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -O0\" CACHE STRING \"C compiler options\" FORCE)\n    endif(NOT \"${CMAKE_C_FLAGS_DEBUG}\" MATCHES \"-O0\")\n  endif(OPT_C_OPT_NONE)\n  if(OPT_CXX_OPT_NONE)\n    if(NOT \"${CMAKE_CXX_FLAGS_DEBUG}\" MATCHES \"-O0\")\n      set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -O0\" CACHE STRING \"C++ compiler options\" FORCE)\n    endif(NOT \"${CMAKE_CXX_FLAGS_DEBUG}\" MATCHES \"-O0\")\n  endif(OPT_CXX_OPT_NONE)\nendmacro(check_opt_none_flag)\n\nmacro(check_debug_gdb_flag)\n  check_c_compiler_flag(\"-ggdb\" OPT_C_G_GDB)\n  check_cxx_compiler_flag(\"-ggdb\" OPT_CXX_G_GDB)\n  if(OPT_C_G_GDB)\n    if(NOT \"${CMAKE_C_FLAGS_DEBUG}\" MATCHES \"-ggdb\")\n      set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -ggdb\" CACHE STRING \"C compiler options\" FORCE)\n    endif(NOT \"${CMAKE_C_FLAGS_DEBUG}\" MATCHES \"-ggdb\")\n  endif(OPT_C_G_GDB)\n  if(OPT_CXX_G_GDB)\n    if(NOT \"${CMAKE_CXX_FLAGS_DEBUG}\" MATCHES \"-ggdb\")\n      set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -ggdb\" CACHE STRING \"C++ compiler options\" FORCE)\n    endif(NOT \"${CMAKE_CXX_FLAGS_DEBUG}\" MATCHES \"-ggdb\")\n  endif(OPT_CXX_G_GDB)\nendmacro(check_debug_gdb_flag)\n\nmacro(check_cxx_standard_flag)\n  foreach(CXX_STANDARD c++20 c++17 c++14 c++11)\n    string(REPLACE \"c++\" \"CPLUSPLUS\" CXX_STANDARD_NUM \"${CXX_STANDARD}\")\n    set(CMAKE_REQUIRED_QUIET TRUE)\n    check_cxx_compiler_flag(\"-std=${CXX_STANDARD}\" CXX_STANDARD_${CXX_STANDARD_NUM})\n    set(CMAKE_REQUIRED_QUIET FALSE)\n    if(CXX_STANDARD_${CXX_STANDARD_NUM})\n      string(REGEX REPLACE \"\\\\+\" \"x\" CXX_STANDARD_NAME \"${CXX_STANDARD_VALUE}\")\n      string(TOUPPER \"${CXX_STANDARD_NAME}\" CXX_STANDARD_NAME)\n      string(REGEX REPLACE \"CXX\" \"\" CXX_STANDARD_VERSION \"${CXX_STANDARD_NAME}\")\n      message(\"CXX_STANDARD_NAME = ${CXX_STANDARD_NAME}\")\n      message(\"CXX_STANDARD_VERSION = ${CXX_STANDARD_VERSION}\")\n\n      if(CXX_STANDARD_NAME)\n        add_definitions(-D\"${CXX_STANDARD_NAME}\")\n      endif(CXX_STANDARD_NAME)\n\n      set(CXX_STANDARD_VALUE \"${CXX_STANDARD}\" CACHE STRING \"C++ standard\" FORCE)\n      set(CXX_STANDARD_FLAG \"-std=${CXX_STANDARD}\" CACHE STRING \"C++ standard argument\" FORCE)\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${CXX_STANDARD_FLAG}\")\n      break()\n    endif(CXX_STANDARD_${CXX_STANDARD_NUM})\n  endforeach()\n\n  string(REGEX REPLACE \"c\\\\+\\\\+\" \"\" CXX_STANDARD_VERSION \"${CXX_STANDARD_VALUE}\")\n  add_definitions(-DCXX_STANDARD=${CXX_STANDARD_VERSION})\n\n  message(\"C++ standard: ${CXX_STANDARD_VALUE}\")\nendmacro(check_cxx_standard_flag)\n\n\nmacro(check_nowarn_flag FLAG)\n  canonicalize(VARNAME \"${FLAG}\")\n  check_c_compiler_flag(\"${FLAG}\" \"${VARNAME}\")\n  # dump(${VARNAME})\n\n  if(${VARNAME})\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${FLAG}\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${FLAG}\")\n\n  endif(${VARNAME})\nendmacro(check_nowarn_flag FLAG)\n",
			"file": "cmake/check-flags.cmake",
			"file_size": 5451,
			"file_write_time": 132653174935166295,
			"settings":
			{
				"buffer_size": 5451,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\nmacro"
					},
					"BgAAAG0JAAAAAAAAbgkAAAAAAAAAAAAAbgkAAAAAAABvCQAAAAAAAAAAAABvCQAAAAAAAHAJAAAAAAAAAAAAAHAJAAAAAAAAcQkAAAAAAAAAAAAAcQkAAAAAAAByCQAAAAAAAAAAAAByCQAAAAAAAHMJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQkAAAAAAABtCQAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHMJAAAAAAAAdQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwkAAAAAAABzCQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"left_delete",
					null,
					"AQAAAHQJAAAAAAAAdAkAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAdQkAAAAAAAB1CQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "chec"
					},
					"BAAAAHQJAAAAAAAAdQkAAAAAAAAAAAAAdQkAAAAAAAB2CQAAAAAAAAAAAAB2CQAAAAAAAHcJAAAAAAAAAAAAAHcJAAAAAAAAeAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAkAAAAAAAB0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAHcJAAAAAAAAdwkAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAeAkAAAAAAAB4CQAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "ck_opt_o0"
					},
					"CQAAAHcJAAAAAAAAeAkAAAAAAAAAAAAAeAkAAAAAAAB5CQAAAAAAAAAAAAB5CQAAAAAAAHoJAAAAAAAAAAAAAHoJAAAAAAAAewkAAAAAAAAAAAAAewkAAAAAAAB8CQAAAAAAAAAAAAB8CQAAAAAAAH0JAAAAAAAAAAAAAH0JAAAAAAAAfgkAAAAAAAAAAAAAfgkAAAAAAAB/CQAAAAAAAAAAAAB/CQAAAAAAAIAJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwkAAAAAAAB3CQAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					2,
					"left_delete",
					null,
					"AgAAAH8JAAAAAAAAfwkAAAAAAAABAAAAMH4JAAAAAAAAfgkAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAgAkAAAAAAACACQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "none_flag)"
					},
					"CgAAAH4JAAAAAAAAfwkAAAAAAAAAAAAAfwkAAAAAAACACQAAAAAAAAAAAACACQAAAAAAAIEJAAAAAAAAAAAAAIEJAAAAAAAAggkAAAAAAAAAAAAAggkAAAAAAACDCQAAAAAAAAAAAACDCQAAAAAAAIQJAAAAAAAAAAAAAIQJAAAAAAAAhQkAAAAAAAAAAAAAhQkAAAAAAACGCQAAAAAAAAAAAACGCQAAAAAAAIcJAAAAAAAAAAAAAIcJAAAAAAAAiAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgkAAAAAAAB+CQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIgJAAAAAAAAiQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAkAAAAAAACICQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"paste",
					null,
					"AQAAAIkJAAAAAAAAFQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQkAAAAAAACJCQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABUMAAAAAAAAFgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQwAAAAAAAAVDAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"paste",
					null,
					"AQAAABYMAAAAAAAAMQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgwAAAAAAAAWDAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "end"
					},
					"AwAAABYMAAAAAAAAFwwAAAAAAAAAAAAAFwwAAAAAAAAYDAAAAAAAAAAAAAAYDAAAAAAAABkMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgwAAAAAAAAWDAAAAAAAAAAAAAAAAAAA"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\n\nmacro"
					},
					"BwAAADQMAAAAAAAANQwAAAAAAAAAAAAANQwAAAAAAAA2DAAAAAAAAAAAAAA2DAAAAAAAADcMAAAAAAAAAAAAADcMAAAAAAAAOAwAAAAAAAAAAAAAOAwAAAAAAAA5DAAAAAAAAAAAAAA5DAAAAAAAADoMAAAAAAAAAAAAADoMAAAAAAAAOwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAwAAAAAAAA0DAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADsMAAAAAAAAPQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwwAAAAAAAA7DAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAADwMAAAAAAAAPQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAwAAAAAAAA8DAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAADwMAAAAAAAAPAwAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAPQwAAAAAAAA9DAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "cjhec"
					},
					"BQAAADwMAAAAAAAAPQwAAAAAAAAAAAAAPQwAAAAAAAA+DAAAAAAAAAAAAAA+DAAAAAAAAD8MAAAAAAAAAAAAAD8MAAAAAAAAQAwAAAAAAAAAAAAAQAwAAAAAAABBDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAwAAAAAAAA8DAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					4,
					"left_delete",
					null,
					"BAAAAEAMAAAAAAAAQAwAAAAAAAABAAAAYz8MAAAAAAAAPwwAAAAAAAABAAAAZT4MAAAAAAAAPgwAAAAAAAABAAAAaD0MAAAAAAAAPQwAAAAAAAABAAAAag",
					"AQAAAAAAAAABAAAAQQwAAAAAAABBDAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "heck_debug"
					},
					"CgAAAD0MAAAAAAAAPgwAAAAAAAAAAAAAPgwAAAAAAAA/DAAAAAAAAAAAAAA/DAAAAAAAAEAMAAAAAAAAAAAAAEAMAAAAAAAAQQwAAAAAAAAAAAAAQQwAAAAAAABCDAAAAAAAAAAAAABCDAAAAAAAAEMMAAAAAAAAAAAAAEMMAAAAAAAARAwAAAAAAAAAAAAARAwAAAAAAABFDAAAAAAAAAAAAABFDAAAAAAAAEYMAAAAAAAAAAAAAEYMAAAAAAAARwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQwAAAAAAAA9DAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "_gdb_flag"
					},
					"CQAAAEcMAAAAAAAASAwAAAAAAAAAAAAASAwAAAAAAABJDAAAAAAAAAAAAABJDAAAAAAAAEoMAAAAAAAAAAAAAEoMAAAAAAAASwwAAAAAAAAAAAAASwwAAAAAAABMDAAAAAAAAAAAAABMDAAAAAAAAE0MAAAAAAAAAAAAAE0MAAAAAAAATgwAAAAAAAAAAAAATgwAAAAAAABPDAAAAAAAAAAAAABPDAAAAAAAAFAMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwwAAAAAAABHDAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFEMAAAAAAAAUgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQwAAAAAAABRDAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"paste",
					null,
					"AQAAAFIMAAAAAAAA3w4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgwAAAAAAABSDAAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "end"
					},
					"AwAAAN8OAAAAAAAA4A4AAAAAAAAAAAAA4A4AAAAAAADhDgAAAAAAAAAAAADhDgAAAAAAAOIOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3w4AAAAAAADfDgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"paste",
					null,
					"AQAAAOIOAAAAAAAA/g4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4g4AAAAAAADiDgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD+DgAAaW5jbHVkZShDaGVja0NDb21waWxlckZsYWcpCgptYWNybyhhcHBlbmRfdmFycyBTVFIpCiAgZm9yZWFjaChMICR7QVJHTn0pCiAgICBzZXQoTElTVCAiJHske0x9fSIpCiAgICBpZihOT1QgTElTVCBNQVRDSEVTICIuKiR7U1RSfS4qIikKICAgICAgaWYoIiR7TElTVH0iIFNUUkVRVUFMICIiKQogICAgICAgIHNldChMSVNUICIke1NUUn0iKQogICAgICBlbHNlKCIke0xJU1R9IiBTVFJFUVVBTCAiIikKICAgICAgICBzZXQoTElTVCAiJHtMSVNUfSAke1NUUn0iKQogICAgICBlbmRpZigiJHtMSVNUfSIgU1RSRVFVQUwgIiIpCgogICAgZW5kaWYoTk9UIExJU1QgTUFUQ0hFUyAiLioke1NUUn0uKiIpCiAgICBzdHJpbmcoUkVQTEFDRSAiOyIgIiAiIExJU1QgIiR7TElTVH0iKQogICAgIyBtZXNzYWdlKCJOZXcgdmFsdWUgZm9yICR7TH06ICR7TElTVH0iKQogICAgc2V0KCIke0x9IiAiJHtMSVNUfSIgUEFSRU5UX1NDT1BFKQogIGVuZGZvcmVhY2goTCAke0FSR059KQplbmRtYWNybyhhcHBlbmRfdmFycyBTVFIpCgpmdW5jdGlvbihjaGVja19mbGFnIEZMQUcgVkFSKQogIGlmKE5PVCBWQVIgT1IgVkFSIFNUUkVRVUFMICIiKQogICAgc3RyaW5nKFRPVVBQRVIgIiR7RkxBR30iIFRNUCkKICAgIHN0cmluZyhSRUdFWCBSRVBMQUNFICJbXjAtOUEtWmEtel0iIF8gVkFSICIke1RNUH0iKQogIGVuZGlmKE5PVCBWQVIgT1IgVkFSIFNUUkVRVUFMICIiKQogIHNldChDTUFLRV9SRVFVSVJFRF9RVUlFVCBPTikKICBjaGVja19jX2NvbXBpbGVyX2ZsYWcoIiR7RkxBR30iICIke1ZBUn0iKQogIHNldChDTUFLRV9SRVFVSVJFRF9RVUlFVCBPRkYpCgogIHNldChSRVNVTFQgIiR7JHtWQVJ9fSIpCiAgaWYoUkVTVUxUKQogICAgYXBwZW5kX3ZhcnMoJHtGTEFHfSAke0FSR059KQogICAgbWVzc2FnZShTVEFUVVMgIkNvbXBpbGVyIGZsYWcgJHtGTEFHfSAuLi4gc3VwcG9ydGVkIikKICAgICMgbWVzc2FnZSgiYXBwZW5kX3ZhcnMoJHtGTEFHfSAke0FSR059KSIpCiAgZW5kaWYoUkVTVUxUKQplbmRmdW5jdGlvbihjaGVja19mbGFnIEZMQUcgVkFSKQoKbWFjcm8oY2hlY2tfZmxhZ3MgRkxBR1MpCiAgbWVzc2FnZSgiQ2hlY2tpbmcgZmxhZ3MgJHtGTEFHU30gJHtBUkdOfSIpCiAgZm9yZWFjaChGTEFHICR7RkxBR1N9KQogICAgY2hlY2tfZmxhZygke0ZMQUd9ICIiICR7QVJHTn0pCiAgZW5kZm9yZWFjaChGTEFHICR7RkxBR1N9KQplbmRtYWNybyhjaGVja19mbGFncyBGTEFHUykKCm1hY3JvKE5PV0FSTl9GTEFHIEZMQUcpCiAgY2Fub25pY2FsaXplKFZBUk5BTUUgIiR7RkxBR30iKQogIGNoZWNrX2NfY29tcGlsZXJfZmxhZygiJHtGTEFHfSIgIiR7VkFSTkFNRX0iKQogICNkdW1wKCR7VkFSTkFNRX0pCgogIGlmKCR7VkFSTkFNRX0pCiAgICBzZXQoQ01BS0VfQ19GTEFHUyAiJHtDTUFLRV9DX0ZMQUdTfSAke0ZMQUd9IikKICAgIHNldChDTUFLRV9DWFhfRkxBR1MgIiR7Q01BS0VfQ1hYX0ZMQUdTfSAke0ZMQUd9IikKCiAgZW5kaWYoJHtWQVJOQU1FfSkKZW5kbWFjcm8oTk9XQVJOX0ZMQUcgRkxBRykKCm1hY3JvKEFERF9OT1dBUk5fRkxBR1MpCiAgc3RyaW5nKFJFR0VYIFJFUExBQ0UgIiAtV2FsbCIgIiIgQ01BS0VfQ19GTEFHUyAiJHtDTUFLRV9DX0ZMQUdTfSIpCiAgc3RyaW5nKFJFR0VYIFJFUExBQ0UgIiAtV2FsbCIgIiIgQ01BS0VfQ1hYX0ZMQUdTICIke0NNQUtFX0NYWF9GTEFHU30iKQoKICBub3dhcm5fZmxhZygtV25vLXVudXNlZC12YWx1ZSkKICBub3dhcm5fZmxhZygtV25vLXVudXNlZC12YXJpYWJsZSkKCiAgaWYoIiR7Q01BS0VfQ1hYX0NPTVBJTEVSX0lEfSIgTUFUQ0hFUyAiLipDbGFuZy4qIikKICAgIG5vd2Fybl9mbGFnKC1Xbm8tZGVwcmVjYXRlZC1hbm9uLWVudW0tZW51bS1jb252ZXJzaW9uKQogICAgbm93YXJuX2ZsYWcoLVduby1leHRlcm4tYy1jb21wYXQpCiAgICBub3dhcm5fZmxhZygtV25vLWltcGxpY2l0LWludC1mbG9hdC1jb252ZXJzaW9uKQogICAgbm93YXJuX2ZsYWcoLVduby1kZXByZWNhdGVkLWVudW0tZW51bS1jb252ZXJzaW9uKQogIGVuZGlmKCIke0NNQUtFX0NYWF9DT01QSUxFUl9JRH0iIE1BVENIRVMgIi4qQ2xhbmcuKiIpCgogICNkdW1wKENNQUtFX0NfRkxBR1MgQ01BS0VfQ1hYX0ZMQUdTKQogICNkdW1wKENNQUtFX0NYWF9GTEFHU19ERUJVRykKZW5kbWFjcm8oQUREX05PV0FSTl9GTEFHUykKCgptYWNybyhjaGVja19waWNfZmxhZykKICBjaGVja19jeHhfY29tcGlsZXJfZmxhZygiLWZQSUMiIEZfUElDKQogIGlmKEZfUElDKQogICAgc2V0KENNQUtFX0NfRkxBR1NfREVCVUcgIiR7Q01BS0VfQ19GTEFHU19ERUJVR30gLWZQSUMiKQogICAgc2V0KENNQUtFX0NYWF9GTEFHU19ERUJVRyAiJHtDTUFLRV9DWFhfRkxBR1NfREVCVUd9IC1mUElDIikKICBlbmRpZihGX1BJQykKZW5kbWFjcm8oY2hlY2tfcGljX2ZsYWcpCgptYWNybyhjaGVja19vcHRfbm9uZV9mbGFnKQpjaGVja19jX2NvbXBpbGVyX2ZsYWcoIi1PMCIgT1BUX0NfT1BUX05PTkUpCmNoZWNrX2N4eF9jb21waWxlcl9mbGFnKCItTzAiIE9QVF9DWFhfT1BUX05PTkUpCmlmKE9QVF9DX09QVF9OT05FKQogIGlmKE5PVCAiJHtDTUFLRV9DX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLU8wIikKICAgIHNldChDTUFLRV9DX0ZMQUdTX0RFQlVHICIke0NNQUtFX0NfRkxBR1NfREVCVUd9IC1PMCIgQ0FDSEUgU1RSSU5HICJDIGNvbXBpbGVyIG9wdGlvbnMiIEZPUkNFKQogIGVuZGlmKE5PVCAiJHtDTUFLRV9DX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLU8wIikKZW5kaWYoT1BUX0NfT1BUX05PTkUpCmlmKE9QVF9DWFhfT1BUX05PTkUpCiAgaWYoTk9UICIke0NNQUtFX0NYWF9GTEFHU19ERUJVR30iIE1BVENIRVMgIi1PMCIpCiAgICBzZXQoQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHICIke0NNQUtFX0NYWF9GTEFHU19ERUJVR30gLU8wIiBDQUNIRSBTVFJJTkcgIkMrKyBjb21waWxlciBvcHRpb25zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRk9SQ0UpCiAgZW5kaWYoTk9UICIke0NNQUtFX0NYWF9GTEFHU19ERUJVR30iIE1BVENIRVMgIi1PMCIpCmVuZGlmKE9QVF9DWFhfT1BUX05PTkUpCmVuZG1hY3JvKGNoZWNrX29wdF9ub25lX2ZsYWcpCgoKbWFjcm8oY2hlY2tfZGVidWdfZ2RiX2ZsYWcpCmNoZWNrX2NfY29tcGlsZXJfZmxhZygiLWdnZGIiIE9QVF9DX0dfR0RCKQpjaGVja19jeHhfY29tcGlsZXJfZmxhZygiLWdnZGIiIE9QVF9DWFhfR19HREIpCmlmKE9QVF9DX0dfR0RCKQogIGlmKE5PVCAiJHtDTUFLRV9DX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLWdnZGIiKQogICAgc2V0KENNQUtFX0NfRkxBR1NfREVCVUcgIiR7Q01BS0VfQ19GTEFHU19ERUJVR30gLWdnZGIiIENBQ0hFIFNUUklORyAiQyBjb21waWxlciBvcHRpb25zIiBGT1JDRSkKICBlbmRpZihOT1QgIiR7Q01BS0VfQ19GTEFHU19ERUJVR30iIE1BVENIRVMgIi1nZ2RiIikKZW5kaWYoT1BUX0NfR19HREIpCmlmKE9QVF9DWFhfR19HREIpCiAgaWYoTk9UICIke0NNQUtFX0NYWF9GTEFHU19ERUJVR30iIE1BVENIRVMgIi1nZ2RiIikKICAgIHNldChDTUFLRV9DWFhfRkxBR1NfREVCVUcgIiR7Q01BS0VfQ1hYX0ZMQUdTX0RFQlVHfSAtZ2dkYiIgQ0FDSEUgU1RSSU5HICJDKysgY29tcGlsZXIgb3B0aW9ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRk9SQ0UpCiAgZW5kaWYoTk9UICIke0NNQUtFX0NYWF9GTEFHU19ERUJVR30iIE1BVENIRVMgIi1nZ2RiIikKZW5kaWYoT1BUX0NYWF9HX0dEQikKZW5kbWFjcm8oY2hlY2tfZGVidWdfZ2RiX2ZsYWcpCgAAAAAAAAAAow4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QoAAAAAAAD1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "\nmacro"
					},
					"BgAAAKMOAAAAAAAApA4AAAAAAAAAAAAApA4AAAAAAAClDgAAAAAAAAAAAAClDgAAAAAAAKYOAAAAAAAAAAAAAKYOAAAAAAAApw4AAAAAAAAAAAAApw4AAAAAAACoDgAAAAAAAAAAAACoDgAAAAAAAKkOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAow4AAAAAAACjDgAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKkOAAAAAAAAqw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQ4AAAAAAACpDgAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "check_cxyx_"
					},
					"CwAAAKoOAAAAAAAAqw4AAAAAAAAAAAAAqw4AAAAAAACsDgAAAAAAAAAAAACsDgAAAAAAAK0OAAAAAAAAAAAAAK0OAAAAAAAArg4AAAAAAAAAAAAArg4AAAAAAACvDgAAAAAAAAAAAACvDgAAAAAAALAOAAAAAAAAAAAAALAOAAAAAAAAsQ4AAAAAAAAAAAAAsQ4AAAAAAACyDgAAAAAAAAAAAACyDgAAAAAAALMOAAAAAAAAAAAAALMOAAAAAAAAtA4AAAAAAAAAAAAAtA4AAAAAAAC1DgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqg4AAAAAAACqDgAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					3,
					"left_delete",
					null,
					"AwAAALQOAAAAAAAAtA4AAAAAAAABAAAAX7MOAAAAAAAAsw4AAAAAAAABAAAAeLIOAAAAAAAAsg4AAAAAAAABAAAAeQ",
					"AQAAAAAAAAABAAAAtQ4AAAAAAAC1DgAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "x_standard_"
					},
					"CwAAALIOAAAAAAAAsw4AAAAAAAAAAAAAsw4AAAAAAAC0DgAAAAAAAAAAAAC0DgAAAAAAALUOAAAAAAAAAAAAALUOAAAAAAAAtg4AAAAAAAAAAAAAtg4AAAAAAAC3DgAAAAAAAAAAAAC3DgAAAAAAALgOAAAAAAAAAAAAALgOAAAAAAAAuQ4AAAAAAAAAAAAAuQ4AAAAAAAC6DgAAAAAAAAAAAAC6DgAAAAAAALsOAAAAAAAAAAAAALsOAAAAAAAAvA4AAAAAAAAAAAAAvA4AAAAAAAC9DgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsg4AAAAAAACyDgAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "flag"
					},
					"BAAAAL0OAAAAAAAAvg4AAAAAAAAAAAAAvg4AAAAAAAC/DgAAAAAAAAAAAAC/DgAAAAAAAMAOAAAAAAAAAAAAAMAOAAAAAAAAwQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQ4AAAAAAAC9DgAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMIOAAAAAAAAww4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwg4AAAAAAADCDgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"paste",
					null,
					"AQAAAMMOAAAAAAAAmRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAww4AAAAAAADDDgAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "\nendmacro"
					},
					"CQAAAJkTAAAAAAAAmhMAAAAAAAAAAAAAmhMAAAAAAACbEwAAAAAAAAAAAACbEwAAAAAAAJwTAAAAAAAAAAAAAJwTAAAAAAAAnRMAAAAAAAAAAAAAnRMAAAAAAACeEwAAAAAAAAAAAACeEwAAAAAAAJ8TAAAAAAAAAAAAAJ8TAAAAAAAAoBMAAAAAAAAAAAAAoBMAAAAAAAChEwAAAAAAAAAAAAChEwAAAAAAAKITAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmRMAAAAAAACZEwAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKITAAAAAAAApBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAohMAAAAAAACiEwAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "check_cxx"
					},
					"CQAAAKMTAAAAAAAApBMAAAAAAAAAAAAApBMAAAAAAAClEwAAAAAAAAAAAAClEwAAAAAAAKYTAAAAAAAAAAAAAKYTAAAAAAAApxMAAAAAAAAAAAAApxMAAAAAAACoEwAAAAAAAAAAAACoEwAAAAAAAKkTAAAAAAAAAAAAAKkTAAAAAAAAqhMAAAAAAAAAAAAAqhMAAAAAAACrEwAAAAAAAAAAAACrEwAAAAAAAKwTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoxMAAAAAAACjEwAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert_completion",
					{
						"completion": "check_cxx_standard_flag",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "check_cxx_standard_flag"
					},
					"AgAAAKMTAAAAAAAAoxMAAAAAAAAJAAAAY2hlY2tfY3h4oxMAAAAAAAC6EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArBMAAAAAAACsEwAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"indent",
					null,
					"FwAAAMMOAAAAAAAAxQ4AAAAAAAAAAAAA8w4AAAAAAAD1DgAAAAAAAAAAAAA8DwAAAAAAAD4PAAAAAAAAAAAAAF8PAAAAAAAAYQ8AAAAAAAAAAAAAtA8AAAAAAAC2DwAAAAAAAAAAAADYDwAAAAAAANoPAAAAAAAAAAAAAAEQAAAAAAAAAxAAAAAAAAAAAAAAURAAAAAAAABTEAAAAAAAAAAAAACQEAAAAAAAAJIQAAAAAAAAAAAAAOEQAAAAAAAA4xAAAAAAAAAAAAAAGxEAAAAAAAAdEQAAAAAAAAAAAABcEQAAAAAAAF4RAAAAAAAAAAAAAHgRAAAAAAAAehEAAAAAAAAAAAAAqhEAAAAAAACsEQAAAAAAAAAAAADKEQAAAAAAAMwRAAAAAAAAAAAAABwSAAAAAAAAHhIAAAAAAAAAAAAAexIAAAAAAAB9EgAAAAAAAAAAAADAEgAAAAAAAMISAAAAAAAAAAAAAM4SAAAAAAAA0BIAAAAAAAAAAAAA+hIAAAAAAAD8EgAAAAAAAAAAAAAKEwAAAAAAAAwTAAAAAAAAAAAAAFwTAAAAAAAAXhMAAAAAAAAAAAAAlxMAAAAAAACZEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmRMAAAAAAADDDgAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAOkTAAAAAAAA6hMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6RMAAAAAAADpEwAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOoTAAAAAAAA6xMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6hMAAAAAAADqEwAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					2,
					"left_delete",
					null,
					"AgAAAOoTAAAAAAAA6hMAAAAAAAABAAAACukTAAAAAAAA6RMAAAAAAAABAAAAJA",
					"AQAAAAAAAAABAAAA6xMAAAAAAADrEwAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAOkTAAAAAAAA6hMAAAAAAAAAAAAA6hMAAAAAAADrEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6RMAAAAAAADpEwAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"paste",
					null,
					"AQAAAOsTAAAAAAAAFRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6xMAAAAAAADrEwAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAVFQAAaW5jbHVkZShDaGVja0NDb21waWxlckZsYWcpCgptYWNybyhhcHBlbmRfdmFycyBTVFIpCiAgZm9yZWFjaChMICR7QVJHTn0pCiAgICBzZXQoTElTVCAiJHske0x9fSIpCiAgICBpZihOT1QgTElTVCBNQVRDSEVTICIuKiR7U1RSfS4qIikKICAgICAgaWYoIiR7TElTVH0iIFNUUkVRVUFMICIiKQogICAgICAgIHNldChMSVNUICIke1NUUn0iKQogICAgICBlbHNlKCIke0xJU1R9IiBTVFJFUVVBTCAiIikKICAgICAgICBzZXQoTElTVCAiJHtMSVNUfSAke1NUUn0iKQogICAgICBlbmRpZigiJHtMSVNUfSIgU1RSRVFVQUwgIiIpCgogICAgZW5kaWYoTk9UIExJU1QgTUFUQ0hFUyAiLioke1NUUn0uKiIpCiAgICBzdHJpbmcoUkVQTEFDRSAiOyIgIiAiIExJU1QgIiR7TElTVH0iKQogICAgIyBtZXNzYWdlKCJOZXcgdmFsdWUgZm9yICR7TH06ICR7TElTVH0iKQogICAgc2V0KCIke0x9IiAiJHtMSVNUfSIgUEFSRU5UX1NDT1BFKQogIGVuZGZvcmVhY2goTCAke0FSR059KQplbmRtYWNybyhhcHBlbmRfdmFycyBTVFIpCgpmdW5jdGlvbihjaGVja19mbGFnIEZMQUcgVkFSKQogIGlmKE5PVCBWQVIgT1IgVkFSIFNUUkVRVUFMICIiKQogICAgc3RyaW5nKFRPVVBQRVIgIiR7RkxBR30iIFRNUCkKICAgIHN0cmluZyhSRUdFWCBSRVBMQUNFICJbXjAtOUEtWmEtel0iIF8gVkFSICIke1RNUH0iKQogIGVuZGlmKE5PVCBWQVIgT1IgVkFSIFNUUkVRVUFMICIiKQogIHNldChDTUFLRV9SRVFVSVJFRF9RVUlFVCBPTikKICBjaGVja19jX2NvbXBpbGVyX2ZsYWcoIiR7RkxBR30iICIke1ZBUn0iKQogIHNldChDTUFLRV9SRVFVSVJFRF9RVUlFVCBPRkYpCgogIHNldChSRVNVTFQgIiR7JHtWQVJ9fSIpCiAgaWYoUkVTVUxUKQogICAgYXBwZW5kX3ZhcnMoJHtGTEFHfSAke0FSR059KQogICAgbWVzc2FnZShTVEFUVVMgIkNvbXBpbGVyIGZsYWcgJHtGTEFHfSAuLi4gc3VwcG9ydGVkIikKICAgICMgbWVzc2FnZSgiYXBwZW5kX3ZhcnMoJHtGTEFHfSAke0FSR059KSIpCiAgZW5kaWYoUkVTVUxUKQplbmRmdW5jdGlvbihjaGVja19mbGFnIEZMQUcgVkFSKQoKbWFjcm8oY2hlY2tfZmxhZ3MgRkxBR1MpCiAgbWVzc2FnZSgiQ2hlY2tpbmcgZmxhZ3MgJHtGTEFHU30gJHtBUkdOfSIpCiAgZm9yZWFjaChGTEFHICR7RkxBR1N9KQogICAgY2hlY2tfZmxhZygke0ZMQUd9ICIiICR7QVJHTn0pCiAgZW5kZm9yZWFjaChGTEFHICR7RkxBR1N9KQplbmRtYWNybyhjaGVja19mbGFncyBGTEFHUykKCm1hY3JvKE5PV0FSTl9GTEFHIEZMQUcpCiAgY2Fub25pY2FsaXplKFZBUk5BTUUgIiR7RkxBR30iKQogIGNoZWNrX2NfY29tcGlsZXJfZmxhZygiJHtGTEFHfSIgIiR7VkFSTkFNRX0iKQogICMgZHVtcCgke1ZBUk5BTUV9KQoKICBpZigke1ZBUk5BTUV9KQogICAgc2V0KENNQUtFX0NfRkxBR1MgIiR7Q01BS0VfQ19GTEFHU30gJHtGTEFHfSIpCiAgICBzZXQoQ01BS0VfQ1hYX0ZMQUdTICIke0NNQUtFX0NYWF9GTEFHU30gJHtGTEFHfSIpCgogIGVuZGlmKCR7VkFSTkFNRX0pCmVuZG1hY3JvKE5PV0FSTl9GTEFHIEZMQUcpCgptYWNybyhBRERfTk9XQVJOX0ZMQUdTKQogIHN0cmluZyhSRUdFWCBSRVBMQUNFICIgLVdhbGwiICIiIENNQUtFX0NfRkxBR1MgIiR7Q01BS0VfQ19GTEFHU30iKQogIHN0cmluZyhSRUdFWCBSRVBMQUNFICIgLVdhbGwiICIiIENNQUtFX0NYWF9GTEFHUyAiJHtDTUFLRV9DWFhfRkxBR1N9IikKCiAgbm93YXJuX2ZsYWcoLVduby11bnVzZWQtdmFsdWUpCiAgbm93YXJuX2ZsYWcoLVduby11bnVzZWQtdmFyaWFibGUpCgogIGlmKCIke0NNQUtFX0NYWF9DT01QSUxFUl9JRH0iIE1BVENIRVMgIi4qQ2xhbmcuKiIpCiAgICBub3dhcm5fZmxhZygtV25vLWRlcHJlY2F0ZWQtYW5vbi1lbnVtLWVudW0tY29udmVyc2lvbikKICAgIG5vd2Fybl9mbGFnKC1Xbm8tZXh0ZXJuLWMtY29tcGF0KQogICAgbm93YXJuX2ZsYWcoLVduby1pbXBsaWNpdC1pbnQtZmxvYXQtY29udmVyc2lvbikKICAgIG5vd2Fybl9mbGFnKC1Xbm8tZGVwcmVjYXRlZC1lbnVtLWVudW0tY29udmVyc2lvbikKICBlbmRpZigiJHtDTUFLRV9DWFhfQ09NUElMRVJfSUR9IiBNQVRDSEVTICIuKkNsYW5nLioiKQoKICAjIGR1bXAoQ01BS0VfQ19GTEFHUyBDTUFLRV9DWFhfRkxBR1MpIGR1bXAoQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHKQplbmRtYWNybyhBRERfTk9XQVJOX0ZMQUdTKQoKbWFjcm8oY2hlY2tfcGljX2ZsYWcpCiAgY2hlY2tfY3h4X2NvbXBpbGVyX2ZsYWcoIi1mUElDIiBGX1BJQykKICBpZihGX1BJQykKICAgIHNldChDTUFLRV9DX0ZMQUdTX0RFQlVHICIke0NNQUtFX0NfRkxBR1NfREVCVUd9IC1mUElDIikKICAgIHNldChDTUFLRV9DWFhfRkxBR1NfREVCVUcgIiR7Q01BS0VfQ1hYX0ZMQUdTX0RFQlVHfSAtZlBJQyIpCiAgZW5kaWYoRl9QSUMpCmVuZG1hY3JvKGNoZWNrX3BpY19mbGFnKQoKbWFjcm8oY2hlY2tfb3B0X25vbmVfZmxhZykKICBjaGVja19jX2NvbXBpbGVyX2ZsYWcoIi1PMCIgT1BUX0NfT1BUX05PTkUpCiAgY2hlY2tfY3h4X2NvbXBpbGVyX2ZsYWcoIi1PMCIgT1BUX0NYWF9PUFRfTk9ORSkKICBpZihPUFRfQ19PUFRfTk9ORSkKICAgIGlmKE5PVCAiJHtDTUFLRV9DX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLU8wIikKICAgICAgc2V0KENNQUtFX0NfRkxBR1NfREVCVUcgIiR7Q01BS0VfQ19GTEFHU19ERUJVR30gLU8wIiBDQUNIRSBTVFJJTkcgIkMgY29tcGlsZXIgb3B0aW9ucyIgRk9SQ0UpCiAgICBlbmRpZihOT1QgIiR7Q01BS0VfQ19GTEFHU19ERUJVR30iIE1BVENIRVMgIi1PMCIpCiAgZW5kaWYoT1BUX0NfT1BUX05PTkUpCiAgaWYoT1BUX0NYWF9PUFRfTk9ORSkKICAgIGlmKE5PVCAiJHtDTUFLRV9DWFhfRkxBR1NfREVCVUd9IiBNQVRDSEVTICItTzAiKQogICAgICBzZXQoQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHICIke0NNQUtFX0NYWF9GTEFHU19ERUJVR30gLU8wIiBDQUNIRSBTVFJJTkcgIkMrKyBjb21waWxlciBvcHRpb25zIiBGT1JDRSkKICAgIGVuZGlmKE5PVCAiJHtDTUFLRV9DWFhfRkxBR1NfREVCVUd9IiBNQVRDSEVTICItTzAiKQogIGVuZGlmKE9QVF9DWFhfT1BUX05PTkUpCmVuZG1hY3JvKGNoZWNrX29wdF9ub25lX2ZsYWcpCgptYWNybyhjaGVja19kZWJ1Z19nZGJfZmxhZykKICBjaGVja19jX2NvbXBpbGVyX2ZsYWcoIi1nZ2RiIiBPUFRfQ19HX0dEQikKICBjaGVja19jeHhfY29tcGlsZXJfZmxhZygiLWdnZGIiIE9QVF9DWFhfR19HREIpCiAgaWYoT1BUX0NfR19HREIpCiAgICBpZihOT1QgIiR7Q01BS0VfQ19GTEFHU19ERUJVR30iIE1BVENIRVMgIi1nZ2RiIikKICAgICAgc2V0KENNQUtFX0NfRkxBR1NfREVCVUcgIiR7Q01BS0VfQ19GTEFHU19ERUJVR30gLWdnZGIiIENBQ0hFIFNUUklORyAiQyBjb21waWxlciBvcHRpb25zIiBGT1JDRSkKICAgIGVuZGlmKE5PVCAiJHtDTUFLRV9DX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLWdnZGIiKQogIGVuZGlmKE9QVF9DX0dfR0RCKQogIGlmKE9QVF9DWFhfR19HREIpCiAgICBpZihOT1QgIiR7Q01BS0VfQ1hYX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLWdnZGIiKQogICAgICBzZXQoQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHICIke0NNQUtFX0NYWF9GTEFHU19ERUJVR30gLWdnZGIiIENBQ0hFIFNUUklORyAiQysrIGNvbXBpbGVyIG9wdGlvbnMiIEZPUkNFKQogICAgZW5kaWYoTk9UICIke0NNQUtFX0NYWF9GTEFHU19ERUJVR30iIE1BVENIRVMgIi1nZ2RiIikKICBlbmRpZihPUFRfQ1hYX0dfR0RCKQplbmRtYWNybyhjaGVja19kZWJ1Z19nZGJfZmxhZykKCm1hY3JvKGNoZWNrX2N4eF9zdGFuZGFyZF9mbGFnKQogIGZvcmVhY2goQ1hYX1NUQU5EQVJEIGMrKzIwIGMrKzE3IGMrKzE0IGMrKzExKQogICAgc3RyaW5nKFJFUExBQ0UgImMrKyIgIkNQTFVTUExVUyIgQ1hYX1NUQU5EQVJEX05VTSAiJHtDWFhfU1RBTkRBUkR9IikKICAgIHNldChDTUFLRV9SRVFVSVJFRF9RVUlFVCBUUlVFKQogICAgY2hlY2tfY3h4X2NvbXBpbGVyX2ZsYWcoIi1zdGQ9JHtDWFhfU1RBTkRBUkR9IiBDWFhfU1RBTkRBUkRfJHtDWFhfU1RBTkRBUkRfTlVNfSkKICAgIHNldChDTUFLRV9SRVFVSVJFRF9RVUlFVCBGQUxTRSkKICAgIGlmKENYWF9TVEFOREFSRF8ke0NYWF9TVEFOREFSRF9OVU19KQogICAgICBzdHJpbmcoUkVHRVggUkVQTEFDRSAiXFwrIiAieCIgQ1hYX1NUQU5EQVJEX05BTUUgIiR7Q1hYX1NUQU5EQVJEX1ZBTFVFfSIpCiAgICAgIHN0cmluZyhUT1VQUEVSICIke0NYWF9TVEFOREFSRF9OQU1FfSIgQ1hYX1NUQU5EQVJEX05BTUUpCiAgICAgIHN0cmluZyhSRUdFWCBSRVBMQUNFICJDWFgiICIiIENYWF9TVEFOREFSRF9WRVJTSU9OICIke0NYWF9TVEFOREFSRF9OQU1FfSIpCiAgICAgIG1lc3NhZ2UoIkNYWF9TVEFOREFSRF9OQU1FID0gJHtDWFhfU1RBTkRBUkRfTkFNRX0iKQogICAgICBtZXNzYWdlKCJDWFhfU1RBTkRBUkRfVkVSU0lPTiA9ICR7Q1hYX1NUQU5EQVJEX1ZFUlNJT059IikKCiAgICAgIGlmKENYWF9TVEFOREFSRF9OQU1FKQogICAgICAgIGFkZF9kZWZpbml0aW9ucygtRCIke0NYWF9TVEFOREFSRF9OQU1FfSIpCiAgICAgIGVuZGlmKENYWF9TVEFOREFSRF9OQU1FKQoKICAgICAgc2V0KENYWF9TVEFOREFSRF9WQUxVRSAiJHtDWFhfU1RBTkRBUkR9IiBDQUNIRSBTVFJJTkcgIkMrKyBzdGFuZGFyZCIgRk9SQ0UpCiAgICAgIHNldChDWFhfU1RBTkRBUkRfRkxBRyAiLXN0ZD0ke0NYWF9TVEFOREFSRH0iIENBQ0hFIFNUUklORyAiQysrIHN0YW5kYXJkIGFyZ3VtZW50IiBGT1JDRSkKICAgICAgc2V0KENNQUtFX0NYWF9GTEFHUyAiJHtDTUFLRV9DWFhfRkxBR1N9ICR7Q1hYX1NUQU5EQVJEX0ZMQUd9IikKICAgICAgYnJlYWsoKQogICAgZW5kaWYoQ1hYX1NUQU5EQVJEXyR7Q1hYX1NUQU5EQVJEX05VTX0pCiAgZW5kZm9yZWFjaCgpCgogIHN0cmluZyhSRUdFWCBSRVBMQUNFICJjXFwrXFwrIiAiIiBDWFhfU1RBTkRBUkRfVkVSU0lPTiAiJHtDWFhfU1RBTkRBUkRfVkFMVUV9IikKICBhZGRfZGVmaW5pdGlvbnMoLURDWFhfU1RBTkRBUkQ9JHtDWFhfU1RBTkRBUkRfVkVSU0lPTn0pCgogIG1lc3NhZ2UoIkMrKyBzdGFuZGFyZDogJHtDWFhfU1RBTkRBUkRfVkFMVUV9IikKZW5kbWFjcm8oY2hlY2tfY3h4X3N0YW5kYXJkX2ZsYWcpCgoKbWFjcm8oTk9XQVJOX0ZMQUcgRkxBRykKICBjYW5vbmljYWxpemUoVkFSTkFNRSAiJHtGTEFHfSIpCiAgY2hlY2tfY19jb21waWxlcl9mbGFnKCIke0ZMQUd9IiAiJHtWQVJOQU1FfSIpCiAgIyBkdW1wKCR7VkFSTkFNRX0pCgogIGlmKCR7VkFSTkFNRX0pCiAgICBzZXQoQ01BS0VfQ19GTEFHUyAiJHtDTUFLRV9DX0ZMQUdTfSAke0ZMQUd9IikKICAgIHNldChDTUFLRV9DWFhfRkxBR1MgIiR7Q01BS0VfQ1hYX0ZMQUdTfSAke0ZMQUd9IikKCiAgZW5kaWYoJHtWQVJOQU1FfSkKZW5kbWFjcm8oTk9XQVJOX0ZMQUcgRkxBRykKAAAAAAAAAAAtFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8hMAAAAAAAD9EwAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"paste",
					null,
					"AQAAABwAAAAAAAAAVgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAaW5jbHVkZShDaGVja0NDb21waWxlckZsYWcpCg",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAcAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"outl",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Debugger: Add or Select Configuration"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 158.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/qjs-opencv",
		"/home/roman/Projects/qjs-opencv/build",
		"/home/roman/Projects/qjs-opencv/cmake"
	],
	"file_history":
	[
		"/home/roman/Projects/qjs-opencv/cmake/glfw3Config.cmake",
		"/home/roman/Projects/qjs-opencv/js_clahe.cpp",
		"/home/roman/Projects/qjs-opencv/js_size.hpp",
		"/home/roman/Projects/qjs-opencv/js_rect.cpp",
		"/home/roman/Projects/qjs-opencv/js_size.cpp",
		"/home/roman/Projects/qjs-opencv/js_slice_iterator.cpp",
		"/home/roman/Projects/qjs-opencv/js_subdiv2d.cpp",
		"/home/roman/Projects/qjs-opencv/js_umat.cpp",
		"/home/roman/Projects/qjs-opencv/js_utility.cpp",
		"/home/roman/Projects/qjs-opencv/js.hpp",
		"/home/roman/Projects/qjs-opencv/jsbindings.hpp",
		"/home/roman/Projects/qjs-opencv/js.cpp",
		"/home/roman/Projects/qjs-opencv/geometry.cpp",
		"/home/roman/Projects/qjs-opencv/js_video_capture.cpp",
		"/home/roman/Projects/qjs-opencv/jsbindings.cpp",
		"/home/roman/Projects/qjs-opencv/js_cv.cpp",
		"/home/roman/Projects/qjs-opencv/js_contour.hpp",
		"/home/roman/Projects/qjs-opencv/init_module.cpp",
		"/home/roman/Projects/qjs-opencv/geometry.hpp",
		"/home/roman/Projects/qjs-opencv/util.hpp",
		"/home/roman/Projects/qjs-opencv/js_cv.hpp",
		"/home/roman/Projects/qjs-opencv/js_contour.cpp",
		"/home/roman/Projects/qjs-opencv/js_draw.cpp",
		"/home/roman/Projects/qjs-opencv/js_line.cpp",
		"/home/roman/Projects/qjs-opencv/js_mat.cpp",
		"/home/roman/Projects/qjs-opencv/js_point.cpp",
		"/home/roman/Projects/qjs-opencv/js_point_iterator.cpp",
		"/home/roman/Projects/qjs-opencv/cmake/FindQuickJS.cmake",
		"/home/roman/Projects/qjs-opencv/cmake/functions.cmake",
		"/home/roman/Projects/qjs-opencv/cmake/imgui-viewer.cmake",
		"/home/roman/Projects/qjs-opencv/cmake/js-bindings.cmake",
		"/home/roman/Projects/qjs-opencv/color.cpp",
		"/home/roman/Projects/qjs-opencv/color.hpp",
		"/home/roman/Projects/qjs-opencv/cmake/ccache.cmake",
		"/home/roman/Projects/qjs-opencv/cmake/opencv.cmake",
		"/home/roman/Projects/qjs-opencv/cmake/sdl2-config.cmake",
		"/home/roman/Projects/qjs-opencv/cmake/check-flags.cmake",
		"/home/roman/Projects/qjs-opencv/cmake/FindGLFW.cmake",
		"/home/roman/Projects/qjs-opencv/js_alloc.hpp",
		"/home/roman/Projects/qjs-opencv/CMakeLists.txt",
		"/home/roman/Projects/qjs-opencv/js_line.hpp",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Sources/opencv/modules/imgproc/src/drawing.cpp",
		"/home/roman/Projects/plot-cv/src/js_contour.cpp",
		"/home/roman/Projects/plot-cv/src/js_contour.hpp",
		"/home/roman/Projects/plot-cv/src/js_rect.cpp",
		"/home/roman/Projects/plot-cv/src/js_cv.cpp",
		"/home/roman/Projects/plot-cv/src/geometry.hpp",
		"/home/roman/Projects/plot-cv/src/js_array.hpp",
		"/home/roman/Projects/plot-cv/src/js_mat.cpp",
		"/home/roman/Projects/plot-cv/src/jsbindings.hpp",
		"/home/roman/Projects/plot-cv/src/pixel_neighborhood.hpp",
		"/home/roman/Projects/plot-cv/cvPipeline.js",
		"/home/roman/Projects/plot-cv/param.js",
		"/home/roman/Projects/plot-cv/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/cmake/highgui-viewer.cmake",
		"/home/roman/Projects/plot-cv/cmake/imgui-viewer.cmake",
		"/home/roman/Projects/plot-cv/cmake/js-bindings.cmake",
		"/home/roman/Projects/plot-cv/src/util.hpp",
		"/home/roman/Projects/plot-cv/src/png_write.hpp",
		"/home/roman/Projects/plot-cv/src/palette.hpp",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/test-png++.cpp",
		"/home/roman/Projects/plot-cv/src/js_draw.cpp",
		"/home/roman/Projects/plot-cv/src/js_umat.hpp",
		"/home/roman/Projects/plot-cv/src/js_umat.cpp",
		"/home/roman/Projects/plot-cv/cmake/opencv.cmake",
		"/home/roman/Projects/plot-cv/src/js_typed_array.hpp",
		"/home/roman/Projects/plot-cv/src/jsbindings.cpp",
		"/home/roman/Projects/plot-cv/src/js_clahe.cpp",
		"/home/roman/Projects/plot-cv/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/src/data.cpp",
		"/home/roman/Projects/plot-cv/src/js_slice_iterator.cpp",
		"/home/roman/Projects/plot-cv/src/js_point_iterator.cpp",
		"/home/roman/Projects/plot-cv/src/js_point.cpp",
		"/home/roman/Projects/plot-cv/src/js_mat.hpp",
		"/home/roman/Projects/plot-cv/src/js_size.cpp",
		"/home/roman/Projects/plot-cv/src/js_line.cpp",
		"/home/roman/Projects/plot-cv/src/js.cpp",
		"/home/roman/Projects/plot-cv/src/js_rect.hpp",
		"/home/roman/Projects/plot-cv/src/js_size.hpp",
		"/opt/opencv-4.5.0/include/opencv4/opencv2/freetype.hpp",
		"/home/roman/Projects/plot-cv/dnsresolve.js",
		"/home/roman/Projects/plot-cv/src/js_point.hpp",
		"/home/roman/Projects/plot-cv/src/js.hpp",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/src/js_subdiv2d.cpp",
		"/home/roman/Projects/plot-cv/src/skeletonization.hpp",
		"/home/roman/Projects/plot-cv/src/util.cpp",
		"/home/roman/Projects/plot-cv/src/imgui-viewer.hpp",
		"/opt/opencv-4.5.0/include/opencv4/opencv2/core/mat.hpp",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/grammars/shell.y",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/worker.js",
		"/home/roman/Projects/plot-cv/test_worker_module.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/test-cv.js",
		"/home/roman/Projects/plot-cv/test-umat.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/lib/filesystem.js",
		"/home/roman/Projects/plot-cv/lib/consoleSetup.js",
		"/home/roman/Projects/plot-cv/bjson.js",
		"/home/roman/Projects/plot-cv/quickjs/tests/bjson.c",
		"/home/roman/Projects/plot-cv/clang-list.js",
		"/home/roman/Projects/plot-cv/opencv_dummy.cpp",
		"/home/roman/Projects/plot-cv/test-bjson.js",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/clang-list.es",
		"/home/roman/Projects/plot-cv/lib/ecmascript/lexer.js",
		"/home/roman/Projects/plot-cv/repl.js",
		"/home/roman/Projects/plot-cv/lib/grammars/Lua.g4",
		"/home/roman/Projects/plot-cv/lib/grammars/Java8Parser.g4",
		"/home/roman/Projects/plot-cv/lib/grammars/JavaLexer.g4",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/estree.js",
		"/home/roman/Projects/plot-cv/lib/json/util.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/test-eagle.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/chars.js",
		"/home/roman/Projects/plot-cv/lib/grammars/C99_Parser.y",
		"/home/roman/Projects/plot-cv/lib/grammars/C99_Parser.l"
	],
	"find":
	{
		"height": 42.0
	},
	"find_in_files":
	{
		"height": 120.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"js\\.",
			"js.is_array_like\\(",
			"js\\.",
			"js.is_bool",
			"js\\.",
			"js.get_boolean\\(",
			"js.get_number\\(",
			"js\\.",
			"jsrt",
			"/src",
			"COMPILE_FLAGS",
			"OPENCV_FOUND",
			"flags",
			"^#",
			"CMAKE_INSTALL_RPATH",
			"extern C",
			"PLOTCV",
			"PLOT",
			"}_MODULE",
			"src_program",
			"add_exec",
			"_MODULE",
			"JS_INIT_MODULE",
			"plot-cv",
			"js.hpp",
			"include\\("
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"js_is_array_like(ctx, ",
			"JS_IsBool",
			"js_value_to(ctx, ",
			"extern \"C\""
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1940,
						"regions":
						{
						},
						"selection":
						[
							[
								355,
								372
							]
						],
						"settings":
						{
							"current_file": "/home/roman/Projects/qjs-opencv/js_mat.cpp",
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									1280,
									1297
								],
								[
									1411,
									1427
								],
								[
									1634,
									1646
								],
								[
									1962,
									1979
								],
								[
									2322,
									2334
								],
								[
									2957,
									2967
								],
								[
									3546,
									3557
								],
								[
									4389,
									4400
								],
								[
									4822,
									4839
								],
								[
									5342,
									5353
								],
								[
									6385,
									6398
								],
								[
									6900,
									6911
								],
								[
									7123,
									7135
								],
								[
									9523,
									9534
								],
								[
									12790,
									12801
								],
								[
									13653,
									13663
								],
								[
									13871,
									13881
								],
								[
									15447,
									15460
								],
								[
									15669,
									15678
								],
								[
									16440,
									16450
								],
								[
									19907,
									19920
								],
								[
									21695,
									21711
								],
								[
									23100,
									23115
								],
								[
									24759,
									24773
								],
								[
									25378,
									25404
								],
								[
									25911,
									25928
								],
								[
									26449,
									26463
								],
								[
									27157,
									27171
								],
								[
									28152,
									28166
								],
								[
									28728,
									28745
								],
								[
									29635,
									29646
								],
								[
									30186,
									30205
								],
								[
									31097,
									31110
								],
								[
									31881,
									31893
								],
								[
									32575,
									32586
								],
								[
									33089,
									33105
								],
								[
									34570,
									34589
								],
								[
									35673,
									35693
								],
								[
									35890,
									35910
								],
								[
									38170,
									38195
								],
								[
									38373,
									38392
								],
								[
									38790,
									38810
								],
								[
									38906,
									38926
								],
								[
									39022,
									39042
								],
								[
									39146,
									39166
								],
								[
									39262,
									39282
								],
								[
									39380,
									39400
								],
								[
									39498,
									39518
								],
								[
									39616,
									39636
								],
								[
									39732,
									39752
								],
								[
									39860,
									39880
								],
								[
									39986,
									40006
								],
								[
									40102,
									40122
								],
								[
									40226,
									40246
								],
								[
									40352,
									40366
								],
								[
									40450,
									40464
								],
								[
									40546,
									40564
								],
								[
									40653,
									40671
								],
								[
									40760,
									40778
								],
								[
									40878,
									40896
								],
								[
									40996,
									41014
								],
								[
									41107,
									41125
								],
								[
									41214,
									41232
								],
								[
									41329,
									41347
								],
								[
									41436,
									41454
								],
								[
									41547,
									41565
								],
								[
									41658,
									41676
								],
								[
									41771,
									41789
								],
								[
									41882,
									41900
								],
								[
									42002,
									42020
								],
								[
									42110,
									42128
								],
								[
									42218,
									42236
								],
								[
									42324,
									42342
								],
								[
									42432,
									42450
								],
								[
									42541,
									42559
								],
								[
									42639,
									42657
								],
								[
									42737,
									42749
								],
								[
									42834,
									42846
								],
								[
									42919,
									42931
								],
								[
									43006,
									43018
								],
								[
									43098,
									43110
								],
								[
									43198,
									43210
								],
								[
									43292,
									43304
								],
								[
									43387,
									43399
								],
								[
									43482,
									43500
								],
								[
									43604,
									43622
								],
								[
									43730,
									43748
								],
								[
									43858,
									43870
								],
								[
									43954,
									43966
								],
								[
									44056,
									44074
								],
								[
									44198,
									44218
								],
								[
									44260,
									44278
								],
								[
									44345,
									44357
								],
								[
									44466,
									44478
								],
								[
									44538,
									44556
								],
								[
									44594,
									44612
								],
								[
									44650,
									44668
								],
								[
									44706,
									44724
								],
								[
									44762,
									44780
								],
								[
									44818,
									44836
								],
								[
									44873,
									44891
								],
								[
									44929,
									44947
								],
								[
									44989,
									45007
								],
								[
									45048,
									45065
								],
								[
									45075,
									45086
								],
								[
									45127,
									45138
								],
								[
									46565,
									46578
								],
								[
									46688,
									46702
								],
								[
									46740,
									46754
								],
								[
									46806,
									46820
								]
							],
							"symlist":
							[
								"JSMatIteratorData",
								"  js_mat_free_func",
								"  js_mat_sizes",
								"  js_mat_dimensions",
								"  js_mat_track",
								"  js_mat_new",
								"  js_mat_wrap",
								"  js_mat_data",
								"  js_mat_print_data",
								"  js_mat_dump",
								"  js_mat_params",
								"  js_mat_ctor",
								"  js_mat_funcs",
								"  js_mat_expr",
								"  js_mat_init",
								"  js_mat_get",
								"  js_mat_get",
								"  js_mat_get_wh",
								"  js_mat_at",
								"  js_mat_set",
								"  js_mat_set_to",
								"  js_mat_get_props",
								"  js_mat_tostring",
								"  js_mat_inspect",
								"  js_mat_getrotationmatrix2d",
								"  js_mat_convert_to",
								"  js_mat_copy_to",
								"  js_mat_reshape",
								"  js_mat_getumat",
								"  js_mat_class_func",
								"  js_mat_fill",
								"  js_mat_class_create",
								"  js_mat_buffer",
								"  js_mat_array",
								"  js_mat_call",
								"  js_mat_finalizer",
								"  js_mat_iterator_new",
								"  js_mat_iterator_dump",
								"  js_mat_iterator_next",
								"  js_mat_iterator_finalizer",
								"  js_mat_iterator_dup",
								"JS_CGETSET_MAGIC_DEF",
								"JS_CGETSET_MAGIC_DEF",
								"JS_CGETSET_MAGIC_DEF",
								"JS_CGETSET_MAGIC_DEF",
								"JS_CGETSET_MAGIC_DEF",
								"JS_CGETSET_MAGIC_DEF",
								"JS_CGETSET_MAGIC_DEF",
								"JS_CGETSET_MAGIC_DEF",
								"JS_CGETSET_MAGIC_DEF",
								"JS_CGETSET_MAGIC_DEF",
								"JS_CGETSET_MAGIC_DEF",
								"JS_CGETSET_MAGIC_DEF",
								"JS_CGETSET_MAGIC_DEF",
								"JS_CGETSET_DEF",
								"JS_CGETSET_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_DEF",
								"JS_CFUNC_DEF",
								"JS_CFUNC_DEF",
								"JS_CFUNC_DEF",
								"JS_CFUNC_DEF",
								"JS_CFUNC_DEF",
								"JS_CFUNC_DEF",
								"JS_CFUNC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_ALIAS_DEF",
								"JS_ALIAS_DEF",
								"JS_PROP_STRING_DEF",
								"JS_ITERATOR_NEXT_DEF",
								"JS_PROP_STRING_DEF",
								"JS_CFUNC_DEF",
								"JS_CFUNC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_CFUNC_MAGIC_DEF",
								"JS_PROP_INT32_DEF",
								"CV_MAKETYPE",
								"  js_mat_init",
								"  js_mat_export",
								"JS_INIT_MODULE",
								"JS_INIT_MODULE",
								"JS_INIT_MODULE"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4185,
						"regions":
						{
						},
						"selection":
						[
							[
								4142,
								4160
							]
						],
						"settings":
						{
							"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2338.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "cmake/Functions.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 944,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 681.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "init_module.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2361,
						"regions":
						{
						},
						"selection":
						[
							[
								1445,
								1461
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 480.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "js_contour.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32329,
						"regions":
						{
						},
						"selection":
						[
							[
								8395,
								8395
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6320.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "js_line.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14400,
						"regions":
						{
						},
						"selection":
						[
							[
								9870,
								9870
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6700.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "js_mat.cpp",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47000,
						"regions":
						{
						},
						"selection":
						[
							[
								24892,
								25360
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 16854.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "js_point.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12536,
						"regions":
						{
						},
						"selection":
						[
							[
								7433,
								7433
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5520.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "util.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7222,
						"regions":
						{
						},
						"selection":
						[
							[
								7097,
								7122
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6026.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "jsbindings.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19798,
						"regions":
						{
						},
						"selection":
						[
							[
								6292,
								6292
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3126.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "LICENSE",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1067,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "js_array.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17595,
						"regions":
						{
						},
						"selection":
						[
							[
								17532,
								17538
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12386.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "js_alloc.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2472,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "js_point_iterator.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6043,
						"regions":
						{
						},
						"selection":
						[
							[
								5653,
								5653
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3031.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "js_rect.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18566,
						"regions":
						{
						},
						"selection":
						[
							[
								12519,
								12519
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8986.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "js_line.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2825,
						"regions":
						{
						},
						"selection":
						[
							[
								249,
								249
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "js_mat.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 797,
						"regions":
						{
						},
						"selection":
						[
							[
								128,
								128
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "js_point.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2521,
						"regions":
						{
						},
						"selection":
						[
							[
								70,
								70
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "js_point_iterator.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 791,
						"regions":
						{
						},
						"selection":
						[
							[
								106,
								106
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "js_rect.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2550,
						"regions":
						{
						},
						"selection":
						[
							[
								68,
								68
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "js_size.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2335,
						"regions":
						{
						},
						"selection":
						[
							[
								68,
								68
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "js_size.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14728,
						"regions":
						{
						},
						"selection":
						[
							[
								14436,
								14436
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8506.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "js_slice_iterator.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6447,
						"regions":
						{
						},
						"selection":
						[
							[
								5525,
								5525
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3324.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "js_slice_iterator.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 807,
						"regions":
						{
						},
						"selection":
						[
							[
								136,
								136
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "js_subdiv2d.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10862,
						"regions":
						{
						},
						"selection":
						[
							[
								10862,
								10862
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5435.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "js_umat.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29746,
						"regions":
						{
						},
						"selection":
						[
							[
								29499,
								29499
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 21561.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "js_umat.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1863,
						"regions":
						{
						},
						"selection":
						[
							[
								116,
								116
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "js_utility.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5972,
						"regions":
						{
						},
						"selection":
						[
							[
								5970,
								5970
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3304.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "js_video_capture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6393,
						"regions":
						{
						},
						"selection":
						[
							[
								5818,
								5818
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3761.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "jsbindings.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4698,
						"regions":
						{
						},
						"selection":
						[
							[
								254,
								254
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "js.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14147,
						"regions":
						{
						},
						"selection":
						[
							[
								12,
								12
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "js.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23851,
						"regions":
						{
						},
						"selection":
						[
							[
								99,
								99
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "js_clahe.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4958,
						"regions":
						{
						},
						"selection":
						[
							[
								4958,
								4958
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2724.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "js_contour.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2158,
						"regions":
						{
						},
						"selection":
						[
							[
								229,
								229
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "js_cv.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 84543,
						"regions":
						{
						},
						"selection":
						[
							[
								84016,
								84016
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 46661.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "js_cv.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1321,
						"regions":
						{
						},
						"selection":
						[
							[
								287,
								287
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "js_draw.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16098,
						"regions":
						{
						},
						"selection":
						[
							[
								15423,
								15441
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9903.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "cmake/CCache.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1748,
						"regions":
						{
						},
						"selection":
						[
							[
								1747,
								1747
							]
						],
						"settings":
						{
							"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 98.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "cmake/CheckFlags.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5478,
						"regions":
						{
						},
						"selection":
						[
							[
								2433,
								2433
							]
						],
						"settings":
						{
							"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1200.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "cmake/JSBindings.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5641,
						"regions":
						{
						},
						"selection":
						[
							[
								1991,
								1991
							]
						],
						"settings":
						{
							"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 232.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "cmake/OpenCV.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6229,
						"regions":
						{
						},
						"selection":
						[
							[
								449,
								449
							]
						],
						"settings":
						{
							"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "cmake/FindQuickJS.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5441,
						"regions":
						{
						},
						"selection":
						[
							[
								4893,
								4961
							]
						],
						"settings":
						{
							"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2088.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "cmake/SDL2.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1939,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "cmake/ccache.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2552,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "cmake/functions.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 944,
						"regions":
						{
						},
						"selection":
						[
							[
								8,
								8
							]
						],
						"settings":
						{
							"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "cmake/check-flags.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5451,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "qjs-opencv.sublime-project",
	"replace":
	{
		"height": 75.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"js-bin",
				"cmake/js-bindings.cmake"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"wasi",
				"cmake/wasi.toolchain.cmake"
			],
			[
				"test-vid",
				"plot-cv/test-video.js"
			],
			[
				"cvPipe",
				"plot-cv/cvPipeline.js"
			],
			[
				"param",
				"plot-cv/param.js"
			],
			[
				"test-oencv",
				"plot-cv/test-opencv.js"
			],
			[
				"js_umat",
				"plot-cv/src/js_umat.hpp"
			],
			[
				"pixel_",
				"plot-cv/src/pixel_neighborhood.hpp"
			],
			[
				"test-opencv",
				"plot-cv/test-opencv.js"
			],
			[
				"js_typed",
				"plot-cv/src/js_typed_array.hpp"
			],
			[
				"opencv.cmake",
				"plot-cv/cmake/opencv.cmake"
			],
			[
				"test-vide",
				"plot-cv/test-video.js"
			],
			[
				"test-op",
				"plot-cv/test-opencv.js"
			],
			[
				"cvHigh",
				"plot-cv/cvHighGUI.js"
			],
			[
				"js.cpp",
				"plot-cv/src/js.cpp"
			],
			[
				"js_size",
				"plot-cv/src/js_size.hpp"
			],
			[
				"js_ma",
				"plot-cv/src/js_mat.cpp"
			],
			[
				"js_cv",
				"plot-cv/src/js_cv.cpp"
			],
			[
				"js_draw",
				"plot-cv/src/js_draw.cpp"
			],
			[
				"quickjs.h",
				"plot-cv/quickjs/quickjs.h"
			],
			[
				"test-open",
				"plot-cv/test-opencv.js"
			],
			[
				"js_mat",
				"plot-cv/src/js_mat.cpp"
			],
			[
				"jsbind",
				"plot-cv/src/jsbindings.hpp"
			],
			[
				"js_cv.cp",
				"plot-cv/src/js_cv.cpp"
			],
			[
				"util.js",
				"plot-cv/lib/util.js"
			],
			[
				"cvpipe",
				"plot-cv/cvPipeline.js"
			],
			[
				"param.js",
				"plot-cv/param.js"
			],
			[
				"test-video",
				"plot-cv/test-video.js"
			],
			[
				"test_w",
				"plot-cv/test_worker_module.js"
			],
			[
				"test-wo",
				"plot-cv/test-worker.js"
			],
			[
				"cvPip",
				"plot-cv/cvPipeline.js"
			],
			[
				"worker",
				"plot-cv/worker.js"
			],
			[
				"worker.js",
				"plot-cv/worker.js"
			],
			[
				"test-work",
				"plot-cv/test-worker.js"
			],
			[
				"test-uma",
				"plot-cv/test-umat.js"
			],
			[
				"clang-as",
				"plot-cv/clang-ast.js"
			],
			[
				"quickjs.c",
				"plot-cv/quickjs/quickjs.c"
			],
			[
				"filesys",
				"plot-cv/lib/filesystem.js"
			],
			[
				"console",
				"plot-cv/lib/consoleSetup.js"
			],
			[
				"util",
				"plot-cv/lib/util.js"
			],
			[
				"bjson",
				"plot-cv/bjson.js"
			],
			[
				"ast-shel",
				"plot-cv/ast-shell.js"
			],
			[
				"clang-ast",
				"plot-cv/clang-ast.js"
			],
			[
				"clang-list",
				"plot-cv/clang-list.js"
			],
			[
				"test-bjs",
				"plot-cv/test-bjson.js"
			],
			[
				"repl.js",
				"plot-cv/repl.js"
			],
			[
				"clang-li",
				"plot-cv/clang-list.js"
			],
			[
				"clang-",
				"plot-cv/clang-ast.js"
			],
			[
				"ast-shell",
				"plot-cv/ast-shell.js"
			],
			[
				"test-eagle",
				"test-eagle.js"
			],
			[
				"",
				"plot-cv/test-ecmascript2.js"
			],
			[
				"repl.j",
				"plot-cv/repl.js"
			],
			[
				"test-ecmascript2.js",
				"plot-cv/test-ecmascript2.js"
			],
			[
				"test-ecmascript.js",
				"plot-cv/test-ecmascript.js"
			],
			[
				"repl",
				"plot-cv/repl.js"
			],
			[
				"parser2",
				"plot-cv/lib/ecmascript/parser2.js"
			],
			[
				"test-ecma",
				"plot-cv/test-ecmascript2.es"
			],
			[
				"test-parse",
				"plot-cv/test-parse.js"
			],
			[
				"grammar.js",
				"plot-cv/lib/parse/grammar.js"
			],
			[
				"terminal",
				"plot-cv/terminal.js"
			],
			[
				"test_lex",
				"plot-cv/quickjs/modules/tests/test_lexer.js"
			],
			[
				"test-ec",
				"plot-cv/test-ecmascript.js"
			],
			[
				"parser.js",
				"plot-cv/lib/ecmascript/parser.js"
			],
			[
				"printer.",
				"plot-cv/lib/ecmascript/printer.js"
			],
			[
				"estree",
				"plot-cv/lib/ecmascript/estree.js"
			],
			[
				"parser2.j",
				"plot-cv/lib/ecmascript/parser2.js"
			],
			[
				"tmp.js",
				"plot-cv/tmp.js"
			],
			[
				"test-util",
				"plot-cv/test-util.js"
			],
			[
				"printer",
				"plot-cv/lib/ecmascript/printer.js"
			],
			[
				"parser",
				"plot-cv/lib/ecmascript/parser.js"
			],
			[
				"repl.",
				"repl.js"
			],
			[
				"utils.h",
				"plot-cv/utils.h"
			],
			[
				"test-str",
				"plot-cv/quickjs/modules/test-str0.c"
			],
			[
				"property-en",
				"plot-cv/quickjs/modules/property-enumeration.h"
			],
			[
				"cutil",
				"plot-cv/quickjs/cutils.c"
			],
			[
				"quickjs-lex",
				"plot-cv/quickjs/modules/quickjs-lexer.c"
			],
			[
				"test-libre",
				"plot-cv/quickjs/modules/test-libregexp.c"
			],
			[
				"quickjs-in",
				"plot-cv/quickjs/modules/quickjs-internal.h"
			],
			[
				"consoleS",
				"plot-cv/lib/consoleSetup.js"
			],
			[
				"test-ed",
				"plot-cv/test-editline.js"
			],
			[
				"gl.js",
				"plot-cv/gl.js"
			],
			[
				"editline",
				"plot-cv/editline.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/quickjs/modules/modules.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 406.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
